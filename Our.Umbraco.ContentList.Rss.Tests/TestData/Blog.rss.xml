<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="http://blog.aabech.no/rss/xslt"?>
<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Lars-Erik's blog</title>
        <link>http://blog.aabech.no/</link>
        <description>Ramblings about Umbraco, .net and JavaScript development. With a sprinkle of other stuff.</description>
        <generator>Articulate, blogging built on Umbraco</generator>
        <item>
            <guid isPermaLink="false">1165</guid>
            <link>http://blog.aabech.no/archive/ourumbracowysiwyggrid-100-beta-released/</link>
            <category>umbraco</category>
            <title>Our.Umbraco.WysiwygGrid 1.0.0 beta released</title>
            <description>
                &lt;p&gt;A while ago I &lt;a href="/archive/the-state-of-wysiwyg-grid-editing-in-umbraco-a-prototype/"&gt;blogged about the state of WYSIWYG in the Umbraco grid editor&lt;/a&gt;. We're now about to add this script to a second and likely third Umbraco 8 site, so I had to generalize and package up the code.&lt;/p&gt;
                &lt;p&gt;There's nothing much to hide or earn from here, so I decided to put it up on github and nuget instead of our internal scm and feeds.&lt;/p&gt;
                &lt;p&gt;Hope to see some more community members fiddling with it, if nothing else that it inspires the block editor team to make the backoffice experience more similar to the frontend look and feel.&lt;/p&gt;
                &lt;p&gt;A definite change from the previous blogpost is that we favor grid settings over inline styling. By slightly modifying the bootstrap view (we use v4 anyway), we can add multiple classes instead of attributes as is done the original views. As such we can have settings like these:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1035/wysiwyg-grid-settings.png" alt="Example grid settings dialog" /&gt;&lt;/p&gt;
                &lt;p&gt;Those will generate extra classes named &lt;code&gt;padding-lots&lt;/code&gt; and &lt;code&gt;theme-inverse&lt;/code&gt;.&lt;br /&gt;
                Those classes are added to rows or cells in both the backoffice and the front-end.&lt;br /&gt;
                By doing some fancy sass include ninjaing, we can hopefully limit the amount of duplication, while still mimicing the front-end as much as possible in the backoffice.&lt;/p&gt;
                &lt;p&gt;There are some samples in the github repo if you're unsure how to get started. The SQLCE database is included with a fairly common test username/password. 😇&lt;/p&gt;
                &lt;p&gt;Without further ado, here's the nuget and github links:&lt;/p&gt;
                &lt;p&gt;&lt;a href="https://github.com/lars-erik/Our.Umbraco.WysiwygGrid"&gt;https://github.com/lars-erik/Our.Umbraco.WysiwygGrid&lt;/a&gt;&lt;br /&gt;
                &lt;a href="https://www.nuget.org/packages/Our.Umbraco.WysiwygGrid/1.0.0-beta01"&gt;https://www.nuget.org/packages/Our.Umbraco.WysiwygGrid/1.0.0-beta01&lt;/a&gt;&lt;/p&gt;
                &lt;p&gt;Hope you enjoy it, and as usual, hope for a good discussion or feedback from the community!&lt;/p&gt;
            </description>
            <pubDate>Thu, 23 Apr 2020 12:09:36 Z</pubDate>
            <a10:updated>2020-04-23T12:09:36Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1164</guid>
            <link>http://blog.aabech.no/archive/the-state-of-wysiwyg-grid-editing-in-umbraco-a-prototype/</link>
            <category>umbraco</category>
            <title>The state of WYSIWYG grid editing in Umbraco - a prototype</title>
            <description>
                &lt;h2&gt;The state of the grid&lt;/h2&gt;
                &lt;p&gt;Since the grid was launched at the CG talk &amp;quot;The sky is the limit&amp;quot; back in 2015 (i think),
                it has been a joy to use for editors, designers and developers alike.
                Granted, there's been the other feature that could've gotten more love (configuration and settings), but generally it does the job swell.&lt;br /&gt;
                However, it's still just a white canvas with &amp;quot;settings applied&amp;quot;.&lt;br /&gt;
                &lt;a href="https://twitter.com/aaantoinee"&gt;Antoine&lt;/a&gt; made &lt;a href="https://our.umbraco.com/packages/backoffice-extensions/lepainter/"&gt;LePainter&lt;/a&gt; back in 2015, but likely didn't get much traction.&lt;br /&gt;
                I was just told about it today by &lt;a href="https://twitter.com/callumbwhyte"&gt;Callum&lt;/a&gt;. Shame on me for not watching the package space enough, how embarrasing. 😳&lt;/p&gt;
                &lt;p&gt;Anyway...&lt;/p&gt;
                &lt;h2&gt;Why should we care&lt;/h2&gt;
                &lt;p&gt;Recently, I've been in lots of discussions; near battles IMO; about which CMS to sell to our customers.&lt;br /&gt;
                The feedback is that editors wonder why what they see while editing does not match what they see in the front-end.
                We do work with another CMS where the backoffice experience has a near 1:1 layout and design with the front-end.
                As developers, we tend to think structured data is the better solution. Think nested- and stacked content.
                I tend to agree. But in a sales meeting, those arguments are total losing arguments. A competing agency will bury you when they oversell the fancy editing experience. Even though the not-so-apparent technical features of the competing CMS are totally useless.&lt;br /&gt;
                And I do agree - the editing experience is what Umbraco likes to sell as well!&lt;/p&gt;
                &lt;h2&gt;What can we do?&lt;/h2&gt;
                &lt;p&gt;The current HQ efforts are working on the &amp;quot;block based&amp;quot; editor. It's been going on for the better part of a year, but the publicly available information is mostly &lt;a href="https://github.com/umbraco/rfcs/blob/master/cms/0012-rfc-block%20editor.md"&gt;just an RFC with screenshots&lt;/a&gt; looking like stacked / nested content, and that's it. The technical aspects seem super, but there's nothing much (but text) about the general editing experience. Also, and I know this is a hot take, editors DO want to see three columns in the editor when it ends up three columns in the front-end.&lt;/p&gt;
                &lt;p&gt;Hopefully, as mentioned in the RFC, it can act as a stepping stone towards the &amp;quot;Grid 2.0&amp;quot; (which we started work on at the retreat &lt;em&gt;two&lt;/em&gt; years ago).&lt;/p&gt;
                &lt;p&gt;But as far as I'm concerned, this could just as well end up never happening. The effort is not very visible, Project UniCore 🦄 has (rightly) high priority, and in the mean time we're stuck with Grid 1.0, or maybe, hopefully, a rumored &lt;em&gt;commercial&lt;/em&gt; package called Bento by the eminent &lt;a href="https://twitter.com/pgregorynz"&gt;Peter Gregory&lt;/a&gt; and his colleagues at KØBEN Digital.&lt;/p&gt;
                &lt;h2&gt;A prototype&lt;/h2&gt;
                &lt;p&gt;So back using Grid 1.0 for projects to be delivered imminently, I've started doing some prototypes for something similar to what LePainter did for early v7 projects.&lt;/p&gt;
                &lt;p&gt;I asked the community if it was madness or worth pursuing, and the general feedback is that it's both. Hence this blog post to explore it some more, and hopefully gather some more feedback or at least provide feedback to the block editor team. (Hope they receive it. 😁)&lt;/p&gt;
                &lt;p&gt;Here's a quick little preview of what I've been doing so far:&lt;/p&gt;
                &lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/B6LLiO116jc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
                &lt;h2&gt;The issues&lt;/h2&gt;
                &lt;p&gt;Actually getting the styling into the grid is &amp;quot;just&amp;quot; a matter of including a few pagefuls of JavaScript and a limited and scoped CSS file in a package.manifest file for the site. Both classes and styles are applied as expected, and with some due dilligence it doesn't look half bad.&lt;/p&gt;
                &lt;p&gt;The biggest issue I have is that the cells and controls are styled white, and while styling one have to mind not messing up the GUI text like &amp;quot;Settings applied&amp;quot;.&lt;/p&gt;
                &lt;p&gt;I attempted to lessen the opacity of the cells and controls, and it works to a degree. The minute one adds a background image however, the entire thing starts to crumble. How to keep the WYSIWYG experience while still seeing the GUI? One could fantasize about doing an average color sample of the image and toggling between white and black text, maybe? Could be done in a short hacking sprint...&lt;br /&gt;
                Could just keep it fairly white like I've done in the prototype.
                Could keep just the active rows white. This is where I start struggling. 😳&lt;/p&gt;
                &lt;p&gt;To be frank, the biggest problem lies in the fact that the &amp;quot;Add content&amp;quot; button is &lt;em&gt;in&lt;/em&gt; the grid. Other CMSes have drag drop functionality from a menu over to the side. It could possibly still just be white or slightly transparent. The last problem then is all those &amp;quot;settings applied&amp;quot; and empty cells with the other type of &amp;quot;Add content&amp;quot; button.&lt;/p&gt;
                &lt;p&gt;I can't help but think this is all within grasp, albeit just out of my limited back-ender reach. 😆&lt;/p&gt;
                &lt;h2&gt;The settings dialog issues&lt;/h2&gt;
                &lt;p&gt;The settings dialog is a chapter of itself. It's a mystery to me why we still have a concept of individual &amp;quot;prevalue editors&amp;quot; in Umbraco. Property editors have the same model, and can be sneaked in there by just providing a full path.&lt;/p&gt;
                &lt;p&gt;However, as experienced when working on &lt;a href="http://blog.aabech.no/archive/our-umbraco-community-contentlist-10-beta-released/"&gt;our ContentList package&lt;/a&gt;, nesting property editors using built-in directives wreaks total havok on the styling. There's some grey background and drop shadows - that I haven't seen being actively used anywhere. It's generally just a mystery, and a huge candidate for backoffice re-work.&lt;/p&gt;
                &lt;p&gt;Also, for instance the slider property editor does look a bit weird when used as a setting editor. I do hope that those things will get an overhaul and are made more uniform sooner or later.&lt;/p&gt;
                &lt;p&gt;I'll just leave that hanging, since I know (and appreciate) there are several HQ and community efforts going on to clean things up.&lt;/p&gt;
                &lt;h2&gt;The code&lt;/h2&gt;
                &lt;p&gt;Since I managed to &lt;a href="https://github.com/umbraco/Umbraco-CMS/pull/2639/commits/76c924fbaa3da89d9865d9ec405e6dbb123852e3"&gt;sneak in a few new events in the grid&lt;/a&gt;, making it work was a matter of hooking into the &amp;quot;grid.initialized&amp;quot; event and start watching the model. There might be some performance issues with large grids since it's a deep watch, but with todays computers that might be irrational over engineering to think as well.&lt;/p&gt;
                &lt;p&gt;It adds the configured styles as expected.&lt;br /&gt;
                For the configuration, it just adds the value of the configuration setting called &amp;quot;class&amp;quot;. If there's more it concats the setting key with the setting value, delimited by a dash.&lt;/p&gt;
                &lt;p&gt;You can scrutinize the JavaScript here, or in &lt;a href="https://gist.github.com/lars-erik/9dbf8f4004121c8eb109423b814af34c"&gt;this gist&lt;/a&gt;.&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;angular.module(&amp;quot;umbraco&amp;quot;).run([&amp;quot;eventsService&amp;quot;, function(eventsService) {
                function findModelScope(scope) {
                if (!scope) {
                return null;
                }
                if (scope.model) {
                return scope;
                }
                return findModelScope(scope.$parent);
                }

                function isProtectedClass(className) {
                return className === &amp;quot;umb-row-inner&amp;quot; ||
                className === &amp;quot;umb-cell-inner&amp;quot; ||
                className.substr(0, 2) === &amp;quot;ng-&amp;quot; ||
                className.substr(0, 2) === &amp;quot;ui-&amp;quot;;
                }

                function addClasses(element, gridItem) {
                function classNameFromConfig(e) {
                if (e === &amp;quot;class&amp;quot;) {
                return gridItem.config[e];
                } else {
                return e + &amp;quot;-&amp;quot; + gridItem.config[e];
                }
                }

                var classes = (element.className || &amp;quot;&amp;quot;).split(/\s+/);
                var newClasses = classes.filter(isProtectedClass);
                var nameClass = (gridItem.name || &amp;quot;&amp;quot;).toLowerCase().replace(&amp;quot; &amp;quot;, &amp;quot;-&amp;quot;);
                var configClasses = Object.keys(gridItem.config || {}).map(classNameFromConfig);
                newClasses.push(nameClass);
                newClasses = newClasses.concat(configClasses);
                element.className = newClasses.join(&amp;quot; &amp;quot;);
                }

                function addStyles(element, gridItem) {
                function styleFromKeyPair(e) {
                return e + &amp;quot;:&amp;quot; + gridItem.styles[e];
                }

                var stylesValues = Object.keys(gridItem.styles || {}).map(styleFromKeyPair);
                element.style = stylesValues.join(&amp;quot;;&amp;quot;);
                }

                eventsService.on(&amp;quot;grid.initialized&amp;quot;,
                function(evt, data) {
                var modelScope = findModelScope(data.scope);
                var model = modelScope.model;
                var jqEl = data.element;
                var el = data.element.get(0);
                jqEl.addClass(&amp;quot;stylized-grid&amp;quot;);

                modelScope.$watch(
                &amp;quot;model&amp;quot;,
                function () {
                var areaElements = el.getElementsByClassName(&amp;quot;umb-column&amp;quot;);
                if (areaElements.length === 0) {
                return;
                }
                model.value.sections.forEach(function (area, ai) {
                var rowElements = areaElements[ai].getElementsByClassName(&amp;quot;umb-row-inner&amp;quot;);
                area.rows.forEach(function (row, ri) {
                var rowElement = rowElements[ri];
                addClasses(rowElement, row);
                addStyles(rowElement, row);

                var cellElements = rowElement.getElementsByClassName(&amp;quot;umb-cell-inner&amp;quot;);
                row.areas.forEach(function(cell, ci) {
                addClasses(cellElements[ci], cell);
                addStyles(cellElements[ci], cell);
                });
                });
                });
                },
                true
                );
                });

                }]);
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h2&gt;The CSS&lt;/h2&gt;
                &lt;p&gt;To not interfere with any other backoffice styling, the script adds the class &amp;quot;stylized-grid&amp;quot; to the grid container. Here's the (S)CSS I used to make things more transparent:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;.umb-grid.stylized-grid {

                .umb-cell-content {
                background-color: rgba(255, 255, 255, .8);
                }

                .umb-cell-content:hover {
                background-color: rgba(255, 255, 255, 1);
                }

                .umb-cell-content.-has-editors {
                background-color: rgba(255, 255, 255, .8);
                }

                .umb-cell-content.-has-editors:hover {
                background-color: rgba(255, 255, 255, 1);
                }

                .umb-grid-add-more-content {
                background-color: rgba(255, 255, 255, 1);
                }

                .umb-control-bar, .umb-grid-has-config {
                font-family: Lato, Helvetica Neue, Helvetica, Arial, sans-serif !important;
                }

                iframe {
                background-color: transparent;
                }

                @import &amp;quot;../../../Assets/grid&amp;quot;;
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The import at the bottom is the sass that styles our individual components in the front-end, and that should be reflected in the backoffice. &lt;/p&gt;
                &lt;h2&gt;Conclusion&lt;/h2&gt;
                &lt;p&gt;We'll be diving into deep water and testing this out on a real customer. I'm a bit weary, but we need to get the experience.&lt;/p&gt;
                &lt;p&gt;I do hope I've been able to provide some inspiration, and that WYSIWYG editing in Umbraco might get the renaissance (I believe) it deserves.&lt;/p&gt;
                &lt;p&gt;Feel free to drop your comments below or ping me on Twitter or Slack!&lt;br /&gt;
                Also happy to continue the discussion on our or github, but not sure the best way forward, if any.&lt;/p&gt;
            </description>
            <pubDate>Fri, 03 Apr 2020 13:26:14 Z</pubDate>
            <a10:updated>2020-04-03T13:26:14Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1163</guid>
            <link>http://blog.aabech.no/archive/our-umbraco-community-contentlist-10-beta-released/</link>
            <category>Umbraco</category>
            <title>Our Umbraco Community ContentList 1.0 (beta) released</title>
            <description>
                &lt;p&gt;ContentList is a grid editor we've used internally at MarkedsPartner since 2016. It helps editors and designers insert lists of content in the grid without having to worry about queries, paging or building new templates.&lt;br /&gt;
                I've finally been able to upgrade it to Umbraco 8 and polished it a bit. It's still slightly in beta, but there's nothing special but a bit of CSS polish lacking, so it should be fairly safe to use in production. 👼&lt;/p&gt;
                &lt;p&gt;There's a whole documentation piece in the readme &lt;a href="https://github.com/lars-erik/Our.Umbraco.ContentList"&gt;over on github&lt;/a&gt;, so I won't bother with a whole lot of prose in this blogpost, but I recorded a half an hour demo (below) showing all the aspects of implementing its use in an Umbraco site.&lt;/p&gt;
                &lt;p&gt;There's really not much to do once you get the hang of it, and our editors and staff have been enjoying using it for five years, so I hope you will too.&lt;/p&gt;
                &lt;p&gt;Here's the demo, and I really hope to get your feedback here, on github or on youtube.
                The first 3-4 minutes show the gist of it, so no need to sit through the full half hour if you're just curious. 👍&lt;/p&gt;
                &lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/7O6Es1SNf9s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
            </description>
            <pubDate>Wed, 01 Apr 2020 21:57:27 Z</pubDate>
            <a10:updated>2020-04-01T21:57:27Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1162</guid>
            <link>http://blog.aabech.no/archive/armlinker-100-released/</link>
            <category>automation</category>
            <category>azure</category>
            <title>ARMLinker 1.0.0 released</title>
            <description>
                &lt;h2&gt;ARM What?&lt;/h2&gt;
                &lt;p&gt;I've been having fun with ARM Templates the last couple of months.
                It's a wonderful way to keep your Azure Resource definitions in source control.
                Not to mention being able to parameterize deployment to different environments,
                and not least keeping your secrets neatly tucked away in a vault.&lt;/p&gt;
                &lt;p&gt;However, compiling a set of resources from multiple files currently requires
                you to put your templates online. I want to keep most of our customer products'
                templates private, and to do that one have to &lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/linked-templates#linked-template"&gt;jump through hoops&lt;/a&gt; to copy the
                files over to a storage account and link to the given URLs.
                It kind of defeats the whole purpose for me.&lt;/p&gt;
                &lt;p&gt;So I went and created a small tool to be able to link templates locally.&lt;/p&gt;
                &lt;h2&gt;How to use it&lt;/h2&gt;
                &lt;p&gt;There's an installable project type for Visual Studio called &lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/create-visual-studio-deployment-project"&gt;&amp;quot;Azure Resource Group&amp;quot;&lt;/a&gt;.
                When you create one you get a few files:&lt;/p&gt;
                &lt;ul&gt;
                &lt;li&gt;Deploy-AzureResourceGroup.ps1&lt;/li&gt;
                &lt;li&gt;azuredeploy.json&lt;/li&gt;
                &lt;li&gt;azuredeploy.parameters.json&lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;You can stuff all of the resources you require in the azuredeploy.json file, and finally deploy them using a wizard, or run the PowerShell script in a CD pipeline.&lt;/p&gt;
                &lt;p&gt;By installing ARMLinker you can start running the tool to link other JSON files
                into the main azuredeploy.json file.&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;install-module ARMLinker
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Let's say we have a Logic App (what I've been doing).&lt;br /&gt;
                To deploy it and its connections and other needed resources, we often want
                a bounch of secret keys for different APIs and such.&lt;/p&gt;
                &lt;p&gt;Here's a trimmed down sample of a Logic App that runs a SQL command:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;{
                &amp;quot;$schema&amp;quot;: &amp;quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&amp;quot;,
                &amp;quot;contentVersion&amp;quot;: &amp;quot;1.0.0.0&amp;quot;,
                &amp;quot;parameters&amp;quot;: {
                &amp;quot;Tags&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
                &amp;quot;defaultValue&amp;quot;: {
                &amp;quot;Customer&amp;quot;: &amp;quot;My customer&amp;quot;,
                &amp;quot;Product&amp;quot;: &amp;quot;Their Logic App&amp;quot;,
                &amp;quot;Environment&amp;quot;: &amp;quot;Beta&amp;quot;
                }
                },
                &amp;quot;SQL-Server&amp;quot;: {
                &amp;quot;defaultValue&amp;quot;: &amp;quot;some.database.windows.net&amp;quot;,
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
                },
                &amp;quot;SQL-User&amp;quot;: {
                &amp;quot;defaultValue&amp;quot;: &amp;quot;appuser&amp;quot;,
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
                },
                &amp;quot;SQL-Password&amp;quot;: {
                &amp;quot;defaultValue&amp;quot;: &amp;quot;&amp;quot;,
                &amp;quot;type&amp;quot;: &amp;quot;securestring&amp;quot;
                },
                &amp;quot;SQL-Database-Name&amp;quot;: {
                &amp;quot;defaultValue&amp;quot;: &amp;quot;beta-database&amp;quot;,
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
                }
                },
                &amp;quot;variables&amp;quot;: {
                &amp;quot;ConnectionName&amp;quot;: &amp;quot;[replace(concat(parameters('Tags').Customer, '-', parameters('Tags').Product, '-SQLConnection-', parameters('Tags').Environment), ' ', '')]&amp;quot;,
                &amp;quot;LogicAppName&amp;quot;: &amp;quot;[replace(concat(parameters('Tags').Customer, '-', parameters('Tags').Product, '-', parameters('Tags').Environment), ' ', '')]&amp;quot;
                },
                &amp;quot;resources&amp;quot;: [
                {
                &amp;quot;type&amp;quot;: &amp;quot;Microsoft.Web/connections&amp;quot;,
                &amp;quot;apiVersion&amp;quot;: &amp;quot;2016-06-01&amp;quot;,
                &amp;quot;location&amp;quot;: &amp;quot;westeurope&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;[variables('ConnectionName')]&amp;quot;,
                &amp;quot;properties&amp;quot;: {
                &amp;quot;api&amp;quot;: {
                &amp;quot;id&amp;quot;: &amp;quot;[concat(subscription().id,'/providers/Microsoft.Web/locations/westeurope/managedApis/sql')]&amp;quot;
                },
                &amp;quot;displayName&amp;quot;: &amp;quot;sql_connection&amp;quot;,
                &amp;quot;parameterValues&amp;quot;: {
                &amp;quot;server&amp;quot;: &amp;quot;[parameters('SQL-Server')]&amp;quot;,
                &amp;quot;database&amp;quot;: &amp;quot;[parameters('SQL-Database-Name')]&amp;quot;,
                &amp;quot;authType&amp;quot;: &amp;quot;windows&amp;quot;,
                &amp;quot;username&amp;quot;: &amp;quot;[parameters('SQL-User')]&amp;quot;,
                &amp;quot;password&amp;quot;: &amp;quot;[parameters('SQL-Password')]&amp;quot;
                }
                }
                },
                {
                &amp;quot;type&amp;quot;: &amp;quot;Microsoft.Logic/workflows&amp;quot;,
                &amp;quot;apiVersion&amp;quot;: &amp;quot;2017-07-01&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;[variables('LogicAppName')]&amp;quot;,
                &amp;quot;dependsOn&amp;quot;: [ &amp;quot;[resourceId('Microsoft.Web/connections', variables('ConnectionName'))]&amp;quot; ],
                &amp;quot;location&amp;quot;: &amp;quot;westeurope&amp;quot;,
                &amp;quot;properties&amp;quot;: {
                &amp;quot;state&amp;quot;: &amp;quot;Enabled&amp;quot;,
                &amp;quot;definition&amp;quot;: {
                &amp;quot;$schema&amp;quot;: &amp;quot;https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#&amp;quot;,
                &amp;quot;contentVersion&amp;quot;: &amp;quot;1.0.0.0&amp;quot;,
                &amp;quot;parameters&amp;quot;: {
                &amp;quot;$connections&amp;quot;: {
                &amp;quot;defaultValue&amp;quot;: {},
                &amp;quot;type&amp;quot;: &amp;quot;Object&amp;quot;
                },
                &amp;quot;SQL-Server&amp;quot;: {
                &amp;quot;defaultValue&amp;quot;: &amp;quot;&amp;quot;,
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
                },
                &amp;quot;SQL-Database-Name&amp;quot;: {
                &amp;quot;defaultValue&amp;quot;: &amp;quot;&amp;quot;,
                &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
                }
                },
                &amp;quot;triggers&amp;quot;: {
                &amp;quot;Recurrence&amp;quot;: {
                &amp;quot;recurrence&amp;quot;: {
                &amp;quot;frequency&amp;quot;: &amp;quot;Day&amp;quot;,
                &amp;quot;interval&amp;quot;: 1
                },
                &amp;quot;type&amp;quot;: &amp;quot;Recurrence&amp;quot;
                }
                },
                &amp;quot;actions&amp;quot;: {
                &amp;quot;Execute_a_SQL_query_(V2)&amp;quot;: {
                &amp;quot;runAfter&amp;quot;: {},
                &amp;quot;type&amp;quot;: &amp;quot;ApiConnection&amp;quot;,
                &amp;quot;inputs&amp;quot;: {
                &amp;quot;body&amp;quot;: {
                &amp;quot;query&amp;quot;: &amp;quot;select 'do something really useful' as task&amp;quot;
                },
                &amp;quot;host&amp;quot;: {
                &amp;quot;connection&amp;quot;: {
                &amp;quot;name&amp;quot;: &amp;quot;@parameters('$connections')['sql']['connectionId']&amp;quot;
                }
                },
                &amp;quot;method&amp;quot;: &amp;quot;post&amp;quot;,
                &amp;quot;path&amp;quot;: &amp;quot;/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('SQL-Server')))},@{encodeURIComponent(encodeURIComponent(parameters('SQL-Database-Name')))}/query/sql&amp;quot;
                }
                }
                },
                &amp;quot;outputs&amp;quot;: {}
                },
                &amp;quot;parameters&amp;quot;: {
                &amp;quot;$connections&amp;quot;: {
                &amp;quot;value&amp;quot;: {
                &amp;quot;sql&amp;quot;: {
                &amp;quot;connectionId&amp;quot;: &amp;quot;[resourceId('Microsoft.Web/connections', variables('ConnectionName'))]&amp;quot;,
                &amp;quot;connectionName&amp;quot;: &amp;quot;variables('ConnectionName')&amp;quot;,
                &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Web/locations/westeurope/managedApis/sql&amp;quot;
                }
                }
                },
                &amp;quot;SQL-Server&amp;quot;: {
                &amp;quot;value&amp;quot;: &amp;quot;[parameters('SQL-Server')]&amp;quot;
                },
                &amp;quot;SQL-Database-Name&amp;quot;: {
                &amp;quot;value&amp;quot;: &amp;quot;[parameters('SQL-Database-Name')]&amp;quot;
                }
                }
                }
                }
                ]
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The parameters here are ARM template parameters. The most interesting one is the secret password for the database server. It's secret, so it's not supposed to live in our parameter file or source control. We've also got the ID of the connection, which will be the &lt;em&gt;real&lt;/em&gt; ID in the actual deployed Logic App.&lt;/p&gt;
                &lt;p&gt;There's a fancy way to go about keeping the password in a key vault on Azure, and the Visual Studio Wizard is really helpful with putting it into a vault.&lt;/p&gt;
                &lt;p&gt;When we're done and ready for production, a parameter file may look like this:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;{
                &amp;quot;$schema&amp;quot;: &amp;quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#&amp;quot;,
                &amp;quot;contentVersion&amp;quot;: &amp;quot;1.0.0.0&amp;quot;,
                &amp;quot;parameters&amp;quot;: {
                &amp;quot;Tags&amp;quot;: {
                &amp;quot;value&amp;quot;: {
                &amp;quot;Customer&amp;quot;: &amp;quot;My customer&amp;quot;,
                &amp;quot;Product&amp;quot;: &amp;quot;Their Logic App&amp;quot;,
                &amp;quot;Environment&amp;quot;: &amp;quot;Production&amp;quot;
                }
                },
                &amp;quot;SQL-Database-Name&amp;quot;: {
                &amp;quot;value&amp;quot;: &amp;quot;production-database&amp;quot;
                },
                &amp;quot;SQL-Password&amp;quot;: {
                &amp;quot;reference&amp;quot;: {
                &amp;quot;keyVault&amp;quot;: {
                &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Vault-Group/providers/Microsoft.KeyVault/vaults/OurKeyVault&amp;quot;
                },
                &amp;quot;secretName&amp;quot;: &amp;quot;CustomerSQLPassword&amp;quot;
                }
                }
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;One of the beauties of using Logic Apps is that it have this nice GUI to work with in the portal. There's also an extension for Visual Studio to be able to edit them within Visual Studio.&lt;/p&gt;
                &lt;p&gt;However, the definition will look like this when viewed with the code editor. (I removed the bulk of it, but notice the parameters) &lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;{
                &amp;quot;definition&amp;quot;: {
                &amp;quot;$schema&amp;quot;: &amp;quot;https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#&amp;quot;,
                &amp;quot;actions&amp;quot;: {
                &amp;quot;Execute_a_SQL_query_(V2)&amp;quot;: {
                &amp;quot;inputs&amp;quot;: {
                &amp;quot;body&amp;quot;: {
                &amp;quot;query&amp;quot;: &amp;quot;select 'do something really useful' as task&amp;quot;
                },
                &amp;quot;host&amp;quot;: {
                &amp;quot;...&amp;quot;
                },
                &amp;quot;...&amp;quot;
                },
                &amp;quot;runAfter&amp;quot;: {},
                &amp;quot;type&amp;quot;: &amp;quot;ApiConnection&amp;quot;
                }
                },
                &amp;quot;...&amp;quot;,
                &amp;quot;parameters&amp;quot;: {
                &amp;quot;$connections&amp;quot;: {
                &amp;quot;defaultValue&amp;quot;: {},
                &amp;quot;type&amp;quot;: &amp;quot;Object&amp;quot;
                },
                &amp;quot;...&amp;quot;
                },
                &amp;quot;triggers&amp;quot;: {
                &amp;quot;...&amp;quot;
                }
                },
                &amp;quot;parameters&amp;quot;: {
                &amp;quot;$connections&amp;quot;: {
                &amp;quot;value&amp;quot;: {
                &amp;quot;sql&amp;quot;: {
                &amp;quot;connectionId&amp;quot;: &amp;quot;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/CustomerResourceGroup/providers/Microsoft.Web/connections/MyCustomer-TheirProduct-SQLConnection-Prod&amp;quot;,
                &amp;quot;connectionName&amp;quot;: &amp;quot;MyCustomer-TheirProduct-SQLConnection-Prod&amp;quot;,
                &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Web/locations/westeurope/managedApis/sql&amp;quot;
                }
                }
                },
                &amp;quot;SQL-Database-Name&amp;quot;: {
                &amp;quot;value&amp;quot;: &amp;quot;production-database&amp;quot;
                },
                &amp;quot;SQL-Server&amp;quot;: {
                &amp;quot;value&amp;quot;: &amp;quot;some.database.windows.net&amp;quot;
                }
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Notice that the parameters are all filled out. We can't copy this into our ARM template since it's all real Resource ID references.&lt;/p&gt;
                &lt;p&gt;There's another way to get only the definition. We can use the &lt;a href="https://docs.microsoft.com/en-us/powershell/module/az.logicapp"&gt;Az.LogicApp&lt;/a&gt; powershell module:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;(get-azlogicapp -resourcegroupname CustomerResourceGroup -name mycustomer-theirproduct-prod).definition.ToString()
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;It will give us only the &lt;code&gt;definition&lt;/code&gt; part of the template.&lt;/p&gt;
                &lt;p&gt;Both gives us a means to put &lt;em&gt;only&lt;/em&gt; the &lt;em&gt;definition&lt;/em&gt; of the logic app into a file in our local project.&lt;/p&gt;
                &lt;p&gt;Now we can go back to the ARM template and replace the definition with a simple link to the file.
                Say we &lt;code&gt;Set-Content&lt;/code&gt; the result of the statement above into a file called &amp;quot;logicapp.json&amp;quot;. We can modify the ARM template as such:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;{
                &amp;quot;$schema&amp;quot;: &amp;quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&amp;quot;,
                &amp;quot;contentVersion&amp;quot;: &amp;quot;1.0.0.0&amp;quot;,
                &amp;quot;parameters&amp;quot;: {
                &amp;quot;...&amp;quot;
                },
                &amp;quot;variables&amp;quot;: {
                &amp;quot;...&amp;quot;
                },
                &amp;quot;resources&amp;quot;: [
                {
                &amp;quot;type&amp;quot;: &amp;quot;Microsoft.Web/connections&amp;quot;,
                &amp;quot;...&amp;quot;
                },
                {
                &amp;quot;type&amp;quot;: &amp;quot;Microsoft.Logic/workflows&amp;quot;,
                &amp;quot;apiVersion&amp;quot;: &amp;quot;2017-07-01&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;[variables('LogicAppName')]&amp;quot;,
                &amp;quot;dependsOn&amp;quot;: [ &amp;quot;[resourceId('Microsoft.Web/connections', variables('ConnectionName'))]&amp;quot; ],
                &amp;quot;location&amp;quot;: &amp;quot;westeurope&amp;quot;,
                &amp;quot;properties&amp;quot;: {
                &amp;quot;state&amp;quot;: &amp;quot;Enabled&amp;quot;,
                &amp;quot;definition&amp;quot;: {
                &amp;quot;templateLink&amp;quot; {
                &amp;quot;uri&amp;quot;: &amp;quot;.\logicapp.json&amp;quot;
                }
                },
                &amp;quot;parameters&amp;quot;: {
                &amp;quot;$connections&amp;quot;: {
                &amp;quot;value&amp;quot;: {
                &amp;quot;sql&amp;quot;: {
                &amp;quot;connectionId&amp;quot;: &amp;quot;[resourceId('Microsoft.Web/connections', variables('ConnectionName'))]&amp;quot;,
                &amp;quot;connectionName&amp;quot;: &amp;quot;variables('ConnectionName')&amp;quot;,
                &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Web/locations/westeurope/managedApis/sql&amp;quot;
                }
                }
                },
                &amp;quot;...&amp;quot;
                }
                }
                }
                ]
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;By running &lt;code&gt;ARMLinker&lt;/code&gt; we will have the same generated file as we started with,
                but we can use the GUI for the logic app and easily fetch the new JSON for it.&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;Convert-TemplateLinks azuredeploy.json azuredeploy.linked.json
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;For now, I've actually turned those around and put the &amp;quot;linked&amp;quot; template in a file called azuredeploy.linked.json in order to generate the &amp;quot;conventional&amp;quot; azuredeploy.json file.&lt;/p&gt;
                &lt;h2&gt;More options&lt;/h2&gt;
                &lt;p&gt;When using the &amp;quot;copy content from the editor&amp;quot; method mentioned above, we have to make sure to copy &lt;em&gt;only&lt;/em&gt; the definition object. Otherwise we'll bring the concrete parameters into the local file.&lt;/p&gt;
                &lt;p&gt;Do not despair!&lt;/p&gt;
                &lt;p&gt;There's another option that doesn't match the official schema for &amp;quot;templateLink&amp;quot;.
                By adding a property called &amp;quot;jsonPath&amp;quot; we can point to an object deeper in the linked file.
                Say we copy the content from the online editor.&lt;/p&gt;
                &lt;p&gt;We can modify the linked template as such:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;&amp;quot;definition&amp;quot;: {
                &amp;quot;templateLink&amp;quot; {
                &amp;quot;uri&amp;quot;: &amp;quot;.\logicapp.json&amp;quot;,
                &amp;quot;jsonPath&amp;quot;: &amp;quot;definition&amp;quot;
                }
                },
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;It will now only merge the definition part from the logicapp.json file.&lt;/p&gt;
                &lt;p&gt;I only implemented dot separated paths for now, so exotic paths to arrays or paths with special characters won't work.&lt;/p&gt;
                &lt;p&gt;IE. &lt;code&gt;resources[0]['very fancy'].thing&lt;/code&gt; won't work, but &lt;code&gt;things.with.dots&lt;/code&gt; will work.&lt;/p&gt;
                &lt;h2&gt;Plans and dreams&lt;/h2&gt;
                &lt;p&gt;This is pretty much only a workaround while waiting for Microsoft to realise this is totally useful and obvious.&lt;/p&gt;
                &lt;p&gt;I originally intended it to be a Custom Tool for Visual Studio, but I could not for the life of me figure out how to enable Custom Tools in projects not of the C# or Visual Basic archetypes.&lt;/p&gt;
                &lt;p&gt;If anyone picks up on it, I'll happily discuss new features and even happierly receive meaningful pull requests.&lt;/p&gt;
                &lt;p&gt;Other than that, I believe it does the job properly. It can be used in CD pipelines. It should even work for any JSON, not necessarily ARM templates. &lt;/p&gt;
                &lt;p&gt;I would really appreciate your feedback, and hope you like it!&lt;/p&gt;
                &lt;p&gt;Now go commit and deploy something automagically while fetching coffee! 🤘😁🦄&lt;/p&gt;
                &lt;h2&gt;Code and gallery links&lt;/h2&gt;
                &lt;p&gt;&lt;a href="https://github.com/lars-erik/ARMLinker"&gt;Github repository&lt;/a&gt;&lt;br /&gt;
                &lt;a href="https://www.powershellgallery.com/packages/ARMLinker/1.0.1"&gt;PowerShell gallery&lt;/a&gt;&lt;/p&gt;
            </description>
            <pubDate>Wed, 22 Jan 2020 23:22:41 Z</pubDate>
            <a10:updated>2020-01-22T23:22:41Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1139</guid>
            <link>http://blog.aabech.no/archive/environmental-approvaltests/</link>
            <category>unit testing</category>
            <title>Environmental ApprovalTests</title>
            <description>
                &lt;h2&gt;Background&lt;/h2&gt;
                &lt;p&gt;A while ago I wrote a &lt;a href="//blog.aabech.no/archive/exploiting-approvaltests-for-clearer-tests/"&gt;post about a tool called ApprovalTests&lt;/a&gt;. I've included it in my workshop on unit testing Umbraco, and people are amazed at its usefulness. Having Visual Studio pop a diff in your face when stuff breaks is a real timesaver. However, when I ran the workshop at CodeGarden 18, I realized people were concerned that their tests would be impossible to run in CI environments and the like. Not to worry - ApprovalTests have you covered. (Pun intended)&lt;/p&gt;
                &lt;h2&gt;Environmentalism&lt;/h2&gt;
                &lt;p&gt;When declaring reporters with ApprovalTests, you can specify multiple reporters. That's not all. The reporters have an extensive API on them, which caters for us tailoring everything. There is one particularly interesting interface on all &amp;quot;diff-reporters&amp;quot; named &lt;code&gt;IEnvironmentAwareReporter&lt;/code&gt;.&lt;br /&gt;
                The &lt;code&gt;VisualStudioReporter&lt;/code&gt; one has a nice little one-liner implementation:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public override bool IsWorkingInThisEnvironment(string forFile)
                {
                return OsUtils.IsWindowsOs() &amp;amp;&amp;amp; base.IsWorkingInThisEnvironment(forFile) &amp;amp;&amp;amp; LaunchedFromVisualStudio();
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The last function call there checks if the current process is a descendent of &lt;code&gt;devenv.exe&lt;/code&gt;. If it isn't, execution will just be passed to the next reporter in the chain. So there! It won't break your CI build.&lt;/p&gt;
                &lt;p&gt;But what do we want in our CI build, then? Probably a regular WhateverUnit assertion. I use NUnit, so that'll be our example.&lt;/p&gt;
                &lt;h2&gt;Falling back&lt;/h2&gt;
                &lt;p&gt;Take this little test. I approved the result for seed 1, and we'll examine the output for an invalid result by swapping to 2:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[TestFixture]
                [UseReporter(typeof(VisualStudioReporter))]
                public class When_Running_In_Different_Environments
                {
                [Test]
                public void Delegates_To_Most_Appropriate_Reporter()
                {
                var rnd = new Random(1);
                var items = Enumerable
                .Range(0, 10)
                .Select(x =&amp;gt; rnd.Next());
                Approvals.VerifyAll(items, &amp;quot;&amp;quot;);
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Let's change the seed to 2 to fail the test:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;var rnd = new Random(2);
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Now if we run the test with NUnit3-Console.exe, we'll get an exception saying that ApprovalTests can't find Visual Studio:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;nunit3-console.exe .\bin\debug\environmentaltests.dll

                ...
                1) Error : EnvironmentalTests.When_Running_In_Different_Environments.Delegates_To_Most_Appropriate_Reporter
                System.Exception : Couldn't find Visual Studio at
                at ApprovalTests.Reporters.GenericDiffReporter.Report(String approved, String received) in C:\code\ApprovalTests.Net\ApprovalTests\Reporters\GenericDiffReporter.cs:line 142
                ...
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;It sounds worse than it is. ApprovalTests insists that it has &lt;em&gt;something&lt;/em&gt; to do. We can add a reporter to the fixture to fix it:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[TestFixture]
                [UseReporter(typeof(VisualStudioReporter), typeof(NUnitReporter))]
                public class When_Running_In_Different_Environments
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Now when we run the test, we get a pure assertion failure:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;1) Failed : EnvironmentalTests.When_Running_In_Different_Environments.Delegates_To_Most_Appropriate_Reporter
                Expected string length 165 but was 162. Strings differ at index 6.
                Expected: &amp;quot;[0] = 534011718\n[1] = 237820880\n[2] = 1002897798\n[3] = 165700...&amp;quot;
                But was:  &amp;quot;[0] = 1655911537\n[1] = 867932563\n[2] = 356479430\n[3] = 211537...&amp;quot;
                -----------------^
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Notice it didn't even mention Visual Studio. Going back into our favorite IDE will start popping diffs again, and the NUnit one will govern the output.&lt;/p&gt;
                &lt;h2&gt;Cleaning up&lt;/h2&gt;
                &lt;p&gt;So should we go around declaring at least two reporters on all our fixtures, then? Luckily not. There are two more tricks that are nice to know.&lt;/p&gt;
                &lt;p&gt;First, the reporter attribute is found by iterating up the inheritance hierarchy. It can be defined as high up as all your &lt;code&gt;[assembly:XAttribute]&lt;/code&gt; metadata. You can create a file in your test project root called &lt;code&gt;ApprovalsConfig.cs&lt;/code&gt; for instance. Within it, you declare your reporters on the assembly level:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;using ApprovalTests.Reporters;

                [assembly:UseReporter(typeof(VisualStudioReporter), typeof(NUnitReporter))]
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The second is that you might not want the NUnit assertion when you run in VS (for some reason), or maybe some other tool might be in your way. You might even want composite reporters. In any case, it also makes for a bit nicer setup if you implement the &lt;code&gt;FirstWorkingReporter&lt;/code&gt; class:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class EnvironmentReporter : FirstWorkingReporter
                {
                public static readonly EnvironmentReporter INSTANCE = new EnvironmentReporter();

                public EnvironmentReporter()
                : base(
                VisualStudioReporter.INSTANCE,
                NUnitReporter.INSTANCE
                )
                {
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;With it, we can change our &lt;code&gt;UseReporter&lt;/code&gt; to be:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[assembly:UseReporter(typeof(EnvironmentReporter))]
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Now the first reporter to confirm its environment is executed, and the rest are ignored. You might want to keep the NUnit one around, though. In that case, you can implement &lt;code&gt;MultiReporter&lt;/code&gt; in the same way - which coincidentally is the same that &lt;code&gt;UseReporterAttribute&lt;/code&gt; does.&lt;/p&gt;
                &lt;p&gt;I encourage you to go have a look at &lt;a href="https://github.com/approvals/ApprovalTests.Net/tree/master/ApprovalTests/Reporters"&gt;all the built-in reporters&lt;/a&gt; and get some inspiration for even more helpful reporting.&lt;/p&gt;
                &lt;p&gt;I'd rejoice for any cool usages in the discussion thread. :)&lt;/p&gt;
            </description>
            <pubDate>Sun, 03 Jun 2018 21:24:46 Z</pubDate>
            <a10:updated>2018-06-03T21:24:46Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1138</guid>
            <link>http://blog.aabech.no/archive/morphing-ucommerce-products/</link>
            <category>umbraco</category>
            <category>ucommerce</category>
            <title>Morphing UCommerce Products</title>
            <description>
                &lt;h2&gt;The problem&lt;/h2&gt;
                &lt;p&gt;Today I had a new but fun challenge with UCommerce. Turns out, as usual, it's a great fit for my whims with architecture.
                I was stuck between a rock and a hard place when I was looking at adding a custom pricing algoritm.
                I can't go into details, but there's custom client pricing involved of course.
                To add to the fun, we're mapping UCommerce products to DTOs for wire transfer. We could aslo have been mapping to view models or something else. To map we're using AutoMapper with quite a few configurations and jumps-through-hoops.&lt;/p&gt;
                &lt;p&gt;I had this code (ish):&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;var products = productRepository.Select().Where(SomePredicate);
                var mapped = products.Select(Mapper.Map&amp;lt;ProductDto&amp;gt;);
                return mapped;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;I immediately thought of a few options:&lt;/p&gt;
                &lt;ul&gt;
                &lt;li&gt;Iterate over the products and change prices here&lt;/li&gt;
                &lt;li&gt;Create a Product adapter with additional logic and map from that&lt;/li&gt;
                &lt;li&gt;Execute the pricing logic from AutoMapper configuration&lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;They all seemed weird and out of place though. None seemed like they would be easy to find for the next developer. Not even with unit tests. It just didn't seem right.
                Changing data on the entities would mean I'd have to go out of my way to ensure nobody went and saved those products later in the request. Creating an adapter would mean loads of new instances, bloated wrapper classes and weird names.
                And finally executing business logic from AutoMapper configuration means I'd been mixing responsibilities en mass.&lt;/p&gt;
                &lt;h2&gt;UCommerce &amp;amp; NHibernate to the rescue&lt;/h2&gt;
                &lt;p&gt;Luckily I've been using EntityFramework a lot and tried to force it into my Domain Driven Design patterns since it's infancy. I've been through the lot (and I enjoy it). So I kind of know what to expect from an ORM. When using UCommerce I'm stuck with NHibernate, but I haven't really been doing it justice by just leaving it in the background. (And fiddling with Entity Framework - which is just as good!)
                Together the two systems are extremely powerful. UCommerce have even documented the possibilities,
                though the documentation fails to point out the really juicy benefits.&lt;/p&gt;
                &lt;p&gt;We have &lt;code&gt;ProductDefintion&lt;/code&gt;, right? It allows us to set up product types with different properties and variant options. It even supports inheritance. But we're still stuck with the &lt;code&gt;Product&lt;/code&gt; class and its &lt;code&gt;GetProperty()&lt;/code&gt; overrides. In my case, I'd like to have &lt;code&gt;ProductWithFancyPricing&lt;/code&gt; so I could override that &lt;code&gt;GetPrice()&lt;/code&gt; method. If I could have &lt;code&gt;ProductWithFancyPricing&lt;/code&gt; and &lt;code&gt;ProductWithEvenFancierPricing&lt;/code&gt; that would be totally awesome.&lt;/p&gt;
                &lt;p&gt;Turns out you can have your cake and eat it too. When properly using an ORM you can exploit OOP like it's supposed to and use polymorphism for varying behavior. It's possible to set up an inheritance tree so the mapper automatically handles creation of different types for you. You've basically got three options:&lt;/p&gt;
                &lt;ul&gt;
                &lt;li&gt;
                Table per concrete class (type)
                &lt;ul&gt;
                &lt;li&gt;All classes have a table of their own&lt;/li&gt;
                &lt;li&gt;Useful when base classes don't have (much) data&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                Table per hierarchy
                &lt;ul&gt;
                &lt;li&gt;One table per base class&lt;/li&gt;
                &lt;li&gt;Useful when &lt;em&gt;all&lt;/em&gt; data is on the base class&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                Table per subclass
                &lt;ul&gt;
                &lt;li&gt;One common table for base data&lt;/li&gt;
                &lt;li&gt;Individual tables per derived class with only additional data&lt;/li&gt;
                &lt;li&gt;Useful when there are some data in both classes. (Think umbracoNode)&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;In my case, I don't need any new data on the derived classes. It's all there in &lt;code&gt;GetProperty()&lt;/code&gt; anyway.
                &lt;em&gt;(I will add some getters though. ModelsBuilder, anyone? )&lt;/em&gt;&lt;br /&gt;
                So for me it's going to be Table per hierarchy. The rest of the options are all viable for this technique if you have other requirements.
                You can &lt;a href="https://docs.ucommerce.net/ucommerce/v7.12/extending-ucommerce/extending-ucommerce-entities.html"&gt;read a bit about it in the UCommerce docs&lt;/a&gt;.&lt;/p&gt;
                &lt;h2&gt;Mapping some product types&lt;/h2&gt;
                &lt;p&gt;&lt;em&gt;(I inadvertently wrote document types there. ModelsBuilder, anyone?)&lt;/em&gt;&lt;/p&gt;
                &lt;p&gt;In order to have NHibernate treat products as subclasses with the Table per hierarchy strategy it needs a way to pick the right class for each record. That way is known as discriminator columns. I first thought I could just discriminate by the ProductDefinitionId, but it turns out NHibernate doesn't support discriminating on a column already in use for associations (foreign keys) or other means.&lt;br /&gt;
                We have to add a column. I just call it &amp;quot;Discriminator&amp;quot; and make it a varchar.&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;alter table uCommerce_Product add Discriminator nvarchar(max)
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Then we need some entities. I added a couple of docu... product types:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class ProductWithFancyPricing : UCommerce.EntitiesV2.Product
                {
                public override Money GetPrice(PriceGroup priceGroup)
                {
                var price = base.GetPrice(priceGroup);
                if (IsChristmas())
                {
                price = new Money(price.Value * 2, price.Culture, price.Currency);
                }
                return base.GetPrice(priceGroup);
                }
                }

                public class ProductWithEvenFancierPricing : UCommerce.EntitiesV2.Product
                {
                public override Money GetPrice(PriceGroup priceGroup)
                {
                var blackMarket = ObjectFactory.Instance.Resolve&amp;lt;IBlackMarketService&amp;gt;();
                var priceValue = blackMarket.GetPrice(Sku);
                return new Money(priceValue, priceGroup.Currency);
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The next thing you need is to tell NHibernate that these are our new product classes:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class ProductWithFancyPricingMapping : FluentNHibernate.Mapping.SubclassMap&amp;lt;ProductWithFancyPricing&amp;gt;
                {
                public ProductWithFancyPricingMapping()
                {
                DiscriminatorValue(&amp;quot;Product with fancy pricing&amp;quot;);
                }
                }

                public class ProductWithEvenFancierPricingMapping : FluentNHibernate.Mapping.SubclassMap&amp;lt;ProductWithEvenFancierPricing&amp;gt;
                {
                public ProductWithEvenFancierPricingMapping()
                {
                DiscriminatorValue(&amp;quot;Product with naughty pricing&amp;quot;);
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;We also need to subclass UCommerce's mapping for Product in order to tell UCommerce which column to use as the discriminator:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class ProductMap : global::UCommerce.EntitiesV2.Maps.ProductMap
                {
                public ProductMap()
                {
                DiscriminateSubClassesOnColumn(&amp;quot;Discriminator&amp;quot;);
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Finally we need a class in the same assembly with a tag on it. &lt;a href="https://docs.ucommerce.net/ucommerce/v7.12/extending-ucommerce/save-custom-data-in-the-database.html"&gt;More on that in the UCommerce docs&lt;/a&gt;.&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class MappingMarker : IContainsNHibernateMappingsTag
                {
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;To have NHibernate pick the right classes now, we just need to fix the existing products if we have any.
                I have called my discriminator values the same as my document types, so I can easily construct a query as such:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;update
                ucommerce_product
                set
                discriminator = case productdefinitionid
                when 10 then 'Product with fancy pricing'
                when 11 then 'Product with naughty pricing'
                else null
                end
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Now if we go...&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;var products = productRepository.Select();
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;...we'll get a bounch of &lt;code&gt;ProductWithFancyPricings&lt;/code&gt; and &lt;code&gt;ProductWithEvenFancierPricing&lt;/code&gt;.
                If you have more types, you might get into trouble though. You need to have a discriminator on them all.&lt;/p&gt;
                &lt;h2&gt;The final hurdle&lt;/h2&gt;
                &lt;p&gt;So that's cool. That's really cool. But there's one hurdle we have to jump over before we can cross the goal line. From very nasty experiences I knew I had to test &lt;em&gt;everything&lt;/em&gt; manually and integrated. So I went and tried to see what happened if I added a product through the UCommerce Admin UI.&lt;/p&gt;
                &lt;p&gt;&lt;em&gt;boom&lt;/em&gt; :)&lt;/p&gt;
                &lt;p&gt;'Course it didn't work. It actually did, and didn't. Several weird things happened ranging from strange NHibernate mapping exceptions to products getting the discriminator &amp;quot;UCommerce.EntitiesV2.Product&amp;quot;. (Which makes a lot of sense if you think about it)&lt;/p&gt;
                &lt;p&gt;The @#¤%&amp;amp; &lt;code&gt;CreateCategoryOrProduct.as[p|c]x&lt;/code&gt; WebForms control is in our way. It instantiates a &lt;code&gt;Product&lt;/code&gt; and saves it. It's completely sealed and unconfigurable. We could overwrite it with a custom one, but that would open another can of worms with regards to upgrading, source control and what-not. Luckily it's going away very very soon in UCommerce V8. (2018?)&lt;/p&gt;
                &lt;p&gt;After hacking at it a bit my final resolve was to add a step right after save in the product saving pipeline. Again, UCommerce is so versatile that even when it sucks, it's got a golden workaround right up its arm.
                If you're not familiar with UCommerce Pipelines, &lt;a href="https://docs.ucommerce.net/ucommerce/v7.12/extending-ucommerce/create-pipeline-task.html"&gt;go read about it here&lt;/a&gt;.&lt;/p&gt;
                &lt;p&gt;Here's the extra configuration. (In a .config file included from UCommerce's custom.config)&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;&amp;lt;!-- PRODUCT CLASS FIX --&amp;gt;
                &amp;lt;component id=&amp;quot;SaveProduct&amp;quot;
                service=&amp;quot;UCommerce.Pipelines.IPipeline`1[[UCommerce.EntitiesV2.Product, UCommerce]], UCommerce&amp;quot;
                type=&amp;quot;UCommerce.Pipelines.Catalog.ProductPipeline, UCommerce.Pipelines&amp;quot;&amp;gt;
                &amp;lt;parameters&amp;gt;
                &amp;lt;tasks&amp;gt;
                &amp;lt;array&amp;gt;
                &amp;lt;value&amp;gt;${Product.UpdateRevision}&amp;lt;/value&amp;gt;
                &amp;lt;value&amp;gt;${Product.Save}&amp;lt;/value&amp;gt;
                &amp;lt;value&amp;gt;${FixProductClass}&amp;lt;/value&amp;gt;
                &amp;lt;value&amp;gt;${Product.IndexAsync}&amp;lt;/value&amp;gt;
                &amp;lt;/array&amp;gt;
                &amp;lt;/tasks&amp;gt;
                &amp;lt;/parameters&amp;gt;
                &amp;lt;/component&amp;gt;

                &amp;lt;component id=&amp;quot;FixProductClass&amp;quot;
                service=&amp;quot;UCommerce.Pipelines.IPipelineTask`1[[UCommerce.EntitiesV2.Product, UCommerce]], UCommerce&amp;quot;
                type=&amp;quot;My.Awesome.Site.Persistence.FixProductClassTask, My.Awesome.Site.UCommerce&amp;quot;/&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;A pipeline task gets a reference to the entity being handled, so we can't just go and replace the entire product with an instance of the right type. But we can fake it and force the database value to be correct after saving.
                UCommerce uses NHibernate level 2 cache, so we need to flush that as well, but we'll get to that.&lt;/p&gt;
                &lt;p&gt;Forcing the database is fairly easy. We have to resort to good old ADO code, which was actually a joyful little deja-vu experience (although I'm glad it was brief):&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class FixProductClassTask : IPipelineTask&amp;lt;Product&amp;gt;
                {
                private readonly IStatelessSessionProvider sessionProvider;

                public FixProductClassTask(IStatelessSessionProvider sessionProvider)
                {
                this.sessionProvider = sessionProvider;
                }

                public PipelineExecutionResult Execute(Product subject)
                {
                var command = sessionProvider.GetStatelessSession().Connection.CreateCommand();
                command.CommandText = &amp;quot;UPDATE uCommerce_Product SET Discriminator = @discriminator WHERE ProductId = @productId&amp;quot;;
                command.CommandType = CommandType.Text;
                var discriminatorParam = command.CreateParameter();
                discriminatorParam.ParameterName = &amp;quot;discriminator&amp;quot;;
                discriminatorParam.Value = subject.ProductDefinition.Name;
                var idParam = command.CreateParameter();
                idParam.ParameterName = &amp;quot;productId&amp;quot;;
                idParam.Value = subject.Id;
                command.Parameters.Add(discriminatorParam);
                command.Parameters.Add(idParam);
                command.ExecuteNonQuery();

                // TODO: Clear cache

                return PipelineExecutionResult.Success;
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;I'm sure a lot of sazzy devs out there could prettify this a bit, but it does the job. Insert a &lt;a href="/archive/kill-switch-weve-got-action/"&gt;switch/case (please don't)&lt;/a&gt; or whatever you fancy if the product definition name isn't what you discriminate by. I'll leave it up to you to choose between strings, ints or even enums for performance vs. readability.&lt;/p&gt;
                &lt;p&gt;If you've turned off the level 2 cache, you might be fine with this. Otherwise we'd better &amp;quot;evict&amp;quot; the entity from the cache. We need to do that in order for the cached instance to change type from &lt;code&gt;Product&lt;/code&gt; to &lt;code&gt;ProductWithFancyPricing&lt;/code&gt;. Sadly the NHibernate &lt;code&gt;SessionFactory&lt;/code&gt; in charge of doing this is hidden in an internal static field in UCommerce, so we need to resort to some nasty reflection to do it:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;// ...
                command.ExecuteNonQuery();

                var fieldInfo = typeof(SessionProvider).GetField(&amp;quot;_factory&amp;quot;, BindingFlags.Static | BindingFlags.NonPublic);
                if (fieldInfo == null) throw new Exception(&amp;quot;SessionFactory instance has moved in this UCommerce version. %(&amp;quot;);
                var sessionFactory = (ISessionFactory)fieldInfo.GetValue(null);
                sessionFactory.Evict(typeof(Product), subject.Id);

                return PipelineExecutionResult.Success;
                // ...
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Et voilá! We can now save new products, and they immediately morph into the correct derived type.
                (Except for when being saved to RavenDB for the first time, ref. the config).&lt;/p&gt;
                &lt;p&gt;I'm now free to go back into the instances and implement however naughty pricing I fancy. \o/&lt;/p&gt;
                &lt;h2&gt;Added bonuses&lt;/h2&gt;
                &lt;p&gt;I already &lt;a href="https://docs.ucommerce.net/ucommerce/v7.12/extending-ucommerce/save-custom-data-in-the-database.html"&gt;have a custom entity in the database and NHibernate model&lt;/a&gt;. It has two associations to &lt;code&gt;Product&lt;/code&gt;. Had I realized what I had under my fingertips it would already have been collections on my new shiny subclasses.&lt;/p&gt;
                &lt;p&gt;I recon you noticed I referenced ModelsBuilder a couple of times. How 'bout having all your properties statically typed on your product instances. How about some interfaces?&lt;/p&gt;
                &lt;p&gt;I'm sure you're getting the drift.&lt;/p&gt;
                &lt;p&gt;I for one am quite embarrased I didn't think of this before. I've had the knowledge and tools for years. But there you go. We learn something every day. And I love doing it with Umbraco, UCommerce, EntityFramework and apparently now also... NHibernate. :)&lt;/p&gt;
            </description>
            <pubDate>Tue, 30 Jan 2018 23:48:27 Z</pubDate>
            <a10:updated>2018-01-30T23:48:27Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1137</guid>
            <link>http://blog.aabech.no/archive/umbraco-unit-testing-workshop-material/</link>
            <category>umbraco</category>
            <category>unit testing</category>
            <title>Umbraco Unit Testing Workshop Material</title>
            <description>
                &lt;p&gt;For this years Umbraco UK Festival I was honored to be invited to run a unit testing workshop. It's a culmination of my talks and workshops until now, and covers everything you need to get going with testing the Umbraco backoffice, controller logic, external calls and finally front-end UI.&lt;/p&gt;
                &lt;p&gt;I know there's demand for this kind of training, and it might be difficult to get to the conferences where it's happening. For those of you, and those who feel bold and confident, I've released the material under the MIT license.&lt;/p&gt;
                &lt;p&gt;I can't promise I'll be able to help out if you go at it, but keep an eye out for a conference near you and encourage the organizers to host a workshop. ;)&lt;/p&gt;
                &lt;p&gt;You can clone the &amp;quot;workshop-start&amp;quot; branch from Bitbucket. The slides and workbook are included at the root of the repo.&lt;/p&gt;
                &lt;p&gt;https://bitbucket.org/bleedo/umbraco-testing-workshop-h2-2017/src/?at=workshop-start&lt;/p&gt;
                &lt;p&gt;You'll need&lt;/p&gt;
                &lt;ul&gt;
                &lt;li&gt;node&lt;/li&gt;
                &lt;li&gt;npm task runner (visual studio extension)&lt;/li&gt;
                &lt;li&gt;razorgenerator (visual studio extension)&lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;Happy testing!&lt;/p&gt;
            </description>
            <pubDate>Thu, 09 Nov 2017 10:09:16 Z</pubDate>
            <a10:updated>2017-11-09T10:09:16Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1136</guid>
            <link>http://blog.aabech.no/archive/automating-umbraco-with-powershell/</link>
            <category>umbraco</category>
            <category>automation</category>
            <title>Automating Umbraco with PowerShell</title>
            <description>
                &lt;h2&gt;Background&lt;/h2&gt;
                &lt;p&gt;This particular example is for warming up a UCommerce site in staging, but the technique can be used for anything you can do in the Umbraco backoffice. Especially with the new REST APIs coming out.&lt;/p&gt;
                &lt;p&gt;In this particular case, I've sinned and not created a good test environment for the last few integration bits of a project. It was hard to tune the production behavior of some code without actually running it in production. However, it's running Umbraco 7.5.13 and UCommerce 7.7. It's probably missing the other performance fix too, but the result is that it takes quite a while to warm up everything. So we warm it up in staging and then swap slots to get it fresh, awake and blazing fast into production. &lt;/p&gt;
                &lt;h2&gt;Resolve&lt;/h2&gt;
                &lt;p&gt;After having done this a few times, I figured I wanted something to do while waiting. What better activity than automating the whole routine so I could do something else instead? (Like automating automation...) Here's a powershell script I ended up with to warm up everything in the backoffice. I'll go through the pieces below.&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;Param(
                [string]$password
                )

                $ws = New-Object Microsoft.PowerShell.Commands.WebRequestSession

                $body = @{
                &amp;quot;username&amp;quot;=&amp;quot;admin@admin.com&amp;quot;
                &amp;quot;password&amp;quot;=$password
                }

                $json = $body | ConvertTo-Json

                Invoke-RestMethod `
                -Method Post `
                -ContentType &amp;quot;application/json&amp;quot; `
                -Uri &amp;quot;https://customer-staging.azurewebsites.net/umbraco/backoffice/UmbracoApi/Authentication/PostLogin&amp;quot; `
                -WebSession $ws `
                -Body $json

                Write-Host &amp;quot;20%&amp;quot;

                Invoke-RestMethod -Method Get -Uri &amp;quot;https://customer-staging.azurewebsites.net/umbraco/ucommerce/catalog/editcategory.aspx?id=718&amp;quot; -WebSession $ws

                Write-Host &amp;quot;40%&amp;quot;

                Invoke-RestMethod -Method Get -Uri &amp;quot;https://customer-staging.azurewebsites.net/umbraco/ucommerce/catalog/editproduct.aspx?id=465&amp;amp;parentcategoryId=718&amp;quot; -WebSession $ws

                Write-Host &amp;quot;60%&amp;quot;
                Invoke-RestMethod -Method Get -Uri &amp;quot;https://customer-staging.azurewebsites.net/umbraco/ucommerce/settings/orders/editpaymentmethod.aspx?id=8&amp;quot; -WebSession $ws

                Write-Host &amp;quot;80%&amp;quot;

                Invoke-RestMethod -Method Get -Uri &amp;quot;https://customer-staging.azurewebsites.net/umbraco/ucommerce/settings/orders/editshippingmethod.aspx?id=10&amp;quot; -WebSession $ws
                Write-Host &amp;quot;100%&amp;quot;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The effect is that we log into Umbraco using a provided password, and instead of navigating and clicking everything, we fire a request triggering all the caching and JIT compilation for us. Even though I'm using the &lt;code&gt;Invoke-RestMethod&lt;/code&gt; cmdlet, I can do regular web calls. The cmdlet has a sibling called &lt;code&gt;Invoke-WebRequest&lt;/code&gt;, but the rest version is better for posting commands. It's mostly a matter of mental context, but they have a few differences.&lt;/p&gt;
                &lt;h2&gt;Log into Umbraco&lt;/h2&gt;
                &lt;p&gt;To set up an authorized session with Umbraco, we can call the PostLogin action. It's the same endpoint that is used from the login screen. An authorized session means that we need to get a cookie and pass it with all our requests. In order for each &lt;code&gt;Invoke-RestMethod&lt;/code&gt; to pass this cookie, we can create a &lt;code&gt;WebRequestSession&lt;/code&gt; we pass to each call:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;$ws = New-Object Microsoft.PowerShell.Commands.WebRequestSession

                Invoke-RestMethod -WebSession $ws -Uri &amp;quot;...&amp;quot;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;If the response brings a cookie, it's kept in the &lt;code&gt;WebRequestSession&lt;/code&gt;, and subsequently passed back with each new request. Just like a browser.&lt;/p&gt;
                &lt;p&gt;Then we need some JSON to pass our username and password. You can declare dictionaries of sorts in PowerShell like so:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;$body = @{
                &amp;quot;username&amp;quot;=&amp;quot;admin@admin.com&amp;quot;
                &amp;quot;password&amp;quot;=$password
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;And then convert it to JSON by piping it to the &lt;code&gt;ConvertTo-Json&lt;/code&gt; cmdlet:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;$json = $body | ConvertTo-Json
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Finally we're ready to fire the request off to Umbraco, adding config for HTTP method, ContentType etc.:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;Invoke-RestMethod `
                -Method Post `
                -ContentType &amp;quot;application/json&amp;quot; `
                -Uri &amp;quot;https://customer-staging.azurewebsites.net/umbraco/backoffice/UmbracoApi/Authentication/PostLogin&amp;quot; `
                -WebSession $ws `
                -Body $json
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h2&gt;Automate Umbraco&lt;/h2&gt;
                &lt;p&gt;For this I just needed to kick off a request to some pages, but posting messages around like rebuilding a grumpy index, running an ad hoc task, even publishing should be just as simple.&lt;/p&gt;
                &lt;p&gt;It takes a while, so I added a little status message. I'm sure PowerShell wizards would pack this stuff into better reusable parts.&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;Write-Host &amp;quot;20%&amp;quot;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Now reuse that &lt;code&gt;WebRequestSession&lt;/code&gt; object to fire off new &lt;em&gt;authenticated&lt;/em&gt; requests:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;Invoke-RestMethod -WebSession $ws -Method Get -Uri &amp;quot;https://customer-staging.azurewebsites.net/umbraco/ucommerce/catalog/editcategory.aspx?id=718&amp;quot;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h2&gt;Do it everywhere&lt;/h2&gt;
                &lt;p&gt;With all the love I can give to UCommerce, I ended up naming the script &lt;code&gt;kick-ucommerce.ps1&lt;/code&gt;. It's like kicking your old belowed car to get it started, after you've polished it. Really!&lt;br /&gt;
                Adding my source folder to the path environment variable makes the script available from any shell. Even the Package Manager console in Visual Studio. &lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1034/warmup-ucommerce.png" alt="Warm up UCommerce" /&gt;&lt;/p&gt;
                &lt;p&gt;Make a note that the password is a parameter. You do change it more often than you'd like to update the code right? How 'bout automating the process? ;)&lt;/p&gt;
                &lt;h2&gt;Smoke test and swap the Azure slot&lt;/h2&gt;
                &lt;p&gt;I'll leave the swap-slot script I run after warming up the site here too. The cool thing about warming up with the script is that it'll fail almost immediately on the Umbraco login if anything isn't like it should. So it doubles as a smoke test.&lt;/p&gt;
                &lt;p&gt;When everything looks good, I can just go:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;swap-slot -from staging -to production -site customer-x
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;And here's the &amp;quot;simpleness&amp;quot; of that one. There are fairly good docs on all the Azure cmdlets over on Microsoft's sites. (Ask Google. ;) )&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;Param(
                [string]$site,
                [string]$from,
                [string]$to
                )

                $subscriptionId = &amp;quot;333112F4-4483-449C-A2DA-727E8D2E428D&amp;quot;
                $resourcegroupname = &amp;quot;Common-Group&amp;quot;     # Might need to be param

                Login-AzureRmAccount -SubscriptionId $subscriptionId

                Swap-AzureRmWebAppSlot `
                -SourceSlotName $from `
                -DestinationSlotName $to `
                -Name $site `
                -ResourceGroupName $resourcegroupname
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;That's it! Now go automate something so you get more time to do fun stuff! :)&lt;/p&gt;
            </description>
            <pubDate>Tue, 07 Nov 2017 19:46:14 Z</pubDate>
            <a10:updated>2017-11-07T19:46:14Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1133</guid>
            <link>http://blog.aabech.no/archive/exploiting-approvaltests-for-clearer-tests/</link>
            <category>unit testing</category>
            <title>Exploiting ApprovalTests for clearer tests</title>
            <description>
                &lt;h2&gt;What's this for?&lt;/h2&gt;
                &lt;p&gt;Ever written several asserts in one test because you have a big graph you want to verify? How 'bout files or maybe &lt;a href="/archive/testing-views-with-razorgenerator"&gt;razor views&lt;/a&gt;? Several asserts often clutter up the tests. Big strings also make the actuall calls hard to see for all that content. Putting big strings in files is a good idea to avoid that, but few people do. It adds another &amp;quot;menial&amp;quot; task when you're in the zone. But what if it was dead easy?&lt;/p&gt;
                &lt;p&gt;I once maintained a Resharper extension, and their example tests had so called &amp;quot;gold&amp;quot; files that they compared to output. The squigglies was represented by special characters around terms. So they just compared the output of a text renderer to the text in a file. Great idea. One limitation though: with a regular Assert.Equals you just see the segment around the first mismatch. Guess what, there's a tool that's been around for at least 10 years that solves all those issues, and more.&lt;/p&gt;
                &lt;h2&gt;Approval tests, eh?&lt;/h2&gt;
                &lt;p&gt;Sounds a bit like acceptance tests, right? Don't be fooled, it's purpose is to serve all the way down to the &amp;quot;unit test layer&amp;quot; of your tests. I've found it to be a huge timesaver, as well as making my tests so much more clear.&lt;/p&gt;
                &lt;p&gt;I know you're thinking &amp;quot;Shut up and give me an example, then!&amp;quot;, so let's have a look. I've got this unit test from my post about &lt;a href="/archive/testing-views-with-razorgenerator"&gt;testing razor views&lt;/a&gt; that I never really asserted anything in. I just output the result to console and assert inconclusive. Here it is for reference:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[TestFixture]
                public class When_Displaying_An_Event
                {
                [Test]
                public void It_Is_Rendered_With_A_Name_Date_And_A_Link()
                {
                var view = new _Views_Partials_Event_cshtml();
                var actionResult = GetConcertEvent();

                Assert.AreEqual(&amp;quot;Event&amp;quot;, actionResult.ViewName);

                var renderedResult = view.Render((Event) actionResult.Model);

                Console.WriteLine(renderedResult);
                Assert.Inconclusive(&amp;quot;Way too big to assert here.&amp;quot;);
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;It outputs the following HTML:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
                &amp;lt;a href=&amp;quot;https://eventsite/123&amp;quot;&amp;gt;
                &amp;lt;label&amp;gt;
                Concert of your life
                &amp;lt;/label&amp;gt;
                &amp;lt;span&amp;gt;
                fredag 31. desember 2049 23.59
                &amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
                &amp;lt;/div&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h2&gt;Let's see it&lt;/h2&gt;
                &lt;p&gt;Now let's assert this with ApprovalTests. To use it, you just &lt;code&gt;install-package ApprovalTests&lt;/code&gt; with your trusty package manager console. Make sure to install it in your test project. ;)&lt;/p&gt;
                &lt;p&gt;Now instead of &lt;code&gt;Assert&lt;/code&gt;, we ask ApprovalTests to &lt;code&gt;Verify&lt;/code&gt; our data instead. It even has a special overload for this concrete case: &lt;code&gt;Approvals.VerifyHtml&lt;/code&gt;. So we rewrite the test as such:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[Test]
                public void It_Is_Rendered_With_A_Name_Date_And_A_Link()
                {
                var view = new _Views_Partials_Event_cshtml();
                var actionResult = GetConcertEvent();

                Assert.AreEqual(&amp;quot;Event&amp;quot;, actionResult.ViewName);

                var renderedResult = view.Render((Event) actionResult.Model);

                Approvals.VerifyHtml(renderedResult);
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Now when we run our test, we get this nice little welcoming message from ApprovalTests:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1033/welcome-to-approvaltests.png" alt="Exception: Welcome to ApprovalTests" /&gt;&lt;/p&gt;
                &lt;p&gt;It tells us we're missing a vital part: A reporter. It's possible to use &lt;code&gt;DiffReporter&lt;/code&gt; to launch your favorite configured difftool. But if you're in Visual Studio, there's a special treat: &lt;code&gt;VisualStudioReporter&lt;/code&gt;. Let's add that to our fixture and see what happens:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[UseReporter(typeof(VisualStudioReporter))]
                [TestFixture]
                public class When_Displaying_An_Event
                {
                [Test]
                public void It_Is_Rendered_With_A_Name_Date_And_A_Link()
                {
                // ...
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;And we run it:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1032/first-result.png" alt="ApprovalTests first result have empty approved" /&gt;&lt;/p&gt;
                &lt;p&gt;What hits you is probably the big failure statement there, but look again - up at the top there.
                We've got a diff opened, the result on the left hand and a big green field on the right side.&lt;br /&gt;
                What just happened is that ApprovalTests took our result, stored it in a received file, and at the same time wrote an empty &amp;quot;approved&amp;quot; file. It then proceeded to compare, and finally pop a diff of those two files.&lt;br /&gt;
                Isn't that just beautiful? Everything that makes your test fail in one clear diagram.&lt;/p&gt;
                &lt;p&gt;The &amp;quot;procedure to follow&amp;quot; here, is to &amp;quot;approve&amp;quot; results when you're happy. To do that, you just copy and paste. Let's do that now:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1030/first-approved.png" alt="First approved with invalid indenting" /&gt;&lt;/p&gt;
                &lt;p&gt;&lt;em&gt;If you've got ReSharper, it's probably gonna try to format everything nicely when you paste. To have it in the original, ugly indentation state, press Ctrl+Z (undo) once after pasting.&lt;/em&gt;&lt;/p&gt;
                &lt;p&gt;&lt;em&gt;Regarding the indentation that's off. It seems to be a bug with HTML in the current version of ApprovalTests, so stupid me for choosing this example. I'll update the post if it gets fixed.&lt;/em&gt;&lt;/p&gt;
                &lt;p&gt;We can now run our test again, and it's gonna pass. When it passes, it doesn't bother to open the diff.&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1031/first-passing.png" alt="It passes with an approved file" /&gt;&lt;/p&gt;
                &lt;p&gt;This means we're just gonna get diffs for whatever is currently failing. Even if we run our entire suite of tests. Now there's a couple of housekeeping things to keep in mind:&lt;/p&gt;
                &lt;h2&gt;Commit approvals only&lt;/h2&gt;
                &lt;p&gt;If you were paying attention, you noticed we got two files adjacent to our test source file. One is named [TestFixtureName].[TestMethodName].received.html and one is named [TestFixtureName].[TestMethodName].approved.html. If you ran a test that passed, you'll actually just have your approved file. &lt;strong&gt;You want those approved files in source control!&lt;/strong&gt;&lt;/p&gt;
                &lt;p&gt;The received files though, might end up not being cleaned up for one or the other reason. Hopefully just that you didn't bother to commit a fully passing build. I'm sure you didn't do that to the master branch, though. In any case, make sure to &lt;em&gt;ignore&lt;/em&gt; your received files. This pattern in .gitignore generally does the trick:&lt;/p&gt;
                &lt;p&gt;&lt;code&gt;*.received.*&lt;/code&gt; &lt;/p&gt;
                &lt;h2&gt;That's just the tip of the iceberg&lt;/h2&gt;
                &lt;p&gt;We've seen the &lt;code&gt;VerifyHtml&lt;/code&gt; bit. One of my personal favorites is it's sibling &lt;code&gt;VerifyJson&lt;/code&gt;. I keep an extension on &lt;code&gt;object&lt;/code&gt; in my tests, called &lt;code&gt;.ToJson()&lt;/code&gt;. With it, I can just go:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;Approvals.VerifyJson(myBigGraph.ToJson());
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The diff is done with prettified JSON, so it's super simple to find the property / area that has changed or doesn't work. Knowing the area of the graph should also make it easier to find the usage that is wrong.&lt;/p&gt;
                &lt;p&gt;There's a vanilla &lt;code&gt;Verify&lt;/code&gt; method too, and it saves plain text files. It's useful in cases where you have nice &lt;code&gt;ToString()&lt;/code&gt; implementations. Let's try with a &amp;quot;person&amp;quot;:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class Person
                {
                public string FirstName { get; set; }
                public string LastName { get; set; }
                public int Age { get; set; }

                public override string ToString()
                {
                return $&amp;quot;{FirstName} {LastName} ({Age})&amp;quot;;
                }
                }

                [Test]
                public void Comparing_Objects()
                {
                var person = new Person
                {
                FirstName = &amp;quot;Lars-Erik&amp;quot;,
                LastName = &amp;quot;Aabech&amp;quot;,
                Age = 19
                };

                Approvals.Verify(person);
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;It produces the following .received file:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;Lars-Erik Aabech (19)
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;It can be approved like that.&lt;br /&gt;
                We can also do lists with &amp;quot;big brother&amp;quot; &lt;code&gt;VerifyAll&lt;/code&gt;:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[Test]
                public void Comparing_Lists()
                {
                var list = new List&amp;lt;Person&amp;gt;
                {
                new Person {FirstName = &amp;quot;Lars-Erik&amp;quot;, LastName = &amp;quot;Aabech&amp;quot;},
                new Person {FirstName = &amp;quot;Dear&amp;quot;, LastName = &amp;quot;Reader&amp;quot;}
                };

                Approvals.VerifyAll(list, &amp;quot;&amp;quot;);
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Which, unsurprisingly outputs:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[0] = Lars-Erik Aabech
                [1] = Dear Reader
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Now how bout that?&lt;br /&gt;
                I don't know how quickly you got hooked, but I certainly find it sneaking into more and more of my tests.&lt;/p&gt;
                &lt;p&gt;It can even do images, but I'll let &lt;a href="http://jamessouth.me/"&gt;James&lt;/a&gt; blog about that one.&lt;/p&gt;
                &lt;p&gt;So what are you lingering around here for? Run over to nuget and get your copy, or lurk around some more at the &lt;a href="http://approvaltests.sourceforge.net/"&gt;ApprovalTests&lt;/a&gt; project site. There's great examples, even though they might not be in your favorite language.&lt;/p&gt;
                &lt;p&gt;Happy approving! :)&lt;/p&gt;
            </description>
            <pubDate>Mon, 23 Oct 2017 20:14:08 Z</pubDate>
            <a10:updated>2017-10-23T20:14:08Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1127</guid>
            <link>http://blog.aabech.no/archive/umbracosupport-got-typed-content/</link>
            <category>unit testing</category>
            <category>umbraco</category>
            <title>UmbracoSupport got typed content</title>
            <description>
                &lt;h2&gt;What's UmbracoSupport?&lt;/h2&gt;
                &lt;p&gt;&lt;code&gt;UmbracoSupport&lt;/code&gt; is a class I've been introducing to my unit tests over the last year or so.
                It allows me to have my own hierarchy for tests, as well as re-using all of Umbraco's own
                stubbing code. I've written about it in a post called &lt;a href="/archive/the-basics-of-unit-testing-umbraco-just-got-simpler"&gt;Unit testing Umbraco just got simpler&lt;/a&gt;,
                and its gut's code is described in details in &lt;a href="/archive/the-basics-of-unit-testing-umbraco"&gt;The basics of unit testing Umbraco&lt;/a&gt;.&lt;/p&gt;
                &lt;h2&gt;A quick primer on what's already available&lt;/h2&gt;
                &lt;p&gt;The &lt;code&gt;BaseDatabaseFactoryTest&lt;/code&gt; in &lt;code&gt;Umbraco.Tests&lt;/code&gt; has a method called &lt;code&gt;GetXmlContent&lt;/code&gt;.
                It replaces the &lt;code&gt;umbraco.config&lt;/code&gt; file that acts as the cache at runtime.
                It makes &lt;code&gt;UmbracoContext.Current.ContentCache&lt;/code&gt; tick in unit tests.
                The base tests out of the box has a small flaw though. They can't &amp;quot;popuplate&amp;quot; properties.
                All you get is the hierarchy.&lt;/p&gt;
                &lt;p&gt;Usually I've injected an &lt;code&gt;IPublishedContentCache&lt;/code&gt; to my controllers. When testing them,
                I've created a mock instance of the &lt;code&gt;IPublishedContentCache&lt;/code&gt;. However, all my code has to use
                the non-context aware overloads. For instance &lt;code&gt;cache.GetById(umbracoContext, false, id)&lt;/code&gt;.
                There's also a whole lot of ugly mocking code going on to set up queries and stubbed content.
                How to stub properties on stubbed content is described in &lt;a href="/archive/slides-from-cg16-and-testing-ipublishedcontent-properties/"&gt;Slides from CG 2016 and testing IPublishedContent properties&lt;/a&gt;.&lt;/p&gt;
                &lt;h2&gt;So what's new?&lt;/h2&gt;
                &lt;p&gt;As mentioned, I've been throwing around all kinds of ugly stubbing code for content and I've also been tampering with &lt;code&gt;Umbraco.Tests&lt;/code&gt;'s &lt;code&gt;GetXmlContent()&lt;/code&gt; to use the &amp;quot;built-in&amp;quot; content stubs.
                It's all been done before in misc. tests in Umbraco. I finally got my s**t together and refactored all my setup spaghetti into a few small helpers on the &lt;code&gt;UmbracoSupport&lt;/code&gt; class.&lt;/p&gt;
                &lt;p&gt;Let's go over them in increasing &amp;quot;integrationness&amp;quot;.&lt;/p&gt;
                &lt;h2&gt;Pure hierarchy&lt;/h2&gt;
                &lt;p&gt;Your basic hierarchy structure can be set up by simply returning a string from an overload of &lt;code&gt;BaseDatabaseFactoryTest.GetXmlContent&lt;/code&gt;. &lt;code&gt;UmbracoSupport&lt;/code&gt; overloads this method and returns whatever you've set on the &lt;code&gt;UmbracoSupport.ContentCacheXml&lt;/code&gt; property. I recommend using the technique described in &lt;a href="/archive/automating-creation-of-source-data-for-tests"&gt;Automating creating of source data for tests&lt;/a&gt; with this. You can even extend that code to have fixture specific content caches.&lt;/p&gt;
                &lt;p&gt;In any case, to make this work, you just need to set the XML in the setup method.&lt;/p&gt;
                &lt;p&gt;&lt;em&gt;Note: I've got some probs with the markdown parsing here, imagine the CDATA parts of the XML is correctly written.&lt;/em&gt;&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[SetUp]
                public void Setup()
                {
                umbracoSupport = new UmbracoSupport();
                umbracoSupport.SetupUmbraco();

                // This XML is what the ContentCache will represent
                umbracoSupport.ContentCacheXml = @&amp;quot;
                &amp;lt;?xml version=&amp;quot;&amp;quot;1.0&amp;quot;&amp;quot; encoding=&amp;quot;&amp;quot;utf-8&amp;quot;&amp;quot;?&amp;gt;
                &amp;lt;!DOCTYPE root [
                &amp;lt;!ELEMENT contentBase ANY&amp;gt;
                &amp;lt;!ELEMENT home ANY&amp;gt;
                &amp;lt;!ATTLIST home id ID #REQUIRED&amp;gt;
                &amp;lt;!ELEMENT page ANY&amp;gt;
                &amp;lt;!ATTLIST page id ID #REQUIRED&amp;gt;
                ]&amp;gt;
                &amp;lt;root id=&amp;quot;&amp;quot;-1=&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;gt;
                &amp;lt;home id=&amp;quot;&amp;quot;1103=&amp;quot;&amp;quot;&amp;quot;&amp;quot; key=&amp;quot;&amp;quot;156f1933-e327-4dce-b665-110d62720d03=&amp;quot;&amp;quot;&amp;quot;&amp;quot; parentID=&amp;quot;&amp;quot;-1=&amp;quot;&amp;quot;&amp;quot;&amp;quot; level=&amp;quot;&amp;quot;1=&amp;quot;&amp;quot;&amp;quot;&amp;quot; creatorID=&amp;quot;&amp;quot;0=&amp;quot;&amp;quot;&amp;quot;&amp;quot; sortOrder=&amp;quot;&amp;quot;0=&amp;quot;&amp;quot;&amp;quot;&amp;quot; createDate=&amp;quot;&amp;quot;2017-10-17T20:25:12=&amp;quot;&amp;quot;&amp;quot;&amp;quot; updateDate=&amp;quot;&amp;quot;2017-10-17T20:25:17=&amp;quot;&amp;quot;&amp;quot;&amp;quot; nodeName=&amp;quot;&amp;quot;Home=&amp;quot;&amp;quot;&amp;quot;&amp;quot; urlName=&amp;quot;&amp;quot;home=&amp;quot;&amp;quot;&amp;quot;&amp;quot; path=&amp;quot;&amp;quot;-1,1103=&amp;quot;&amp;quot;&amp;quot;&amp;quot; isDoc=&amp;quot;&amp;quot;&amp;quot;&amp;quot; nodeType=&amp;quot;&amp;quot;1093=&amp;quot;&amp;quot;&amp;quot;&amp;quot; creatorName=&amp;quot;&amp;quot;Admin=&amp;quot;&amp;quot;&amp;quot;&amp;quot; writerName=&amp;quot;&amp;quot;Admin=&amp;quot;&amp;quot;&amp;quot;&amp;quot; writerID=&amp;quot;&amp;quot;0=&amp;quot;&amp;quot;&amp;quot;&amp;quot; template=&amp;quot;&amp;quot;1064=&amp;quot;&amp;quot;&amp;quot;&amp;quot; nodeTypeAlias=&amp;quot;&amp;quot;home=&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;gt;
                &amp;lt;title&amp;gt;Welcome!&amp;lt;/title&amp;gt;
                &amp;lt;excerptCount&amp;gt;4&amp;lt;/excerptCount&amp;gt;
                &amp;lt;page id=&amp;quot;&amp;quot;1122=&amp;quot;&amp;quot;&amp;quot;&amp;quot; key=&amp;quot;&amp;quot;1cb33e0a-400a-4938-9547-b05a35739b8b=&amp;quot;&amp;quot;&amp;quot;&amp;quot; parentID=&amp;quot;&amp;quot;1103=&amp;quot;&amp;quot;&amp;quot;&amp;quot; level=&amp;quot;&amp;quot;2=&amp;quot;&amp;quot;&amp;quot;&amp;quot; creatorID=&amp;quot;&amp;quot;0=&amp;quot;&amp;quot;&amp;quot;&amp;quot; sortOrder=&amp;quot;&amp;quot;0=&amp;quot;&amp;quot;&amp;quot;&amp;quot; createDate=&amp;quot;&amp;quot;2017-10-17T20:25:12=&amp;quot;&amp;quot;&amp;quot;&amp;quot; updateDate=&amp;quot;&amp;quot;2017-10-17T20:25:17=&amp;quot;&amp;quot;&amp;quot;&amp;quot; nodeName=&amp;quot;&amp;quot;Page=&amp;quot;&amp;quot; 1=&amp;quot;&amp;quot;&amp;quot;&amp;quot; urlName=&amp;quot;&amp;quot;page1=&amp;quot;&amp;quot;&amp;quot;&amp;quot; path=&amp;quot;&amp;quot;-1,1103,1122=&amp;quot;&amp;quot;&amp;quot;&amp;quot; isDoc=&amp;quot;&amp;quot;&amp;quot;&amp;quot; nodeType=&amp;quot;&amp;quot;1095=&amp;quot;&amp;quot;&amp;quot;&amp;quot; creatorName=&amp;quot;&amp;quot;Admin=&amp;quot;&amp;quot;&amp;quot;&amp;quot; writerName=&amp;quot;&amp;quot;Admin=&amp;quot;&amp;quot;&amp;quot;&amp;quot; writerID=&amp;quot;&amp;quot;0=&amp;quot;&amp;quot;&amp;quot;&amp;quot; template=&amp;quot;&amp;quot;1060=&amp;quot;&amp;quot;&amp;quot;&amp;quot; nodeTypeAlias=&amp;quot;&amp;quot;page=&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;gt;
                &amp;lt;title&amp;gt;Welcome!&amp;lt;/title&amp;gt;
                &amp;lt;excerpt&amp;gt;[CDATA[Lorem ipsum dolor...]]&amp;lt;/excerpt&amp;gt;
                &amp;lt;body&amp;gt;
                [CDATA[&amp;lt;p&amp;gt;Lorem ipsum dolor...&amp;lt;/p&amp;gt;]]
                &amp;lt;/body&amp;gt;
                &amp;lt;image&amp;gt;123&amp;lt;/image&amp;gt;
                &amp;lt;/page&amp;gt;
                &amp;lt;page id=&amp;quot;&amp;quot;1123=&amp;quot;&amp;quot;&amp;quot;&amp;quot; key=&amp;quot;&amp;quot;242928f6-a1cf-4cd3-ac34-f3ddf3526b2e=&amp;quot;&amp;quot;&amp;quot;&amp;quot; parentID=&amp;quot;&amp;quot;1103=&amp;quot;&amp;quot;&amp;quot;&amp;quot; level=&amp;quot;&amp;quot;2=&amp;quot;&amp;quot;&amp;quot;&amp;quot; creatorID=&amp;quot;&amp;quot;0=&amp;quot;&amp;quot;&amp;quot;&amp;quot; sortOrder=&amp;quot;&amp;quot;1=&amp;quot;&amp;quot;&amp;quot;&amp;quot; createDate=&amp;quot;&amp;quot;2017-10-17T20:25:12=&amp;quot;&amp;quot;&amp;quot;&amp;quot; updateDate=&amp;quot;&amp;quot;2017-10-17T20:25:17=&amp;quot;&amp;quot;&amp;quot;&amp;quot; nodeName=&amp;quot;&amp;quot;Page=&amp;quot;&amp;quot; 2=&amp;quot;&amp;quot;&amp;quot;&amp;quot; urlName=&amp;quot;&amp;quot;page2=&amp;quot;&amp;quot;&amp;quot;&amp;quot; path=&amp;quot;&amp;quot;-1,1103,1123=&amp;quot;&amp;quot;&amp;quot;&amp;quot; isDoc=&amp;quot;&amp;quot;&amp;quot;&amp;quot; nodeType=&amp;quot;&amp;quot;1095=&amp;quot;&amp;quot;&amp;quot;&amp;quot; creatorName=&amp;quot;&amp;quot;Admin=&amp;quot;&amp;quot;&amp;quot;&amp;quot; writerName=&amp;quot;&amp;quot;Admin=&amp;quot;&amp;quot;&amp;quot;&amp;quot; writerID=&amp;quot;&amp;quot;0=&amp;quot;&amp;quot;&amp;quot;&amp;quot; template=&amp;quot;&amp;quot;1060=&amp;quot;&amp;quot;&amp;quot;&amp;quot; nodeTypeAlias=&amp;quot;&amp;quot;page=&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;gt;
                &amp;lt;title&amp;gt;More welcome!&amp;lt;/title&amp;gt;
                &amp;lt;excerpt&amp;gt;[CDATA[More lorem ipsum dolor...]]&amp;lt;/excerpt&amp;gt;
                &amp;lt;body&amp;gt;[CDATA[Even more lorem ipsum dolor...]]&amp;lt;/body&amp;gt;
                &amp;lt;image&amp;gt;234&amp;lt;/image&amp;gt;
                &amp;lt;/page&amp;gt;
                &amp;lt;/home&amp;gt;
                &amp;lt;/root&amp;gt;
                &amp;quot;.Trim();
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;In our tests, we can now query by anything. The returned content has the hierarchy and everything, so we can traverse it with &lt;code&gt;Children()&lt;/code&gt;, &lt;code&gt;Parent()&lt;/code&gt; and whatnot.
                The only missing piece is the properties. Here's a test showing that we have everything but the title property of Page 1:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;const int Page1Id = 1122;

                [Test]
                public void Returns_Empty_Documents()
                {
                var contentCache = umbracoSupport.UmbracoContext.ContentCache;
                var page1 = contentCache.GetById(Page1Id);

                Assert.That(page1, Is
                .Not.Null
                .And
                .InstanceOf&amp;lt;PublishedContentWithKeyBase&amp;gt;()
                .And
                .Property(&amp;quot;Name&amp;quot;).EqualTo(&amp;quot;Page 1&amp;quot;)
                .And
                .Matches&amp;lt;IPublishedContent&amp;gt;(c =&amp;gt; c[&amp;quot;title&amp;quot;] == null)
                .And
                .Property(&amp;quot;Parent&amp;quot;)
                .Property(&amp;quot;Children&amp;quot;)
                .With.Count.EqualTo(2)
                );
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Don't be discouraged though. This method is excellent for testing URL providers, ContentFinders, Menus, Sitemaps. You name it. I know I've written my fair share of hierarchy traversing code or fancy XPath queries. Unless of course, you need property values.&lt;/p&gt;
                &lt;p&gt;Instead of pulling your leg about it, here's how we fix that.&lt;/p&gt;
                &lt;h2&gt;Put some meat on the content&lt;/h2&gt;
                &lt;p&gt;The reason the properties are not there isn't because they weren't read. It's because the &lt;code&gt;XmlPublishedContent&lt;/code&gt; that we get out ultimately relies on the &lt;code&gt;PublishedContentType&lt;/code&gt; for it's respective document type. Luckily, all Umbraco's services are already stubbed up for us, so we can give it what it needs.&lt;/p&gt;
                &lt;p&gt;The gory guts of it is that it needs an &lt;code&gt;IContentType&lt;/code&gt; from the &lt;code&gt;ContentTypeService&lt;/code&gt;. We can easily stub one up with Moq: &lt;code&gt;var contentType = Mock.Of&amp;lt;IContentType&amp;gt;()&lt;/code&gt;. Further, it uses the &lt;code&gt;IContentType.CompositionPropertyTypes&lt;/code&gt; collection to iterate the properties. These &lt;code&gt;PropertyType&lt;/code&gt; instances are actually completely dependency-less, so we can just create some:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;Mock.Get(contentType)
                .Setup(t =&amp;gt; t.CompositionPropertyTypes)
                .Returns(new[] {
                new PropertyType(&amp;quot;Umbraco.TinyMCEv3&amp;quot;, DataTypeDatabaseType.Nvarchar, &amp;quot;body&amp;quot;)
                });
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Finally, we set it up on the &lt;code&gt;ContentTypeService&lt;/code&gt; stub:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;Mock.Get(umbracoSupport.ServiceContext.ContentTypeService)
                .Setup(s =&amp;gt; s.GetContentType(alias))
                .Returns(contentType);
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;If only it were so easy. We depend on the &lt;code&gt;BaseWebTest&lt;/code&gt; class from &lt;code&gt;Umbraco.Tests&lt;/code&gt;. It sets up a content type factory that's being used somewhere in the hierarchy. It feeds &lt;code&gt;AutoPublishedContent&lt;/code&gt; instances instead of what we've stubbed up. We need to turn that off. There's a trick here. &lt;code&gt;UmbracoSupport&lt;/code&gt; should now live in an assembly called &lt;code&gt;Umbraco.UnitTests.Adapter&lt;/code&gt;. If you're pre 7.6.4 you need to go with &lt;code&gt;Umbraco.VisualStudio&lt;/code&gt;. This is because the factory we need to reset is internal to Umbraco. By having &lt;code&gt;UmbracoSupport&lt;/code&gt; in an assembly with one of these two names, we're able to do it. (Otherwise, you use reflection.) &lt;em&gt;By no means do this with production code. Just... forget it!&lt;/em&gt;&lt;br /&gt;
                This paragraph should also get it's own blog post. :)&lt;/p&gt;
                &lt;p&gt;But I digress. Here's the line you need to have the content use the &lt;code&gt;ContentTypeService&lt;/code&gt; to fetch its type:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;PublishedContentType.GetPublishedContentTypeCallback = null;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;It's tempting to leave setup code like this lying around in all our &lt;code&gt;SetUp&lt;/code&gt; methods or even in our &amp;quot;Arrange&amp;quot; sections. I've sinned too much, so those few lines are now part of &lt;code&gt;UmbracoSupport&lt;/code&gt; and can be used to set up multiple types for your fixture or test.&lt;/p&gt;
                &lt;p&gt;Here's a test that fetches the same document as before, but can now read properties:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[Test]
                public void With_DocumentTypes_Setup_Returns_Full_Blown_Documents()
                {
                umbracoSupport.SetupContentType(&amp;quot;page&amp;quot;, new[]
                {
                new PropertyType(&amp;quot;textstring&amp;quot;, DataTypeDatabaseType.Nvarchar, &amp;quot;title&amp;quot;),
                new PropertyType(&amp;quot;textarea&amp;quot;, DataTypeDatabaseType.Nvarchar, &amp;quot;excerpt&amp;quot;),
                new PropertyType(&amp;quot;Umbraco.TinyMCEv3&amp;quot;, DataTypeDatabaseType.Nvarchar, &amp;quot;body&amp;quot;),
                new PropertyType(&amp;quot;media&amp;quot;, DataTypeDatabaseType.Integer, &amp;quot;image&amp;quot;)
                });

                var page1 = contentCache.GetById(Page1Id);

                Assert.Multiple(() =&amp;gt;
                {
                Assert.That(page1[&amp;quot;title&amp;quot;], Is.EqualTo(&amp;quot;Welcome!&amp;quot;));
                Assert.That(page1[&amp;quot;excerpt&amp;quot;], Is.EqualTo(&amp;quot;Lorem ipsum dolor...&amp;quot;));
                Assert.That(page1[&amp;quot;body&amp;quot;].ToString(), Is.EqualTo(&amp;quot;&amp;lt;p&amp;gt;Lorem ipsum dolor...&amp;lt;/p&amp;gt;&amp;quot;));
                Assert.That(page1[&amp;quot;image&amp;quot;], Is.EqualTo(123));
                });
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Notice the .ToString() on the body. It's actually not a string, but some weird dynamic Umbraco thingy. I never saw that type before, but I didn't pursue it in time for this post. I don't want anything to do with it though, so let's storm on to the grand finale.&lt;/p&gt;
                &lt;h2&gt;Let's make them strong already!&lt;/h2&gt;
                &lt;p&gt;We're finally there. The last piece of the puzzle. Strongly typed content!&lt;/p&gt;
                &lt;p&gt;It's managed by two resolvers: &lt;code&gt;PublishedContentModelFactoryResolver&lt;/code&gt; and &lt;code&gt;PropertyValueConvertersResolver&lt;/code&gt;. I won't go into details about those now, but suffice to say all resolvers have to be initialized before &lt;code&gt;BaseWebTest.Initialize&lt;/code&gt; and its ancestors.
                I've added an &lt;code&gt;InitializeResolvers&lt;/code&gt; method to the &lt;code&gt;UmbracoSupport&lt;/code&gt; class where these two are initialized. The &lt;code&gt;PublishedContentModelFactoryResolver&lt;/code&gt; is set to a &lt;code&gt;FakeModelFactoryResolver&lt;/code&gt; that lets you register constructors for document type aliases. &lt;a href="https://github.com/lars-erik/umbraco-unit-testing-samples/blob/master/Umbraco.UnitTesting.Adapter/Support/FakeTypedModelFactory.cs"&gt;The code for this is available in my &amp;quot;Umbraco unit testing samples&amp;quot; repo on github&lt;/a&gt;. &lt;/p&gt;
                &lt;p&gt;To set up property value converters, we also need to do that before registering the resolver. The resolver takes all the converters as constructor arguments. I've added a list of those types as a property on &lt;code&gt;UmbracoSupport&lt;/code&gt;, so we can add &lt;code&gt;IPropertyValueConverter&lt;/code&gt; implementing types before calling &lt;code&gt;UmbracoSupport.SetupUmbraco&lt;/code&gt;:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[SetUp]
                public void Setup()
                {
                umbracoSupport = new UmbracoSupport();

                // Converter types need to be added before setup
                umbracoSupport.ConverterTypes.Add(typeof(TinyMceValueConverter));

                umbracoSupport.SetupUmbraco();

                //...
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;To register the typed model, there's just one line you can do in your setup, or even in your tests. Here I've refactored out the setup for the content type from earlier, and I register a model type for the document type alias:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;private void SetupContentType()
                {
                umbracoSupport.SetupContentType(&amp;quot;page&amp;quot;, new[]
                {
                new PropertyType(&amp;quot;textstring&amp;quot;, DataTypeDatabaseType.Nvarchar, &amp;quot;title&amp;quot;),
                new PropertyType(&amp;quot;textarea&amp;quot;, DataTypeDatabaseType.Nvarchar, &amp;quot;excerpt&amp;quot;),
                new PropertyType(&amp;quot;Umbraco.TinyMCEv3&amp;quot;, DataTypeDatabaseType.Nvarchar, &amp;quot;body&amp;quot;),
                new PropertyType(&amp;quot;media&amp;quot;, DataTypeDatabaseType.Integer, &amp;quot;image&amp;quot;)
                });
                }

                [Test]
                public void With_DocumentTypes_And_Models_Setup_Returns_Fully_Functional_Typed_Content()
                {
                SetupContentType();

                // Register strongly typed models with the ModelFactory
                umbracoSupport.ModelFactory.Register(&amp;quot;page&amp;quot;, c =&amp;gt; new Page(c));

                var page1 = contentCache.GetById(Page1Id);

                Assert.That(page1, Is
                .InstanceOf&amp;lt;Page&amp;gt;()
                .And.Property(&amp;quot;Body&amp;quot;)
                .Matches&amp;lt;IHtmlString&amp;gt;(s =&amp;gt;
                s.ToString() == &amp;quot;&amp;lt;p&amp;gt;Lorem ipsum dolor...&amp;lt;/p&amp;gt;&amp;quot;
                )
                );
                }

                public class Page : PublishedContentModel
                {
                public Page(IPublishedContent content) : base((IPublishedContentWithKey)content)
                {
                }

                public string Title =&amp;gt; Content.GetPropertyValue&amp;lt;string&amp;gt;(&amp;quot;title&amp;quot;);
                public string Excerpt =&amp;gt; Content.GetPropertyValue&amp;lt;string&amp;gt;(&amp;quot;excerpt&amp;quot;);
                public IHtmlString Body =&amp;gt; Content.GetPropertyValue&amp;lt;IHtmlString&amp;gt;(&amp;quot;body&amp;quot;);
                public int Image =&amp;gt; Content.GetPropertyValue&amp;lt;int&amp;gt;(&amp;quot;image&amp;quot;);
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;There you go! There's nothing more to it. Well, there is...&lt;/p&gt;
                &lt;p&gt;The &lt;code&gt;Page&lt;/code&gt; class here is bundled with the test. If we use a common interface both for our runtime model and our test model, we're safe. But we should really use the runtime models. This means you shouldn't use &lt;em&gt;runtime generated&lt;/em&gt; models. &lt;a href="https://github.com/zpqrtbnk/Zbu.ModelsBuilder/wiki/Install-And-Configure"&gt;Go through the instructions for ModelsBuilder&lt;/a&gt; to have your models compiled and accessible from the tests.&lt;/p&gt;
                &lt;h2&gt;Conclusion&lt;/h2&gt;
                &lt;p&gt;And although the XML is pretty ugly, you can flush it out into files bundled with your tests. You can also exploit the umbraco.config file and just copy segments from there into your test source files. That way, you spend no time writing the stubs, and the content is cleanly separated from your tests.&lt;/p&gt;
                &lt;p&gt;That's &lt;em&gt;really&lt;/em&gt; all there is to it! It is. Now go test a bit, or a byte, or a string, or even a &lt;a href="/archive/testing-views-with-razorgenerator/"&gt;view&lt;/a&gt;.&lt;/p&gt;
                &lt;p&gt;&lt;a href="https://github.com/lars-erik/umbraco-unit-testing-samples/tree/master/Umbraco.UnitTesting.Adapter/Support"&gt;The new version of UmbracoSupport including the fake model factory is available here.&lt;/a&gt;&lt;/p&gt;
            </description>
            <pubDate>Tue, 17 Oct 2017 21:18:06 Z</pubDate>
            <a10:updated>2017-10-17T21:18:06Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1126</guid>
            <link>http://blog.aabech.no/archive/testing-views-with-razorgenerator/</link>
            <category>unit testing</category>
            <title>Testing views with RazorGenerator</title>
            <description>
                &lt;h2&gt;Razor what?&lt;/h2&gt;
                &lt;p&gt;RazorGenerator is a hidden gem that lets you generate and pre-compile what would otherwise be generated and compiled at runtime. Your Razor. Not only does it give you a startup time boost, but it lets you unit test your views. The latter is the focus of this post.&lt;/p&gt;
                &lt;p&gt;We'll continue to build on the project I described in &lt;a href="/archive/generating-documentation-from-nunit-tests/"&gt;my post on generating documentation with NUnit&lt;/a&gt;. It's a simple use case where an imaginary CMS has a feature to display events from a third party site. Here are the tests I've got so far:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1024/nunitoutput.png" alt="NUnit output" /&gt;&lt;/p&gt;
                &lt;p&gt;In my previous post, I left the rendering test inconclusive. I like keeping inconclusive tests around as reminders of stuff I've got left to do. Let's have a quick look at the passing code before we dive into the rendering bits.&lt;/p&gt;
                &lt;h2&gt;Basic HTTP integration and conversion tests&lt;/h2&gt;
                &lt;p&gt;The first large piece of what's in there for now is a way to remove the physical dependency on the third party site. I like to stub away IO as far out as I can so I can test as much of my code quickly, yet as integrated as possible. In other words, as many participating classes as possible. Since we're making an example here, I'm just using the &lt;code&gt;HttpClient&lt;/code&gt; directly from the controller. The &lt;code&gt;HttpClient&lt;/code&gt; is hard to mock or fake, but it has an inner dependency that we can pass as an argument to a constructor: &lt;code&gt;HttpMessageHandler&lt;/code&gt;. It has the innermost function that the &lt;code&gt;HttpClient&lt;/code&gt; uses for any operation. It also has the rare trait of being &lt;code&gt;protected virtual&lt;/code&gt;, so we can stub it out. For this example, I'm just using a fake one that records requests and returns responses for registered URLs. Here it is:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class FakeMessageHandler : HttpMessageHandler
                {
                private readonly Dictionary&amp;lt;string, string&amp;gt; responses = new Dictionary&amp;lt;string,string&amp;gt;();
                public List&amp;lt;string&amp;gt; Calls { get; } = new List&amp;lt;string&amp;gt;();

                public void Register(string url, string response)
                {
                responses.Add(url, response);
                }

                protected override Task&amp;lt;HttpResponseMessage&amp;gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
                {
                var url = request.RequestUri.ToString();

                Calls.Add(url);

                if (!responses.ContainsKey(url))
                {
                return Task.FromResult(new HttpResponseMessage
                {
                StatusCode = HttpStatusCode.NotFound,
                Content = new StringContent(&amp;quot;{}&amp;quot;)
                });
                }

                return Task.FromResult(new HttpResponseMessage
                {
                Content = new StringContent(responses[url])
                });
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;We'll not dwell further on this one in this post, but you'll need it to run the following examples if you want to tag along.&lt;/p&gt;
                &lt;p&gt;The tests that verifies that we call the right URL on the third party site is pretty simple. It checks the Calls collection on the FakeMessageHandler. Here's the test and the setup code needed:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[TestFixture]
                public class When_Displaying_An_Event
                {
                [Test]
                [DocumentationOrder(0)]
                [Description(@&amp;quot;
                Events are provided at eventsite with a REST api at the URL:
                https://eventsite/api/{id}
                &amp;quot;)]
                public void It_Is_Fetched_By_Id_From_The_Event_Server()
                {
                eventController.Event(234).Wait();

                Assert.AreEqual(
                &amp;quot;https://eventsite/api/234&amp;quot;,
                httpMessageHandler.Calls.Single()
                );
                }

                // ... omitted other tests

                [SetUp]
                public void Setup()
                {
                httpMessageHandler = new FakeMessageHandler();
                httpClient = new HttpClient(httpMessageHandler);
                eventController = new EventController(httpClient);
                }

                private FakeMessageHandler httpMessageHandler;
                private HttpClient httpClient;
                private EventController eventController;
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;And the controller:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class EventController : Controller
                {
                private readonly HttpClient httpClient;

                public EventController(HttpClient httpClient)
                {
                this.httpClient = httpClient;
                }

                public async Task&amp;lt;PartialViewResult&amp;gt; Event(int id)
                {
                var requestUri = &amp;quot;https://eventsite/api/&amp;quot; + id;
                var result = await httpClient.GetAsync(requestUri);
                var response = await result.Content.ReadAsStringAsync();
                // ... omitted further processing for now
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;We pass the &lt;code&gt;FakeMessageHandler&lt;/code&gt; instance to a new &lt;code&gt;HttpClient&lt;/code&gt; effectively making it a stub. We can control the response for individual URLs, and verify that the right ones were called.&lt;/p&gt;
                &lt;p&gt;Next step is to convert it to a valid model we can use in our view. We've got a second test asserting that:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[Test]
                [DocumentationOrder(1)]
                [Description(&amp;quot;The JSON response from the event server is deserialized as the Event type.&amp;quot;)]
                public void It_Is_Converted_To_An_Event_Model()
                {
                var result = GetConcertEvent();
                var model = (Event)result.Model;

                Assert.AreEqual(&amp;quot;Concert of your life&amp;quot;, model.Name);
                Assert.AreEqual(new DateTime(2049,12,31,23,59,59), model.Time);
                Assert.AreEqual(&amp;quot;https://eventsite/123&amp;quot;, model.Url);
                }

                private PartialViewResult GetConcertEvent()
                {
                httpMessageHandler.Register(
                &amp;quot;https://eventsite/api/123&amp;quot;,
                &amp;quot;{\&amp;quot;name\&amp;quot;:\&amp;quot;Concert of your life\&amp;quot;, \&amp;quot;time\&amp;quot;:2524607999}&amp;quot;
                );

                var result = eventController.Event(123).Result;
                return result;
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;And here's the rest of the controller code creating that model:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public async Task&amp;lt;PartialViewResult&amp;gt; Event(int id)
                {
                var requestUri = &amp;quot;https://eventsite/api/&amp;quot; + id;
                var result = await httpClient.GetAsync(requestUri);
                var response = await result.Content.ReadAsStringAsync();
                var eventJObj = JsonConvert.DeserializeObject&amp;lt;JObject&amp;gt;(response);
                var evt = new Event
                {
                Name = eventJObj.Value&amp;lt;string&amp;gt;(&amp;quot;name&amp;quot;),
                Time = DateTimeOffset.FromUnixTimeSeconds(eventJObj.Value&amp;lt;long&amp;gt;(&amp;quot;time&amp;quot;)).DateTime,
                Url = &amp;quot;https://eventsite/&amp;quot; + id
                };
                return PartialView(&amp;quot;Event&amp;quot;, evt);
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The test is a tedious verification of every property on the event object. There are several ways to get around that. Amongst others, equality members. I've got a way better trick, but that's for an upcoming post.&lt;/p&gt;
                &lt;p&gt;Now that we're through those tests, let's dive into how we can test the actual HTML output of this whole shenanigan.&lt;/p&gt;
                &lt;h2&gt;Generating some Razor&lt;/h2&gt;
                &lt;p&gt;As mentioned initially, RazorGenerator is a hidden gem in the ASP.NET OSS wilderness. There's a Visual Studio plugin that you need to exploit it fully. It's aptly called RazorGenerator and &lt;a href="https://marketplace.visualstudio.com/items?itemName=DavidEbbo.RazorGenerator"&gt;can be installed from here&lt;/a&gt;. There's also a couple of Nuget packages that we want:&lt;/p&gt;
                &lt;ul&gt;
                &lt;li&gt;&lt;a href="https://www.nuget.org/packages/RazorGenerator.Mvc/"&gt;RazorGenerator.Mvc&lt;/a&gt;&lt;br /&gt;
                Referenced in your website to make use of a special &lt;code&gt;ViewEngine&lt;/code&gt; for pre-compiled views.&lt;/li&gt;
                &lt;li&gt;&lt;a href="https://www.nuget.org/packages/RazorGenerator.Testing/"&gt;RazorGenerator.Testing&lt;/a&gt;&lt;br /&gt;
                Referenced in our test projects to be able to automagically render views in tests.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;Armed with these tools, there's nothing left to do but add a custom tool to our view:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1029/razorgenerator_tool.png" alt="RazorGenerator as Custom Tool for a view" /&gt;&lt;/p&gt;
                &lt;p&gt;As soon as you've blured the &amp;quot;Custom Tool&amp;quot; field, a .cs file will be generated beneath the view. Upon inspection it yields a class in the ASP namespace making a whole lot of Write* statements. This is what clutters up your ASP.NET Temporary files all the time. And the nice part: it can be instantiated. &lt;/p&gt;
                &lt;p&gt;Here's the initial markup from Event.cshtml:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;@model Example.WebSite.Models.Event

                &amp;lt;div&amp;gt;
                &amp;lt;a href=&amp;quot;@Model.Url&amp;quot;&amp;gt;
                &amp;lt;label&amp;gt;
                @Model.Name
                &amp;lt;/label&amp;gt;
                &amp;lt;span&amp;gt;
                @Model.Time.ToString(&amp;quot;f&amp;quot;)
                &amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
                &amp;lt;/div&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Over in our unit test, we can now start adding some actual rendering of HTML:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[Test]
                [DocumentationOrder(2)]
                public void It_Is_Rendered_With_A_Name_Date_And_A_Link()
                {
                var view = new _Views_Partials_Event_cshtml();
                var result = GetConcertEvent();

                Assert.AreEqual(&amp;quot;Event&amp;quot;, result.ViewName);

                var renderedResult = view.Render((Event) result.Model);

                Console.WriteLine(renderedResult);
                Assert.Inconclusive(&amp;quot;Rendering has not been implemented yet.&amp;quot;);
                }

                private PartialViewResult GetConcertEvent()
                {
                httpMessageHandler.Register(
                &amp;quot;https://eventsite/api/123&amp;quot;,
                &amp;quot;{\&amp;quot;name\&amp;quot;:\&amp;quot;Concert of your life\&amp;quot;, \&amp;quot;time\&amp;quot;:2524607999}&amp;quot;
                );

                var result = eventController.Event(123).Result;
                return result;
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;I know, the view type name ain't too pretty. But it's necessary for the view engine to find the right one based on the path given. The cool part is the &lt;code&gt;Render&lt;/code&gt; statement. It's an extension method from the RazorGenerator.Tests package. It returns the final HTML as a string.&lt;/p&gt;
                &lt;p&gt;The &lt;code&gt;Console.WriteLine&lt;/code&gt; statement yields the following in our test output now:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
                &amp;lt;a href=&amp;quot;https://eventsite/123&amp;quot;&amp;gt;
                &amp;lt;label&amp;gt;
                Concert of your life
                &amp;lt;/label&amp;gt;
                &amp;lt;span&amp;gt;
                fredag 31. desember 2049 23.59
                &amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
                &amp;lt;/div&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;&lt;em&gt;(Yes, I force my locale upon thee!)&lt;/em&gt;&lt;/p&gt;
                &lt;p&gt;What we've just done is to test our system almost end to end, cut off at the uttermost borders to external IO. Specifically, the third party site and the end-user's browser. &lt;/p&gt;
                &lt;p&gt;Granted, we could do Selenium tests here to really test it via the browser, but my rule of thumb is that RazorGenerator is the best choice unless you've got a lot of JavaScript interactivity you need to test in integration. These are subjects for another post.&lt;/p&gt;
                &lt;p&gt;There is a remaining issue though. We should assert the HTML we got rendered. We could store that HTML we got in a &lt;code&gt;const string expected&lt;/code&gt; in our test, but it's gonna foul up the code quite a bit. We could go with so-called &amp;quot;gold files&amp;quot; and implement something to compare a file to the actual output. There's a magical tool for that called ApprovalTests, which I'll cover in my next post. &lt;/p&gt;
                &lt;p&gt;There's also the option of using HtmlAgilityPack to query the rendered view. The RazorGenerator.Tests package have built-in alternative for &lt;code&gt;Render&lt;/code&gt; called &lt;code&gt;RenderAsHtml&lt;/code&gt; that returns &lt;code&gt;HtmlDocument&lt;/code&gt; instances for you to query. It's quite useful when your only &lt;code&gt;Assert.That&lt;/code&gt; is for some specific element in a big page.&lt;/p&gt;
                &lt;h2&gt;Resources and a small limitation&lt;/h2&gt;
                &lt;p&gt;You've seen how you can use RazorGenerator to test your views. &lt;a href="http://blog.davidebbo.com/tag/#RazorGenerator"&gt;There are several posts by David Ebbo (one of the authors of RazorGenerator) on how to use RazorGenerator. Please check them out for more details than I was able to give here.&lt;/a&gt;&lt;/p&gt;
                &lt;p&gt;For now it doesn't do nested &lt;code&gt;Html.Action&lt;/code&gt; or &lt;code&gt;Html.Partial&lt;/code&gt; calls. I've got a PR in the works, but I need to polish it for it to get in there. Some day soon. ;) If you really want to, you'll find my fork and build your own, but you'll be on your own.&lt;/p&gt;
                &lt;p&gt;There's also a tiny performance hit. You'll have to wait a second longer for your tests to execute, since a lot of the ASP.NET MVC framework is spun up to render views. It's still less than the magical 2 second focus cap though, so you should be able to work effectively with it.&lt;/p&gt;
                &lt;p&gt;I hope this piqued your interest in writing broader tests even up to the UI layers. There's even cooler tricks in store for you if you're already on .net Core, but the rest of us will have to make due until then.&lt;/p&gt;
            </description>
            <pubDate>Mon, 09 Oct 2017 21:08:20 Z</pubDate>
            <a10:updated>2017-10-09T21:08:20Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1118</guid>
            <link>http://blog.aabech.no/archive/generating-documentation-from-nunit-tests/</link>
            <category>unit testing</category>
            <title>Generating documentation from NUnit tests</title>
            <description>
                &lt;h2&gt;What's the catch?&lt;/h2&gt;
                &lt;p&gt;There's a lot of benefits with unit testing. One of the less exploited ones would be documentation.
                I've heard it said, and I've said it myself countless times: Unit Tests can be used as documentation.
                They are inherently documentation by being a good place to look for sample code.
                But what if they could also serve as actual go-to documentation, a backlog, a technical specification and all those things that otherwise go rot in a Word document on some server?&lt;/p&gt;
                &lt;p&gt;Lately, I've been experimenting with generating good documentation from NUnit tests for our ASP.NET MVC sites. (Based on Umbraco CMS, but that's not important to this article.)&lt;br /&gt;
                I've been baffled by the lack of good information when I've googled for NUnit result transformations. So I gave it a go, and I'll share some techniques with you in this post.&lt;/p&gt;
                &lt;p&gt;Many unit tests won't do for documentation though. I believe that testing should be done as integrated as possible, stopping just before they become slow. This allows for more user-centric, or holistic descriptions of the system. I'm doing my best to get better at naming them. They should read like stories describing the system. That way it'll be easy for other devs to find the right code to extend or debug. Namespacing and organization play a strong role, as well as good, descriptive names. It's hard, but I believe striving for this might actually also aid in the ability to use them as documentation. &lt;/p&gt;
                &lt;h2&gt;An example&lt;/h2&gt;
                &lt;p&gt;So for this example, let's have a look at a pretty simple case. We're integrating with a third-party event site to display relevant events on pages in our site. We have some kind of module that lets editors pick events and place them in pages. The part I'll use in this post is the part about fetching and displaying it.
                &lt;/p&gt;
                &lt;p&gt;The tests I'm writing are feature specific, but technical enough in nature to belong in the realm of technical documentation. For business targeted documentation, you're better off looking into &lt;a href="https://cucumber.io/"&gt;BDD and all the practices that follows&lt;/a&gt;. If you don't have the team though, you might be able to get something working for you with the following techniques.&lt;/p&gt;
                &lt;p&gt;Here's the test output I've got so far:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1024/nunitoutput.png" alt="NUnit output" /&gt;&lt;/p&gt;
                &lt;p&gt;I think it reads fairly well. There shouldn't be too much doubt what this feature does. Granted, it's a really simple one, and complex systems will have thousands. Even more reason to group by feature, and add areas and other useful grouping levels as namespaces.&lt;/p&gt;
                &lt;p&gt;&lt;em&gt;You'll also notice I've got a test that is inconclusive saying not implemented. I've started doing this to keep a kind of backlog of things to do. It's easy to forget about technical debt or rarer cases we've ignored. Having inconclusive tests glaring at you makes it easy to remember. It may also serve as a discussion point to bring up with the customer. &amp;quot;Should we bother to handle this weird case? It'll increase the budget with $...&amp;quot;.&lt;/em&gt;&lt;/p&gt;
                &lt;p&gt;There are still a couple of readability issues in the tests. When we add more features, it'd be nice to find all event-related tests in their own group. That's a quick fix. We'll add a namespace. (Put common tests in the same folder)&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1025/nunitoutput_with_namespace.png" alt="NUnit output with namespace" /&gt;&lt;/p&gt;
                &lt;p&gt;There's also a matter of order. Obviously fetching from server happens before converting to a model and then rendering it. There are concepts like ordered tests, but I believe atomic tests are faster and more flexible. I've got a solution for that, but let's live with it for now.&lt;/p&gt;
                &lt;p&gt;Having this output from the testrunner or on the build server, even in your inbox when someone commits, is useful. We have a broad overview of what the system does. The tests names are decoupled from any implementation details so we're free to change the architecture while keeping our descriptive tests.&lt;/p&gt;
                &lt;p&gt;But we could do more.&lt;/p&gt;
                &lt;h2&gt;NUnit console runner output&lt;/h2&gt;
                &lt;p&gt;When working on code, we use built-in test runners in our IDEs. We're able to run one or a few test in isolation and focus on just the right things. Build servers use command line runners and ususally produce some form of textual or HTML output. We can exploit the CLI tools as well. The NUnit console runner outputs an XML format by default. You can even do it from the package manager console in Visual Studio like so:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;PM&amp;gt; .\packages\NUnit.ConsoleRunner.3.7.0\tools\nunit3-console.exe .\NUnitDocs.Tests\bin\debug\NUnitDocs.Tests.dll
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;&lt;em&gt;If you're using Nuget to organize your dependencies, you can install the NUnit.ConsoleRunner package to get the executable in the packages folder. Otherwise, you can download it from the &lt;a href="http://nunit.org/download/"&gt;NUnit downloads page&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
                &lt;p&gt;In addition to logging the results to the output, NUnit will write some metadata, and the following (more interesting) to TestOutput.xml:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;&amp;lt;test-run id=&amp;quot;2&amp;quot; testcasecount=&amp;quot;3&amp;quot; result=&amp;quot;Passed&amp;quot; total=&amp;quot;3&amp;quot; passed=&amp;quot;2&amp;quot; failed=&amp;quot;0&amp;quot; inconclusive=&amp;quot;1&amp;quot; &amp;gt;

                &amp;lt;!-- Attributes and metadata elements stripped for clarity --&amp;gt;

                &amp;lt;test-suite type=&amp;quot;TestSuite&amp;quot; id=&amp;quot;0-1005&amp;quot; name=&amp;quot;NUnitDocs&amp;quot; fullname=&amp;quot;NUnitDocs&amp;quot; runstate=&amp;quot;Runnable&amp;quot; testcasecount=&amp;quot;3&amp;quot; result=&amp;quot;Passed&amp;quot; total=&amp;quot;3&amp;quot; passed=&amp;quot;2&amp;quot; failed=&amp;quot;0&amp;quot; warnings=&amp;quot;0&amp;quot; inconclusive=&amp;quot;1&amp;quot;&amp;gt;
                &amp;lt;test-suite type=&amp;quot;TestSuite&amp;quot; id=&amp;quot;0-1006&amp;quot; name=&amp;quot;Tests&amp;quot; fullname=&amp;quot;NUnitDocs.Tests&amp;quot;&amp;gt;
                &amp;lt;test-suite type=&amp;quot;TestSuite&amp;quot; id=&amp;quot;0-1007&amp;quot; name=&amp;quot;Events&amp;quot; fullname=&amp;quot;NUnitDocs.Tests.Events&amp;quot;&amp;gt;
                &amp;lt;test-suite type=&amp;quot;TestFixture&amp;quot; id=&amp;quot;0-1000&amp;quot; name=&amp;quot;When_Displaying_An_Event&amp;quot; fullname=&amp;quot;NUnitDocs.Tests.Events.When_Displaying_An_Event&amp;quot;&amp;gt;
                &amp;lt;test-case id=&amp;quot;0-1002&amp;quot; name=&amp;quot;It_Is_Converted_To_An_Event_Model&amp;quot; fullname=&amp;quot;NUnitDocs.Tests.Events.When_Displaying_An_Event.It_Is_Converted_To_An_Event_Model&amp;quot; methodname=&amp;quot;It_Is_Converted_To_An_Event_Model&amp;quot; classname=&amp;quot;NUnitDocs.Tests.Events.When_Displaying_An_Event&amp;quot; runstate=&amp;quot;Runnable&amp;quot; seed=&amp;quot;1189788506&amp;quot; result=&amp;quot;Passed&amp;quot; start-time=&amp;quot;2017-10-08 19:44:11Z&amp;quot; end-time=&amp;quot;2017-10-08 19:44:12Z&amp;quot; duration=&amp;quot;0.413085&amp;quot; asserts=&amp;quot;3&amp;quot; /&amp;gt;
                &amp;lt;test-case id=&amp;quot;0-1001&amp;quot; name=&amp;quot;It_Is_Fetched_By_Id_From_The_Event_Server&amp;quot; fullname=&amp;quot;NUnitDocs.Tests.Events.When_Displaying_An_Event.It_Is_Fetched_By_Id_From_The_Event_Server&amp;quot; methodname=&amp;quot;It_Is_Fetched_By_Id_From_The_Event_Server&amp;quot; classname=&amp;quot;NUnitDocs.Tests.Events.When_Displaying_An_Event&amp;quot; runstate=&amp;quot;Runnable&amp;quot; seed=&amp;quot;486335788&amp;quot; result=&amp;quot;Passed&amp;quot; start-time=&amp;quot;2017-10-08 19:44:12Z&amp;quot; end-time=&amp;quot;2017-10-08 19:44:12Z&amp;quot; duration=&amp;quot;0.001595&amp;quot; asserts=&amp;quot;1&amp;quot; /&amp;gt;
                &amp;lt;test-case id=&amp;quot;0-1003&amp;quot; name=&amp;quot;It_Is_Rendered_With_A_Name_Date_And_A_Link&amp;quot; fullname=&amp;quot;NUnitDocs.Tests.Events.When_Displaying_An_Event.It_Is_Rendered_With_A_Name_Date_And_A_Link&amp;quot; methodname=&amp;quot;It_Is_Rendered_With_A_Name_Date_And_A_Link&amp;quot; classname=&amp;quot;NUnitDocs.Tests.Events.When_Displaying_An_Event&amp;quot; runstate=&amp;quot;Runnable&amp;quot; seed=&amp;quot;804806648&amp;quot; result=&amp;quot;Inconclusive&amp;quot; start-time=&amp;quot;2017-10-08 19:44:12Z&amp;quot; end-time=&amp;quot;2017-10-08 19:44:12Z&amp;quot; duration=&amp;quot;0.015905&amp;quot; asserts=&amp;quot;0&amp;quot;&amp;gt;
                &amp;lt;reason&amp;gt;
                &amp;lt;message&amp;gt;
                &amp;lt;![CDATA[Rendering has not been implemented yet.]]/&amp;gt;
                &amp;lt;/message&amp;gt;
                &amp;lt;/reason&amp;gt;
                &amp;lt;/test-case&amp;gt;
                &amp;lt;/test-suite&amp;gt;
                &amp;lt;/test-suite&amp;gt;
                &amp;lt;/test-suite&amp;gt;
                &amp;lt;/test-suite&amp;gt;
                &amp;lt;/test-run&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;I know, I know. It's not cool anymore. I don't like it any more than you, but there is one durable ancient technology we could use to do something with this output. Did you guess it yet?&lt;/p&gt;
                &lt;h2&gt;XSLT!&lt;/h2&gt;
                &lt;p&gt;There. I said it.&lt;/p&gt;
                &lt;p&gt;Now let's look at a simple output before we dive into the more beefy things:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1026/transformed_output.png" alt="Transformed output" /&gt;&lt;/p&gt;
                &lt;p&gt;Now ain't that starting to look readable? There's not that much to it. The NUnit console runner has a built-in parameter with the syntax --result=SPEC, where SPEC can point to an XSLT sheet. Here's the command to generate the former:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;.\packages\NUnit.ConsoleRunner.3.7.0\tools\nunit3-console.exe .\NUnitDocs.Tests\bin\debug\NUnitDocs.Tests.dll  --result:&amp;quot;TestSummary.htm;transform=TestSummary.xslt&amp;quot;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The XSLT isn't much either. There's Bootstrap and (our trusty) JQuery from CDN. Some simple HTML formatting. And I wrote a one-liner JavaScript function to strip out all the underscores as well. Here's the first pass:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;iso-8859-1&amp;quot;?&amp;gt;
                &amp;lt;xsl:stylesheet
                version=&amp;quot;1.0&amp;quot;
                exclude-result-prefixes=&amp;quot;msxsl&amp;quot;
                xmlns:xsl=&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;
                xmlns:msxsl=&amp;quot;urn:schemas-microsoft-com:xslt&amp;quot;
                &amp;gt;
                &amp;lt;xsl:output method=&amp;quot;html&amp;quot; indent=&amp;quot;yes&amp;quot;/&amp;gt;

                &amp;lt;xsl:template match=&amp;quot;@* | node()&amp;quot;&amp;gt;
                &amp;lt;html&amp;gt;
                &amp;lt;head&amp;gt;
                &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;/&amp;gt;
                &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css&amp;quot; integrity=&amp;quot;sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;/&amp;gt;
                &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
                .Passed { color: green; }
                .Inconclusive { color: #BBAA00; }
                .Failed { color: red; }

                ul {
                margin-left: 0px;
                list-style-type: none;
                padding-left: 0;
                }

                ul ul {
                margin-left: 15px;
                }

                .counts {
                font-size: .7em;
                color: gray;
                }
                &amp;lt;/style&amp;gt;

                &amp;lt;/head&amp;gt;
                &amp;lt;body&amp;gt;
                &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
                &amp;lt;xsl:apply-templates select=&amp;quot;/test-run/test-suite&amp;quot;/&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;script src=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js&amp;quot; integrity=&amp;quot;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;// Force closing tag&amp;lt;/script&amp;gt;
                &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&amp;quot;&amp;gt;// Force closing tag&amp;lt;/script&amp;gt;
                &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
                $(&amp;quot;td&amp;quot;).each(function(i, e) {
                $(e).text($(e).text().replace(/_/g, &amp;quot; &amp;quot;));
                });
                &amp;lt;/script&amp;gt;
                &amp;lt;/body&amp;gt;
                &amp;lt;/html&amp;gt;
                &amp;lt;/xsl:template&amp;gt;

                &amp;lt;xsl:template match=&amp;quot;/test-run/test-suite&amp;quot;&amp;gt;
                &amp;lt;h1&amp;gt;
                &amp;lt;xsl:value-of select=&amp;quot;./test-run/@name&amp;quot;/&amp;gt;
                &amp;lt;/h1&amp;gt;
                &amp;lt;table class=&amp;quot;table table-striped&amp;quot;&amp;gt;
                &amp;lt;xsl:apply-templates select=&amp;quot;./test-suite&amp;quot;/&amp;gt;
                &amp;lt;/table&amp;gt;
                &amp;lt;/xsl:template&amp;gt;

                &amp;lt;xsl:template match=&amp;quot;test-suite&amp;quot;&amp;gt;
                &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;
                &amp;lt;xsl:attribute name=&amp;quot;class&amp;quot;&amp;gt;
                &amp;lt;xsl:choose&amp;gt;
                &amp;lt;xsl:when test=&amp;quot;./@failed &amp;gt; 0&amp;quot;&amp;gt;Failed&amp;lt;/xsl:when&amp;gt;
                &amp;lt;xsl:when test=&amp;quot;./@inconclusive &amp;gt; 0&amp;quot;&amp;gt;Inconclusive&amp;lt;/xsl:when&amp;gt;
                &amp;lt;xsl:otherwise&amp;gt;Passed&amp;lt;/xsl:otherwise&amp;gt;
                &amp;lt;/xsl:choose&amp;gt;
                &amp;lt;/xsl:attribute&amp;gt;
                &amp;lt;xsl:attribute name=&amp;quot;style&amp;quot;&amp;gt;
                padding-left: &amp;lt;xsl:value-of select=&amp;quot;count(ancestor::test-suite)*15&amp;quot;/&amp;gt;px;
                &amp;lt;/xsl:attribute&amp;gt;
                &amp;lt;xsl:value-of select=&amp;quot;./@name&amp;quot;/&amp;gt;
                &amp;lt;/td&amp;gt;
                &amp;lt;td class=&amp;quot;counts&amp;quot;&amp;gt;
                &amp;lt;xsl:value-of select=&amp;quot;./@passed&amp;quot;/&amp;gt; passed,
                &amp;lt;xsl:value-of select=&amp;quot;./@inconclusive&amp;quot;/&amp;gt; inconclusive,
                &amp;lt;xsl:value-of select=&amp;quot;./@failed&amp;quot;/&amp;gt; failed
                &amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;
                &amp;lt;xsl:for-each select=&amp;quot;./test-suite&amp;quot;&amp;gt;
                &amp;lt;xsl:apply-templates select=&amp;quot;.&amp;quot;/&amp;gt;
                &amp;lt;/xsl:for-each&amp;gt;
                &amp;lt;xsl:for-each select=&amp;quot;./test-case&amp;quot;&amp;gt;
                &amp;lt;xsl:apply-templates select=&amp;quot;.&amp;quot;/&amp;gt;
                &amp;lt;/xsl:for-each&amp;gt;
                &amp;lt;/xsl:template&amp;gt;

                &amp;lt;xsl:template match=&amp;quot;test-case&amp;quot;&amp;gt;
                &amp;lt;tr&amp;gt;
                &amp;lt;td colspan=&amp;quot;2&amp;quot;&amp;gt;
                &amp;lt;xsl:attribute name=&amp;quot;style&amp;quot;&amp;gt;
                padding-left: &amp;lt;xsl:value-of select=&amp;quot;count(ancestor::test-suite)*15&amp;quot;/&amp;gt;px;
                &amp;lt;/xsl:attribute&amp;gt;
                &amp;lt;xsl:attribute name=&amp;quot;class&amp;quot;&amp;gt;
                &amp;lt;xsl:value-of select=&amp;quot;./@result&amp;quot;/&amp;gt;
                &amp;lt;/xsl:attribute&amp;gt;
                &amp;lt;xsl:value-of select=&amp;quot;./@name&amp;quot;/&amp;gt;
                &amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;

                &amp;lt;/xsl:template&amp;gt;
                &amp;lt;/xsl:stylesheet&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;This is fairly good as a starting point, but we're stuck with the brief test names. Having some free text, at least at feature level or use-case level would be nice. And we still have this ordering problem to deal with. NUnit has the perfect tool for this: &lt;/p&gt;
                &lt;h2&gt;NUnit PropertyAttribute&lt;/h2&gt;
                &lt;p&gt;NUnit comes with a &lt;code&gt;PropertyAttribute&lt;/code&gt; that we can use to decorate our tests with metadata. It's main purpose is to add properties to fixtures and tests in the test output. It's an abstract class we can use to create our own metadata, and there's a few built-in like &lt;code&gt;DescriptionAttribute&lt;/code&gt;. There are uses of properties at runtime too, but that's way too advanced for this post.&lt;/p&gt;
                &lt;p&gt;The &lt;code&gt;DescriptionAttribute&lt;/code&gt; is just what we want for the free text part of our documentation. It's added to the method just like the &lt;code&gt;Test&lt;/code&gt; attribute:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[Test]
                [Description(@&amp;quot;
                Events are provided at eventsite with a REST api at the URL:
                https://eventsite/api/{id}
                &amp;quot;)]
                public void It_Is_Fetched_By_Id_From_The_Event_Server()
                {
                // ...
                }

                [Test]
                [Description(&amp;quot;The JSON response from the event server is deserialized as the Event type.&amp;quot;)]
                public void It_Is_Converted_To_An_Event_Model()
                {
                // ...
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The &lt;code&gt;Description&lt;/code&gt; is written to the XML output like so:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;&amp;lt;test-case id=&amp;quot;0-1002&amp;quot; name=&amp;quot;It_Is_Converted_To_An_Event_Model&amp;quot; ...&amp;gt;
                &amp;lt;properties&amp;gt;
                &amp;lt;property name=&amp;quot;Description&amp;quot; value=&amp;quot;The JSON response from the event server is deserialized as the Event type.&amp;quot; /&amp;gt;
                &amp;lt;/properties&amp;gt;
                &amp;lt;/test-case&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;By adding a few more voodoo lines to the XSLT and another one-liner JavaScript, we get the following output:&lt;br /&gt;
                &lt;em&gt;(Don't worry, complete XSLT is available at the bottom fo the post.)&lt;/em&gt;&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1028/transformed_output_with_description.png" alt="Transformed HTML output with descriptions" /&gt;&lt;/p&gt;
                &lt;p&gt;Now we're really getting somewhere. We can provide that little extra that tells the reader what's really happening and stuff that might be obscured by too many, or hopefully just the right amount of abstractions.&lt;/p&gt;
                &lt;p&gt;Let's tackle the ordering problem while we're at it.&lt;/p&gt;
                &lt;h2&gt;Implementing our own properties&lt;/h2&gt;
                &lt;p&gt;The PropertyAttribute isn't much more than a metadata container. An ordering property is as simple as such:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class DocumentationOrderAttribute : PropertyAttribute
                {
                public DocumentationOrderAttribute(int order)
                : base(&amp;quot;DocumentationOrder&amp;quot;, order)
                {
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;It's applied to the tests just like the descriptions:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[Test]
                [DocumentationOrder(0)]
                [Description(@&amp;quot;
                Events are provided at eventsite with a REST api at the URL:
                https://eventsite/api/{id}
                &amp;quot;)]
                public void It_Is_Fetched_By_Id_From_The_Event_Server()
                {
                // ...
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;And it's output just like descriptions:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;&amp;lt;test-case id=&amp;quot;0-1002&amp;quot; name=&amp;quot;It_Is_Converted_To_An_Event_Model&amp;quot; ...&amp;gt;
                &amp;lt;properties&amp;gt;
                &amp;lt;property name=&amp;quot;DocumentationOrder&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;
                &amp;lt;property name=&amp;quot;Description&amp;quot; value=&amp;quot;The JSON response from the event server is deserialized as the Event type.&amp;quot; /&amp;gt;
                &amp;lt;/properties&amp;gt;
                &amp;lt;/test-case&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Now we can tackle the ordering problem with a simple XSLT sort element:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;&amp;lt;xsl:for-each select=&amp;quot;./test-case&amp;quot;&amp;gt;
                &amp;lt;xsl:sort select=&amp;quot;./properties/property[@name='DocumentationOrder']/@value&amp;quot;/&amp;gt;
                &amp;lt;xsl:apply-templates select=&amp;quot;.&amp;quot;/&amp;gt;
                &amp;lt;/xsl:for-each&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;And we get a nice ordered output:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1027/transformed_output_ordered.png" alt="Transformed output ordered by attribute" /&gt;&lt;/p&gt;
                &lt;h2&gt;Summary&lt;/h2&gt;
                &lt;p&gt;By structuring and naming our tests by feature we get nice headings for potential documentation. We also untie them completely from implementation so we're free to change our code. Applying a bit of metadata to our tests adds that little extra to make quite meaningful documentation.&lt;/p&gt;
                &lt;p&gt;The fact that the results can be tranformed means we can create rich documentation UIs with search, tags, navigation structure and a bit less than just enough prose.&lt;/p&gt;
                &lt;h2&gt;Next steps&lt;/h2&gt;
                &lt;p&gt;We've still got that rendering test to pass. There's also a few too many asserts in one of the tests. In an upcoming post I'll share a couple of other tools with you and how to extend those to enrich the technical documentation even more.&lt;/p&gt;
                &lt;h2&gt;Complete XSLT&lt;/h2&gt;
                &lt;p&gt;Here's the complete XSLT for the examples above:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;iso-8859-1&amp;quot;?&amp;gt;
                &amp;lt;xsl:stylesheet
                version=&amp;quot;1.0&amp;quot;
                exclude-result-prefixes=&amp;quot;msxsl&amp;quot;
                xmlns:xsl=&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;
                xmlns:msxsl=&amp;quot;urn:schemas-microsoft-com:xslt&amp;quot;
                &amp;gt;
                &amp;lt;xsl:output method=&amp;quot;html&amp;quot; indent=&amp;quot;yes&amp;quot;/&amp;gt;

                &amp;lt;xsl:template match=&amp;quot;@* | node()&amp;quot;&amp;gt;
                &amp;lt;html&amp;gt;
                &amp;lt;head&amp;gt;
                &amp;lt;!-- Latest compiled and minified CSS --&amp;gt;
                &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;/&amp;gt;
                &amp;lt;!-- Optional theme --&amp;gt;
                &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css&amp;quot; integrity=&amp;quot;sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;/&amp;gt;
                &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
                .Passed { color: green; }
                .Inconclusive { color: #BBAA00; }
                .Failed { color: red; }

                ul {
                margin-left: 0px;
                list-style-type: none;
                padding-left: 0;
                }

                ul ul {
                margin-left: 15px;
                }

                label {
                font-weight: normal;
                }

                .counts {
                font-size: .7em;
                color: gray;
                }
                &amp;lt;/style&amp;gt;

                &amp;lt;/head&amp;gt;
                &amp;lt;body&amp;gt;
                &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
                &amp;lt;xsl:apply-templates select=&amp;quot;/test-run/test-suite&amp;quot;/&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;!-- Latest compiled and minified JavaScript --&amp;gt;
                &amp;lt;script src=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js&amp;quot; integrity=&amp;quot;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;// Force closing tag&amp;lt;/script&amp;gt;
                &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&amp;quot;&amp;gt;// Force closing tag&amp;lt;/script&amp;gt;
                &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
                $(&amp;quot;td label&amp;quot;).each(function(i, e) {
                $(e).text($(e).text().replace(/_/g, &amp;quot; &amp;quot;));
                });
                $(&amp;quot;.description&amp;quot;).each(function(i, e) {
                $(e).html($(e).html().trim().replace(/\n/g, '&amp;lt;br/&amp;gt;'));
                });
                &amp;lt;/script&amp;gt;
                &amp;lt;/body&amp;gt;
                &amp;lt;/html&amp;gt;
                &amp;lt;/xsl:template&amp;gt;

                &amp;lt;xsl:template match=&amp;quot;/test-run/test-suite&amp;quot;&amp;gt;
                &amp;lt;h1&amp;gt;
                &amp;lt;xsl:value-of select=&amp;quot;./test-run/@name&amp;quot;/&amp;gt;
                &amp;lt;/h1&amp;gt;
                &amp;lt;table class=&amp;quot;table table-striped&amp;quot;&amp;gt;
                &amp;lt;xsl:apply-templates select=&amp;quot;./test-suite&amp;quot;/&amp;gt;
                &amp;lt;/table&amp;gt;
                &amp;lt;/xsl:template&amp;gt;

                &amp;lt;xsl:template match=&amp;quot;test-suite&amp;quot;&amp;gt;
                &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;
                &amp;lt;xsl:attribute name=&amp;quot;class&amp;quot;&amp;gt;
                &amp;lt;xsl:choose&amp;gt;
                &amp;lt;xsl:when test=&amp;quot;./@failed &amp;gt; 0&amp;quot;&amp;gt;Failed&amp;lt;/xsl:when&amp;gt;
                &amp;lt;xsl:when test=&amp;quot;./@inconclusive &amp;gt; 0&amp;quot;&amp;gt;Inconclusive&amp;lt;/xsl:when&amp;gt;
                &amp;lt;xsl:otherwise&amp;gt;Passed&amp;lt;/xsl:otherwise&amp;gt;
                &amp;lt;/xsl:choose&amp;gt;
                &amp;lt;/xsl:attribute&amp;gt;
                &amp;lt;xsl:attribute name=&amp;quot;style&amp;quot;&amp;gt;
                padding-left: &amp;lt;xsl:value-of select=&amp;quot;count(ancestor::test-suite)*15&amp;quot;/&amp;gt;px;
                &amp;lt;/xsl:attribute&amp;gt;
                &amp;lt;xsl:value-of select=&amp;quot;./@name&amp;quot;/&amp;gt;
                &amp;lt;/td&amp;gt;
                &amp;lt;td class=&amp;quot;counts&amp;quot;&amp;gt;
                &amp;lt;xsl:value-of select=&amp;quot;./@passed&amp;quot;/&amp;gt; passed,
                &amp;lt;xsl:value-of select=&amp;quot;./@inconclusive&amp;quot;/&amp;gt; inconclusive,
                &amp;lt;xsl:value-of select=&amp;quot;./@failed&amp;quot;/&amp;gt; failed
                &amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;
                &amp;lt;xsl:for-each select=&amp;quot;./test-suite&amp;quot;&amp;gt;
                &amp;lt;xsl:apply-templates select=&amp;quot;.&amp;quot;/&amp;gt;
                &amp;lt;/xsl:for-each&amp;gt;
                &amp;lt;xsl:for-each select=&amp;quot;./test-case&amp;quot;&amp;gt;
                &amp;lt;xsl:sort select=&amp;quot;./properties/property[@name='DocumentationOrder']/@value&amp;quot;/&amp;gt;
                &amp;lt;xsl:apply-templates select=&amp;quot;.&amp;quot;/&amp;gt;
                &amp;lt;/xsl:for-each&amp;gt;
                &amp;lt;/xsl:template&amp;gt;

                &amp;lt;xsl:template match=&amp;quot;test-case&amp;quot;&amp;gt;
                &amp;lt;tr&amp;gt;
                &amp;lt;td colspan=&amp;quot;2&amp;quot;&amp;gt;
                &amp;lt;xsl:attribute name=&amp;quot;style&amp;quot;&amp;gt;
                padding-left: &amp;lt;xsl:value-of select=&amp;quot;count(ancestor::test-suite)*15&amp;quot;/&amp;gt;px;
                &amp;lt;/xsl:attribute&amp;gt;
                &amp;lt;label&amp;gt;
                &amp;lt;xsl:attribute name=&amp;quot;class&amp;quot;&amp;gt;
                &amp;lt;xsl:value-of select=&amp;quot;./@result&amp;quot;/&amp;gt;
                &amp;lt;/xsl:attribute&amp;gt;
                &amp;lt;xsl:value-of select=&amp;quot;./@name&amp;quot;/&amp;gt;
                &amp;lt;/label&amp;gt;
                &amp;lt;xsl:if test=&amp;quot;./properties/property[@name='Description']&amp;quot;&amp;gt;
                &amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;
                &amp;lt;xsl:value-of select=&amp;quot;./properties/property[@name='Description']/@value&amp;quot;/&amp;gt;
                &amp;lt;xsl:text&amp;gt; &amp;lt;/xsl:text&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;/xsl:if&amp;gt;

                &amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;

                &amp;lt;/xsl:template&amp;gt;
                &amp;lt;/xsl:stylesheet&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

            </description>
            <pubDate>Sun, 08 Oct 2017 21:06:26 Z</pubDate>
            <a10:updated>2017-10-08T21:06:26Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1117</guid>
            <link>http://blog.aabech.no/archive/potential-freeze-with-umbraco-and-signalr/</link>
            <title>Potential freeze with Umbraco and SignalR</title>
            <description>
                &lt;p&gt;I cloned the Umbraco 7.7 dev branch today to prepare a demo for my colleagues next week. SignalR has been bundled with Umbraco, and guess what - problems I've had before hit me again. It just freezes on boot, specifically at the app.MapSignalR call in the Owin startup.&lt;/p&gt;
                &lt;p&gt;Turns out, the HQ guys have already been down this road and helped fix a really really weird bug with it. Read &lt;a href="https://github.com/SignalR/SignalR/issues/3414"&gt;the issue&lt;/a&gt; and &lt;a href="https://www.zpqrtbnk.net/posts/appdomains-threads-cultureinfos-and-paracetamol"&gt;Stephane's post&lt;/a&gt;, it's quite interesting. But this was not the issue that hit me, even tho it's quite similar in behavior.&lt;/p&gt;
                &lt;p&gt;I've actually been down this road before myself. I recalled having had similar problems. I didn't dive into it back then, I just gave up and threw SignalR out. I'd like to say I have just as deep an analysis as Stephane has in his post, but I'm just not as good. :) In any case, it's something to do with the performance counters reading a registry key.&lt;/p&gt;
                &lt;p&gt;The code is somewhere within &lt;code&gt;PerformanceCounter.NextSample()&lt;/code&gt;. My debugging symbols fu is not strong enough to get everything right there, but it's somewhere in the &lt;code&gt;PerformanceCounterLib&lt;/code&gt; and has something to do with a &lt;code&gt;RegistryKey&lt;/code&gt; being read. I had it in the stacktrace, but I'm sorry to say I didn't record it.&lt;/p&gt;
                &lt;p&gt;Popping the registry editor, I find it already focused on a registry key called SignalR. I'm guessing I haven't had it open since I gave up the last time. Again, sorry for not having deeper knowledge here. You might have a gazillion keys called SignalR-something.vstemplate. These are safe, but the one only named SignalR is our suspect. I impatiently went ahead and deleted it, and now everything works.&lt;/p&gt;
                &lt;p&gt;So I'm stuck trying to provide any deeper knowledge, and I was stupid enough not to record the key name before I threw it out. Although, I'm pretty sure it is from the &lt;a href="http://www.asp.net/signalr/overview/performance/signalr-performance#perfcounters"&gt;SignalR performance counters&lt;/a&gt;, and that the key in question is &lt;code&gt;HKLM\System\CurrentControlSet\Services\SignalR\Performance&lt;/code&gt;. I threw the whole &lt;code&gt;SignalR&lt;/code&gt; key out.&lt;/p&gt;
                &lt;p&gt;If I gain any deeper knowledge, I'll update this post. Otherwise, at least you know that deleting that key may save your day. :)&lt;/p&gt;
            </description>
            <pubDate>Fri, 23 Jun 2017 22:16:38 Z</pubDate>
            <a10:updated>2017-06-23T22:16:38Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1116</guid>
            <link>http://blog.aabech.no/archive/copying-umbraco-datatype-settings-prevalues/</link>
            <title>Copying Umbraco datatype settings (prevalues).</title>
            <description>
                &lt;p&gt;I had to copy a grid with settings and our &amp;quot;default template&amp;quot; settings today. Given there's no copy datatype feature in Umbraco yet, I had the option of ticking all the boxes manually, or invent a quicker way. So I ended up just doing a quick hack in SQL to do the work for me. I'm mostly putting it here for my own reference for later, but maybe - just maybe it's useful for you too. :)&lt;/p&gt;
                &lt;p&gt;If you create a new datatype with the same property editor in the backoffice, you can compare it's settings with an existing one as such:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;select
                *
                FROM
                cmsDataTypePreValues target
                inner join cmsDataTypePreValues source  on
                source.datatypenodeId = 1048 and target.datatypenodeid = 1630
                and
                source.alias = target.alias
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Just swap out 1038 and 1630 with your respective source values.
                If you run the query you'll see that we'd like the values on the right to be copied to the left ones. That's just a matter of running and update. Wrap it in a transaction just to check that you don't update 1000 prevalues inadvertently:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;begin tran
                go

                update target set
                target.value = source.value
                FROM
                cmsDataTypePreValues target
                inner join cmsDataTypePreValues source  on
                source.datatypenodeId = 1048 and target.datatypenodeid = 1630
                and
                source.alias = target.alias

                go
                rollback tran
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;If it says it updated as many rows as you have settings, you're in the green and can swap the &lt;code&gt;rollback tran&lt;/code&gt; to a &lt;code&gt;commit tran&lt;/code&gt; and there you go. All settings copied.&lt;/p&gt;
                &lt;p&gt;Now all we've got to do is wrap this in a WebAPI call and we've almost got the copy/paste datatypes feature in Umbraco. :)&lt;/p&gt;
            </description>
            <pubDate>Tue, 18 Apr 2017 12:25:17 Z</pubDate>
            <a10:updated>2017-04-18T12:25:17Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1115</guid>
            <link>http://blog.aabech.no/archive/automating-creation-of-source-data-for-tests/</link>
            <title>Automating creation of source data for tests</title>
            <description>
                &lt;p&gt;I'm writing some tests for a synchronization job between two systems at the moment. Especially for these kinds of projects, but also most other, I need to have a fair amount of test-data to spin off useful tests.&lt;/p&gt;
                &lt;p&gt;The worst way of doing this is building up huge object graphs in setup methods. I guess an even worse way is to set up big object graphs using mocks, setting up each property. I've seen and probably did both, but it basically just makes you stop testing if you can't find another way.&lt;/p&gt;
                &lt;p&gt;So I've learned to move such test-data out into separate files. Often in a &amp;quot;TestData&amp;quot; folder or the like. Naming gets a bit random, but at least it's better.&lt;/p&gt;
                &lt;p&gt;But after starting to use &lt;a href="http://approvaltests.com/"&gt;ApprovalTests&lt;/a&gt; by &lt;a href="https://twitter.com/LlewellynFalco"&gt;Llewellyn Falco&lt;/a&gt;, I got inspired by the way it magically adds received and approved files named after specific tests. It's quite genious. And the best part is that NUnit more or less supports everything you need to do so in other situations.&lt;/p&gt;
                &lt;p&gt;Let's say I have this test and some test-data:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[TestFixture]
                public class When_Updating
                {
                [Test]
                public void Then_Posts_Data()
                {
                var arr = JsonConvert.DeserializeObject&amp;lt;JArray&amp;gt;(Path.Combine(
                AppDomain.CurrentDomain.BaseDirectory,
                @&amp;quot;TestData\some-test-file.json&amp;quot;
                ));
                // ... test stuff
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;I could extract this into a helper and pass &amp;quot;TestData\some-test-file.json&amp;quot; perhaps. But it could be even better. NUnit has this &lt;code&gt;TestContext&lt;/code&gt; singleton that holds the current fixture and test names. (Amongst other things.) We can use this to our advantage. Have a look at this helper:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;private static T ReadTestSource&amp;lt;T&amp;gt;()
                where T : new()
                {
                var sourceFileName = Type.GetType(TestContext.CurrentContext.Test.ClassName)?.Name + &amp;quot;.&amp;quot; + TestContext.CurrentContext.Test.MethodName + &amp;quot;.Source.json&amp;quot;;
                var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @&amp;quot;..\..&amp;quot;, sourceFileName);
                if (!File.Exists(filePath))
                using (var file = File.CreateText(filePath))
                file.Write(JsonConvert.SerializeObject(new T()));
                return JsonConvert.DeserializeObject&amp;lt;T&amp;gt;(File.ReadAllText(filePath));
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Given this, we can replace the entire test-data getter to a single parameterless (generic, tho) method:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[TestFixture]
                public class When_Updating
                {
                [Test]
                public void Then_Posts_Data()
                {
                var arr = ReadTestSource&amp;lt;JArray&amp;gt;();
                // ... test stuff
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;If I did this in a completely fresh test, I would actually get a JSON file on disk, called &amp;quot;When_Updating.Then_Posts_Data.Source.json&amp;quot;. Since I passed &lt;code&gt;JArray&lt;/code&gt; as the generic parameter, the file will already contain &lt;code&gt;[]&lt;/code&gt;. If it were an object, it'd have all the keys. I can just start filling it out. In this case, I've got another slower integration test I can copy some data from, and I'll have my source data at hand.&lt;/p&gt;
                &lt;p&gt;There's more magic that could be done, but I found these 9 lines of code so cool and powerful not to go ahead and share it at once. :) One important thing missing is finding the tests folder, but I'm sure you're up for that challenge if you find this useful.&lt;/p&gt;
                &lt;p&gt;Happy testing!&lt;/p&gt;
                &lt;p&gt;&lt;strong&gt;[Edit]&lt;/strong&gt; I really, really needed that namespace/test-folder pretty soon, so here's a non-refactored method that does just that. :)&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;private static T ReadTestSource&amp;lt;T&amp;gt;()
                where T : new()
                {
                var rootPath = Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @&amp;quot;..\..&amp;quot;));
                var type = Type.GetType(TestContext.CurrentContext.Test.ClassName);
                var path = type?.Namespace?.Replace(type.Assembly.GetName().Name + &amp;quot;.&amp;quot;, &amp;quot;&amp;quot;).Replace(&amp;quot;.&amp;quot;, &amp;quot;\\&amp;quot;);
                var testFolder = Path.Combine(rootPath, path ?? &amp;quot;&amp;quot;);
                if (!Directory.Exists(testFolder))
                throw new Exception(&amp;quot;Need to keep namespace and folder in sync to create test-source file&amp;quot;);
                var sourceFileName = type?.Name + &amp;quot;.&amp;quot; + TestContext.CurrentContext.Test.MethodName + &amp;quot;.Source.json&amp;quot;;
                var filePath = Path.Combine(testFolder, sourceFileName);
                if (!File.Exists(filePath))
                using (var file = File.CreateText(filePath))
                file.Write(JsonConvert.SerializeObject(new T()));
                return JsonConvert.DeserializeObject&amp;lt;T&amp;gt;(File.ReadAllText(filePath));
                }
                &lt;/code&gt;&lt;/pre&gt;

            </description>
            <pubDate>Thu, 06 Apr 2017 10:11:09 Z</pubDate>
            <a10:updated>2017-04-06T10:11:09Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1114</guid>
            <link>http://blog.aabech.no/archive/the-basics-of-unit-testing-umbraco-just-got-simpler/</link>
            <title>The basics of unit testing Umbraco just got simpler</title>
            <description>
                &lt;h2&gt;Status Quo of Umbraco Testing 2017&lt;/h2&gt;
                &lt;p&gt;It's been a year since giving my &lt;a href="https://vimeo.com/channels/codegarden16/183623111"&gt;presentation about Unit Testing Umbraco at Codegarden 2016&lt;/a&gt;. Testing Umbraco is ever more popular, and I'm happy to see there's more people talking about it on twitter, at festivals and at gatherings. Recently, &lt;a href="https://twitter.com/c_thillemann"&gt;Christian Thillemann&lt;/a&gt; decided he was tired of waiting for the request I created last year about having Umbraco.Tests on Nuget. He went ahead and set up an AppVeyor script and we now have automatic releases of &lt;a href="https://www.nuget.org/packages/Our.Umbraco.Community.Tests/"&gt;Our.Umbraco.Community.Tests&lt;/a&gt; on nuget whenever there's a new Umbraco version out. #H5YR, @kedde! :)&lt;/p&gt;
                &lt;p&gt;Of course, having this requirement and having to lean that heavily on an external assembly just to get to annoying internals in our core product is just an intermediate challenge. Come Umbraco 9 on .net Core, we'll (hopefully) be able to just spin up a complete hosted Umbraco site from our tests and inject / swap out whatever we'd fancy in that startup. Java and other platforms has had that option for years, so it's about time the .net community gets there. But enough ranting about that, let's just keep contributing so we get closer to running on .net Core.&lt;/p&gt;
                &lt;h2&gt;Meanwhile...&lt;/h2&gt;
                &lt;p&gt;In the mean time, I've been exploring further practices with automated testing. I'll get back to those in future posts and presentations. But while doing this, I stubled into an alternative practice to the one I've been preaching. It's mostly the same, but it challenges the inherital structure of Umbraco.Tests.&lt;/p&gt;
                &lt;p&gt;A really good principle when you write tests is letting your tests be interfaces to your code. Whenever you write a user interface, you take good care putting your logic in separate classes. The UI stuff is just UI stuff. Maybe our tests should be like that too? When you do that, you can even re-use your tests for different layers of your code! I'll not go into details about that in this post, but a natural result was to offload everything about Umbraco into its own class. I don't know why I didn't before, or why it took me so long to do it, but I suppose it's got something to do with closed mentality. When you see a pattern (inherited unit-tests), you automatically think it's a good one, and don't challenge it.&lt;/p&gt;
                &lt;h2&gt;An epiphany&lt;/h2&gt;
                &lt;p&gt;If you've gone through my post about &lt;a href="/archive/the-basics-of-unit-testing-umbraco/"&gt;the basics of testing Umbraco&lt;/a&gt;, you know you can inherit quite a few different base tests from Umbraco.Tests. They all have their uses, and I still recommend using the &lt;code&gt;BaseDatabaseFactoryTest&lt;/code&gt; if you're testing stuff integrated with a database. However, most of what I write are different &lt;code&gt;Surface-&lt;/code&gt;, &lt;code&gt;Render-&lt;/code&gt; and &lt;code&gt;*ApiControllers&lt;/code&gt; using fairly few stubbable things. All the front-end ones have the same basic initial state needs, and the backoffice ones just have fewer. So we end up inheriting &lt;code&gt;BaseRoutingTest&lt;/code&gt; and calling &lt;code&gt;GetRoutingContext(...)&lt;/code&gt; in all our setups. Being the smart devs you are, I'm sure a lot of you also ended up with some kind of &lt;code&gt;MyUmbracoTestBase&lt;/code&gt;.&lt;/p&gt;
                &lt;p&gt;&lt;strong&gt;But there's something completely wrong with that!&lt;/strong&gt; We're letting the dependency on &lt;em&gt;Umbraco&lt;/em&gt; get in the way of our own automation code. We can't create a hirarchy of tests that isn't dependent on Umbraco. For instance, if we had a base class initializating our own domain in our core domain tests, we couldn't re-use that for our MVC tests. To do that we'd have to inherit our core base test class from Umbraco tests, and then Umbraco would leak into our core domain. We don't want that.&lt;/p&gt;
                &lt;h2&gt;The solution&lt;/h2&gt;
                &lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;SRP&lt;/a&gt; your tests of course! Excercise the same dicipline by applying nice layering to your test automation code as you do to your other code. I ended up refactoring most of my test classes' setups and teardowns into a &amp;quot;Support&amp;quot; class with only three public methods. Here's how you'd set up a test for a simple SurfaceController with this method:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[TestFixture]
                public class Adding_Numbers
                {
                private UmbracoSupport support = new UmbracoSupport();

                [SetUp]
                public void Setup()
                {
                support.SetupUmbraco();
                }

                [TearDown]
                public void TearDown()
                {
                support.DisposeUmbraco();
                }

                [Test]
                public void Posting_AddModel_Calculates_Result()
                {
                const int expectedSum = 3;
                var controller = new SimpleSurfaceController();
                var result = (AdditionModel)controller.Add(1, 2);
                Assert.AreEqual(expectedSum, result.Model.Sum);
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;&lt;em&gt;I want to stress that this is not, and will not be a package. See below for reasons.&lt;/em&gt;&lt;/p&gt;
                &lt;p&gt;So it isn't that different from inheriting &lt;code&gt;BaseRoutingTest&lt;/code&gt;. The only difference is that we delegate the setup and teardown to another type instance instead of delegating it to the base class. The &lt;code&gt;UmbracoSupport&lt;/code&gt; class still derives from &lt;code&gt;BaseRoutingTest&lt;/code&gt;, but it stops there. It won't leak further.&lt;/p&gt;
                &lt;p&gt;Note that NUnit creates an instance of your test fixture for each test, so you'll get a fresh UmbracoSupport instance for each of your tests.&lt;/p&gt;
                &lt;p&gt;The third method you'd want to call is &lt;code&gt;PrepareController()&lt;/code&gt;. The moment you'd like to act upon the &lt;code&gt;CurrentPage&lt;/code&gt;, or just use &lt;code&gt;RedirectToCurrentUmbracoPage&lt;/code&gt;, you'll have to call &lt;code&gt;support.PrepareController(controller)&lt;/code&gt;. This wires up the Umbraco request context instance to your controller's state.&lt;/p&gt;
                &lt;p&gt;When you've done that, you've got quite a few properties on the support class that let's you get to the juicy stuff you'll want to stub:&lt;/p&gt;
                &lt;table&gt;
                &lt;tr&gt;&lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Purpose&lt;/th&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;&lt;code&gt;UmbracoContext&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The current &lt;code&gt;UmbracoContext&lt;/code&gt;. Inject it to your controllers and whatnot&lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;&lt;code&gt;ServiceContext&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The complete &lt;code&gt;IServiceContext&lt;/code&gt; with clean stubs&lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;&lt;code&gt;CurrentPage&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A mock of the currently served &lt;code&gt;IPublishedContent&lt;/code&gt;. Same as &lt;code&gt;UmbracoContext.Current.PublishedRequestContext.PublishedContent&lt;/code&gt;, &lt;code&gt;UmbracoHelper.AssignedContentItem&lt;/code&gt; and &lt;code&gt;SurfaceController.CurrentPage&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;&lt;code&gt;RouteData&lt;/code&gt;&lt;/td&gt;&lt;td&gt;You might hit further usage of this internally to Umbraco. It's available for modification when you do&lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;&lt;code&gt;HttpContext&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The good ol' "testable" &lt;code&gt;HttpContextBase&lt;/code&gt; from MVC, created along with the &lt;code&gt;UmbracoContext&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;
                &lt;/table&gt;
                &lt;h2&gt;The implementation&lt;/h2&gt;
                &lt;p&gt;I've already implemented this class in the &lt;a href="https://github.com/lars-erik/umbraco-unit-testing-samples"&gt;umbraco-unit-testing-samples repo&lt;/a&gt;. I'll post it here as well for you to copy uncritically. I won't go through the details. It's just a refactored version of &lt;a href="http://blog.aabech.no/archive/the-basics-of-unit-testing-umbraco/"&gt;what I've shown in previous posts&lt;/a&gt;.&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;using System;
                using System.Globalization;
                using System.Web;
                using System.Web.Mvc;
                using System.Web.Routing;
                using Moq;
                using Umbraco.Core;
                using Umbraco.Core.Configuration.UmbracoSettings;
                using Umbraco.Core.Models;
                using Umbraco.Core.Persistence;
                using Umbraco.Core.Services;
                using Umbraco.Tests.TestHelpers;
                using Umbraco.Web;
                using Umbraco.Web.Mvc;
                using Umbraco.Web.Routing;

                namespace Umb.Testing.Tests.Support
                {
                public class UmbracoSupport : BaseRoutingTest
                {
                public UmbracoContext UmbracoContext =&amp;gt; umbracoContext;

                public new ServiceContext ServiceContext =&amp;gt; serviceContext;

                public IPublishedContent CurrentPage =&amp;gt; currentPage;

                public RouteData RouteData =&amp;gt; routeData;

                public UmbracoHelper UmbracoHelper =&amp;gt; umbracoHelper;

                public HttpContextBase HttpContext =&amp;gt; umbracoContext.HttpContext;

                public string ContentCacheXml { get; set; }

                /// &amp;lt;summary&amp;gt;
                /// Initializes a stubbed Umbraco request context. Generally called from [SetUp] methods.
                /// Remember to call UmbracoSupport.DisposeUmbraco from your [TearDown].
                /// &amp;lt;/summary&amp;gt;
                public void SetupUmbraco()
                {
                InitializeFixture();
                TryBaseInitialize();

                InitializeSettings();

                CreateCurrentPage();
                CreateRouteData();
                CreateContexts();
                CreateHelper();

                InitializePublishedContentRequest();
                }

                /// &amp;lt;summary&amp;gt;
                /// Cleans up the stubbed Umbraco request context. Generally called from [TearDown] methods.
                /// Must be called before another UmbracoSupport.SetupUmbraco.
                /// &amp;lt;/summary&amp;gt;
                public void DisposeUmbraco()
                {
                TearDown();
                }

                /// &amp;lt;summary&amp;gt;
                /// Attaches the stubbed UmbracoContext et. al. to the Controller.
                /// &amp;lt;/summary&amp;gt;
                /// &amp;lt;param name=&amp;quot;controller&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;
                public void PrepareController(Controller controller)
                {
                var controllerContext = new ControllerContext(HttpContext, RouteData, controller);
                controller.ControllerContext = controllerContext;

                routeData.Values.Add(&amp;quot;controller&amp;quot;, controller.GetType().Name.Replace(&amp;quot;Controller&amp;quot;, &amp;quot;&amp;quot;));
                routeData.Values.Add(&amp;quot;action&amp;quot;, &amp;quot;Dummy&amp;quot;);
                }

                protected override string GetXmlContent(int templateId)
                {
                if (ContentCacheXml != null)
                return ContentCacheXml;

                return base.GetXmlContent(templateId);
                }

                private UmbracoContext umbracoContext;
                private ServiceContext serviceContext;
                private IUmbracoSettingsSection settings;
                private RoutingContext routingContext;
                private IPublishedContent currentPage;
                private RouteData routeData;
                private UmbracoHelper umbracoHelper;
                private PublishedContentRequest publishedContentRequest;

                protected override ApplicationContext CreateApplicationContext()
                {
                // Overrides the base CreateApplicationContext to inject a completely stubbed servicecontext
                serviceContext = MockHelper.GetMockedServiceContext();
                var appContext = new ApplicationContext(
                new DatabaseContext(Mock.Of&amp;lt;IDatabaseFactory&amp;gt;(), Logger, SqlSyntax, GetDbProviderName()),
                serviceContext,
                CacheHelper,
                ProfilingLogger);
                return appContext;
                }

                private void TryBaseInitialize()
                {
                // Delegates to Umbraco.Tests initialization. Gives a nice hint about disposing the support class for each test.
                try
                {
                Initialize();
                }
                catch (InvalidOperationException ex)
                {
                if (ex.Message.StartsWith(&amp;quot;Resolution is frozen&amp;quot;))
                throw new Exception(&amp;quot;Resolution is frozen. This is probably because UmbracoSupport.DisposeUmbraco wasn't called before another UmbracoSupport.SetupUmbraco call.&amp;quot;);
                }
                }

                private void InitializeSettings()
                {
                // Stub up all the settings in Umbraco so we don't need a big app.config file.
                settings = SettingsForTests.GenerateMockSettings();
                SettingsForTests.ConfigureSettings(settings);
                }

                private void CreateCurrentPage()
                {
                // Stubs up the content used as current page in all contexts
                currentPage = Mock.Of&amp;lt;IPublishedContent&amp;gt;();
                }

                private void CreateRouteData()
                {
                // Route data is used in many of the contexts, and might need more data throughout your tests.
                routeData = new RouteData();
                }

                private void CreateContexts()
                {
                // Surface- and RenderMvcControllers need a routing context to fint the current content.
                // Umbraco.Tests creates one and whips up the UmbracoContext in the process.
                routingContext = GetRoutingContext(&amp;quot;http://localhost&amp;quot;, -1, routeData, true, settings);
                umbracoContext = routingContext.UmbracoContext;
                }

                private void CreateHelper()
                {
                umbracoHelper = new UmbracoHelper(umbracoContext, currentPage);
                }

                private void InitializePublishedContentRequest()
                {
                // Some deep core methods fetch the published content request from routedata
                // others access it through the context
                // in any case, this is the one telling everyone which content is the current content.

                publishedContentRequest = new PublishedContentRequest(new Uri(&amp;quot;http://localhost&amp;quot;), routingContext, settings.WebRouting, s =&amp;gt; new string[0])
                {
                PublishedContent = currentPage,
                Culture = CultureInfo.CurrentCulture
                };

                umbracoContext.PublishedContentRequest = publishedContentRequest;

                var routeDefinition = new RouteDefinition
                {
                PublishedContentRequest = publishedContentRequest
                };

                routeData.DataTokens.Add(&amp;quot;umbraco-route-def&amp;quot;, routeDefinition);
                }
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h2&gt;Why no package?&lt;/h2&gt;
                &lt;p&gt;You might be wondering why I didn't package this up into a nice reusable nuget package for y'all to install. It's because THIS ISN'T IT! It isn't a silver bullet. It's boilerplate. You're bound to want to add your own varying states and preconditions to this setup. If I'd packaged it, we'd need an &amp;quot;OnThis&amp;quot;, &amp;quot;OnThat&amp;quot; and &amp;quot;OnWhatever&amp;quot; for everything that happens so you could extend it. I've done several PRs to the core to have Umbraco.Tests usable as it is now, and I don't want to create another such layer.&lt;/p&gt;
                &lt;p&gt;You might for instance have to fiddle a bit with &lt;code&gt;CreateApplicationContext()&lt;/code&gt;, and I'm quite sure that any sligtly advanced site will have to have tests setting up stuff in &lt;code&gt;FreezeResolution()&lt;/code&gt;. That'd be solvable with inheritance, but here we go again... ;)&lt;/p&gt;
                &lt;h2&gt;Next up&lt;/h2&gt;
                &lt;p&gt;There's a few doors that open when you extract everything out of your tests. I'm dying to show you more, but I'll have to leave a lame &amp;quot;to-be-continued&amp;quot; and hope I don't mess it up. Happy refactoring, and do go get that nuget package from @kedde!&lt;/p&gt;
            </description>
            <pubDate>Sat, 18 Mar 2017 22:21:23 Z</pubDate>
            <a10:updated>2017-03-18T22:21:23Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1113</guid>
            <link>http://blog.aabech.no/archive/rather-package-manager-console-than-print/</link>
            <title>Rather Package Manager Console than Print?</title>
            <description>
                &lt;p&gt;I don't know about you, but I printed my last sheet of code sometime during the mid-nineties. Yet when you press Ctrl+P in Visual Studio, guess what happens? You may print your code! I don't think I ever did that. If I ever printed a class diagram, I must have used the File-&amp;gt;Print menu item anyway.&lt;/p&gt;
                &lt;p&gt;What I do use often though, is the Nuget Package Manager Console. It bothered me that the console is purely for keyboard input, but you have to use the mouse to get to it. And Eureka! What better shortcut to get to the package manager console than Ctrl+P?&lt;/p&gt;
                &lt;p&gt;I know Ctrl+P is the recommended shortcut for printing across Windows (Command+P on mac?), but come on! I've gone and added a feature request on &lt;a href="https://visualstudio.uservoice.com/forums/121579-visual-studio-ide/suggestions/18361723-set-ctrl-p-to-be-shortcut-for-the-package-manager"&gt;uservoice.visualstudio.com&lt;/a&gt;, though I guess the recommendation beats usefulness.&lt;/p&gt;
                &lt;h2&gt;You can still do it&lt;/h2&gt;
                &lt;p&gt;If you know your way around Visual Studio and think this is a good idea, I guess you've already customized your environment. If you don't know how to do it, here's how:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1023/visualstudiooptions.png" alt="Visual Studio keyboard options, setting shortcut for package manager console" /&gt;&lt;/p&gt;
                &lt;ol&gt;
                &lt;li&gt;Open the Tools menu and select Options.
                &lt;/li&gt;
                &lt;li&gt;Navigate to Environment\Keyboard&lt;/li&gt;
                &lt;li&gt;Under &amp;quot;Show commands containing&amp;quot;, search for &amp;quot;View.PackageManagerConsole&amp;quot;&lt;/li&gt;
                &lt;li&gt;Under &amp;quot;Press shortcut keys&amp;quot;, hit Ctrl+P&lt;/li&gt;
                &lt;li&gt;Click &amp;quot;Assign&amp;quot;&lt;/li&gt;
                &lt;/ol&gt;
                &lt;p&gt;And there you go, you're ready to pop the package manager console with Ctrl+P.&lt;/p&gt;
            </description>
            <pubDate>Fri, 17 Feb 2017 11:30:32 Z</pubDate>
            <a10:updated>2017-02-17T11:30:32Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1107</guid>
            <link>http://blog.aabech.no/archive/how-to-kill-umbraco-with-urlrewritenet/</link>
            <title>How to kill Umbraco with UrlRewrite.Net</title>
            <description>
                &lt;h3&gt;The case&lt;/h3&gt;
                &lt;p&gt;Recently we were contacted by another Norwegian company who inherited a custom Umbraco solution. The original developer is off chasing green fields, so they came to us when the site restarted twice an hour. Something about CPU spikes... It had been upgraded to 7.5.4 and everything, so we could just start off clicking all the shiny new buttons in the health dashboard. Most &amp;quot;known&amp;quot; Azure fixes were already in place, and the rest was applied for good measure. Yet the problem persisted, so we knew we were facing a more dire problem.&lt;/p&gt;
                &lt;h3&gt;The proof&lt;/h3&gt;
                &lt;p&gt;Jumping onto the Azure graphs and logs, we could see a pattern of massive memory usage as well as the CPU. Here's a nice bouncy graph of the state of the S3(!) server.&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1022/spikes.png" alt="Spikes in memory and CPU" /&gt;&lt;/p&gt;
                &lt;p&gt;Going through the Umbraco logs, we found several restarts due to out of memory exceptions from seemingly unrelated calls. All of them seemed to correlate with the restarts and massive resource spikes. Some of them came from cached views, so we did an attemt to remove caching from the most varied pages. After all, Umbraco already has the content in memory, so how much CPU goes into rendering it? It was quickly dismissed though, the problem persisted.
                &lt;/p&gt;
                &lt;p&gt;We'd also spotted another suspect in the logs, namely UrlRewrite.Net. But at this point we were also ready to throw some profiling tools on the site. Somehow, none of JetBrains' tools worked. For some reason the views could not be rendered. I suspect it has something to do with the caching, profiling views or how the tools work. But I digress. We were able to run VS' profiler on it, and guess who turned up as our main suspect again?&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1020/cpuprofile.png" alt="Profiling UrlRewrite.Net with Umbraco" /&gt;&lt;/p&gt;
                &lt;p&gt;I think the table speaks for it self. The upper two calls are in idling background threads.
                They don't affect CPU at all. Having the system access the database for one second is within limits for several requests. But the rest of the CPU time was actually spent solely in UrlRewrite.Net and parsing of regular expressions. I could quickly verify we weren't the first seeing this after searching &lt;a href="http://our.umbraco.org"&gt;our.umbraco.org&lt;/a&gt; too.&lt;/p&gt;
                &lt;h3&gt;The fix&lt;/h3&gt;
                &lt;p&gt;Now don't go panic over your own UrlRewrites just yet. This site had more than 2.500 rewritten URLs buried in urlrewrite.config. After being made aware, our contractor cut it down to 150 more generalized regular expressions, and voila, there's been a steady 3% CPU usage since then.&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1021/flatout.png" alt="CPU flattening out after cutting urlrewrites to 150" /&gt;&lt;/p&gt;
                &lt;p&gt;I've been sceptical to people bad-mouthing UrlRewrite.Net in the past. We've never had many problems with it in our sites. But then again, we've never gone past 50 rewrite rules. (I think.) It's a great tool for its purpose, but as we've now witnessed, it can also do great harm when used wrong. It might be time for us to throw out the old IIS 6 servers and start using Microsoft's &lt;a href="https://www.iis.net/learn/extensions/url-rewrite-module/creating-rewrite-rules-for-the-url-rewrite-module"&gt;Url Rewrite Module&lt;/a&gt; instead.&lt;/p&gt;
                &lt;h3&gt;Alternatives&lt;/h3&gt;
                &lt;p&gt;But what should we do, then, when faced with situations where we have thousands of URLs to keep 301'ing? I'd guess you've got some kind of pattern there so you can simplify with catching regular expressions like we did here. Otherwise, you're probably better off &lt;a href="https://msdn.microsoft.com/en-us/library/ms227673.aspx"&gt;writing your own small HttpModule&lt;/a&gt; with some logic, rather than relying on generic rewriters and regex.&lt;/p&gt;
            </description>
            <pubDate>Mon, 09 Jan 2017 22:03:53 Z</pubDate>
            <a10:updated>2017-01-09T22:03:53Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1106</guid>
            <link>http://blog.aabech.no/archive/musings-on-null-objects-schemas-and-upgrades/</link>
            <title>Musings on null objects, schemas and upgrades</title>
            <description>
                &lt;h2&gt;My WTF of the day&lt;/h2&gt;
                &lt;p&gt;The day started with a form crashing on one of our sites.
                It's not an Umbraco Form, it's a form from an external marketing automation tool.
                (Who's name I shall not mention)&lt;br /&gt;
                A collection we test with &lt;code&gt;.Any(x =&amp;gt; x.Something)&lt;/code&gt; had suddenly become &lt;code&gt;null&lt;/code&gt; overnight.
                I hastily added a null check at the beginning of the predicate and got on with my day.
                It had to be some messup on their part of course, and I couldn't be bothered.
                The form worked again.&lt;/p&gt;
                &lt;p&gt;Later in the day, some other peeps at the office started panicking.
                Turns out all of the forms on several sites had broken down.
                They kept seeing the dreaded &amp;quot;macro failed to render&amp;quot; exception in Umbraco.
                We rolled up our sleeves and hacked in the extra null check on the rest of our sites.
                I actually noticed when I fixed the first one that it lost its nice layout,
                but for some reason I repressed it.&lt;/p&gt;
                &lt;h2&gt;Null objects would've saved the day&lt;/h2&gt;
                &lt;p&gt;The first thing I thought was that the third party had messed up by starting to return null.
                As long as the array was empty it would've worked. So I blamed them for not using a null object.&lt;/p&gt;
                &lt;p&gt;Thinking constructively, I figured I should as well blame myself. I should've translated the
                deserialized object to something where I had put in a null object.&lt;/p&gt;
                &lt;p&gt;In any case, the form would've rendered without columns if the array would have been empty.
                It defines groups of fields, or fieldsets if you will. And I figured none of our forms used that.
                (It's actually more like bootstrap columns, but that's beside the point)&lt;/p&gt;
                &lt;p&gt;If you're not familiar with the concept of null objects,
                I highly recommend reading up about it:&lt;br /&gt;
                &lt;a href="https://en.wikipedia.org/wiki/Null_Object_pattern"&gt;https://en.wikipedia.org/wiki/Null&lt;em&gt;Object&lt;/em&gt;pattern&lt;/a&gt;&lt;/p&gt;
                &lt;p&gt;It'll make you more happy if you hate writing &lt;code&gt;if (something != null)&lt;/code&gt; in half of your codebase.&lt;/p&gt;
                &lt;h2&gt;The real reason&lt;/h2&gt;
                &lt;p&gt;I'd complained about the array being null on the forum for the tool.
                When I went down to my cave preparing to write a nice article about null objects,
                I notice someone from the company had answered me. He'd checked the API and couldn't find any
                forms that returned null for that property.&lt;/p&gt;
                &lt;p&gt;Of course they hadn't changed from returning empty arrays to null.
                But they had done &lt;em&gt;something&lt;/em&gt;. Instead of checking the deserialized object in my unit tests,
                I started examining the actual response from the server.
                The real reason was of course that Newtonsoft JSON doesn't deserialize properties it doesn't know of.
                The property has changed its name overnight. The schema was all new.
                A plural &amp;quot;s&amp;quot; had been removed from the array property, and the properties of the collection object had also changed. &lt;/p&gt;
                &lt;p&gt;So I followed up with a new post where I referenced the documentation that clearly shows
                that the schema we follow is right. However, that was for a different method.
                There was another completely different schema for the one I was calling.
                After complaining about completely incoherent documentation, I discovered I was calling the first version of the API. The docs I referenced were for version 2. Digging my way to the v1 docs, I found that they didn't even mention said part of the schema.
                I'd found it because it was returned two years ago when I wrote the code.&lt;/p&gt;
                &lt;h2&gt;What I learned&lt;/h2&gt;
                &lt;p&gt;For one, I'll be even more adamant myself adding null objects to my business logic and services.
                Especially endpoints that someone might end up calling.&lt;/p&gt;
                &lt;p&gt;I also learned that if I ever notice something being deprecated, I should run off and upgrade ASAP.
                Even if you can trust people to keep an old version around until traffic disappears,
                you obviously can't expect them to let the schema stay stable for the that version. Although I'm guessing we're the last ones to leave v1 of the API. There was only me making noise on the forum tonight.&lt;/p&gt;
                &lt;p&gt;Still, my wish for today is that everyone starts using null objects and keep their public schemas intact.&lt;/p&gt;
            </description>
            <pubDate>Tue, 22 Nov 2016 21:02:49 Z</pubDate>
            <a10:updated>2016-11-22T21:02:49Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1105</guid>
            <link>http://blog.aabech.no/archive/meet-ufx-umbraco-forms-expressions/</link>
            <title>Meet UFX: Umbraco Forms Expressions</title>
            <description>
                &lt;h2&gt;TLDR; A demonstration&lt;/h2&gt;
                &lt;p&gt;If you're more of a video person, I've recorded a demonstration of the package. You can &lt;a href="#video"&gt;find it at the bottom of the post&lt;/a&gt;. :)&lt;/p&gt;
                &lt;h2&gt;The problem&lt;/h2&gt;
                &lt;p&gt;Recently we've been creating quite a few forms with Umbraco to support inbound strategies for our customers. They basically let the user input different financial or measurable values. When the form is posted, we do some calculations to provide the user with some useful feedback. We also check the value and decide whether the user is a useful lead to put into the CRM, or whether she should be offered a subscription to the newsletter instead.&lt;/p&gt;
                &lt;p&gt;For each of the calcluations, a developer has to hack up a new workflow type for Umbraco Forms. This means that for even the simplest calculations, we need the dev. team to schedule time for the customer. Wouldn't it be great if the business people themselves could do these calculations?&lt;/p&gt;
                &lt;h2&gt;Enter UFX&lt;/h2&gt;
                &lt;p&gt;A few years ago I was introduced to &lt;a href="http://irony.codeplex.com/"&gt;Irony&lt;/a&gt;. Irony is a language toolkit for the .net platform. With it we can build our own language grammars and according abstract syntax trees. Sadly, I couldn't invest much in it at the time, so it was left on the shelf for a while. I picked it up on my way to the Umbraco UK Festival, and fell in love again. So I started creating a package aptly called &amp;quot;Umbraco Forms Expression&amp;quot;, UFX for short. I'd blog about building this package, but I hardly understand what I'm doing myself. In any case, it's a small language for doing calculations on Umbraco Forms record values. It can be used to set field values based on calculations on other field values.&lt;/p&gt;
                &lt;p&gt;Let me take you through a loan calculator example where we calculate the total amount and monthly payment based on interest and terms. I hardly know my way around those formulas either, but if you're interested, &lt;a href="http://brownmath.com/bsci/loan.htm"&gt;this page&lt;/a&gt; holds a lot of good information.&lt;/p&gt;
                &lt;h2&gt;Building the loan calculator&lt;/h2&gt;
                &lt;p&gt;I started by building this simple form in Umbraco. It has text fields for amount, interest and terms, all validated as numbers (with decimals). There's also hidden fields for the total and monthly payment results:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1017/loan-form.png" alt="Form administration UI with fields" /&gt;&lt;/p&gt;
                &lt;p&gt;I took the liberty of allowing text pages below text pages in Fanoe, so I could add a result page with a macro. The macro just points to a partial view. In the partial view, I load up the record and show the interesting fields:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;@using Umbraco.Forms.Data.Storage
                @inherits Umbraco.Web.Macros.PartialViewMacroPage

                @{
                TempData.Keep(&amp;quot;Forms_Current_Record_id&amp;quot;);
                var recordId = (Guid)TempData[&amp;quot;Forms_Current_Record_id&amp;quot;];
                var record = new RecordStorage().GetRecordByUniqueId(recordId);
                }

                &amp;lt;h1&amp;gt;Your loan would amount to&amp;lt;/h1&amp;gt;
                &amp;lt;p&amp;gt;&amp;lt;label&amp;gt;Loaned amount:&amp;lt;/label&amp;gt; &amp;lt;span&amp;gt;@record.GetRecordField(&amp;quot;loan amount&amp;quot;).ValuesAsString()&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;&amp;lt;label&amp;gt;Total amount: &amp;lt;/label&amp;gt; &amp;lt;span&amp;gt;@record.GetRecordField(&amp;quot;total amount&amp;quot;).ValuesAsString()&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;&amp;lt;label&amp;gt;Monthly payment: &amp;lt;/label&amp;gt; &amp;lt;span&amp;gt;@record.GetRecordField(&amp;quot;monthly payment&amp;quot;).ValuesAsString()&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;When the user visits the calculator, she'll fill out the amount, interest and terms.
                Sending the form yields the very little interesting repetition of the amount:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1015/result-page.png" alt="Result without calculation" /&gt;&lt;/p&gt;
                &lt;p&gt;Granted, we could've put the calculation in the results, but then we couldn't have re-used workflows that push the record values to a CRM for instance.&lt;/p&gt;
                &lt;h2&gt;Using UFX&lt;/h2&gt;
                &lt;p&gt;To add the calculation without coding, we add the new UFX Expression workflow to the form:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1019/new-workflow.png" alt="UFX Expression in workflow palette" /&gt;&lt;/p&gt;
                &lt;p&gt;It opens with one setting: the program. You can enter a formula directly in the &lt;a href="https://ace.c9.io/#nav=about"&gt;Ace editor&lt;/a&gt; here if you feel confident.&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1016/workflow-settings.png" alt="UFX program setting" /&gt;&lt;/p&gt;
                &lt;p&gt;For complex expressions though, a workbench is needed. Clicking the small fullscreenish button just above the program box opens a full view of the program, and lets you test the expression using different values.
                When entering a program into the editor, textboxes appear on the right hand side for each field you use in the expression. Fields are referenced using square brackets as such: &lt;code&gt;[loan amount]&lt;/code&gt;.&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1014/program-workbench.png" alt="UFX workbench" /&gt;&lt;/p&gt;
                &lt;p&gt;Clicking the run button in the bottom right runs the calculation on the server and displays updated fields and their values. Notice you can add as many variables you'd like.&lt;/p&gt;
                &lt;p&gt;And that's it, really. Saving the form with this workflow makes it so the calculation is done as part of the workflow evaluation. Adding workflows after it lets you put the loan total and montly fee in external systems, as well as reference them in e-mails to the user or administrator.&lt;/p&gt;
                &lt;p&gt;Here's a shot of the result page with the workflow in place:&lt;/p&gt;
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1018/macro-with-workflow.png" alt="Form results after adding workflow" /&gt;&lt;/p&gt;
                &lt;h2&gt;Current limitations&lt;/h2&gt;
                &lt;p&gt;First of all, this is open source! I'll gladly welcome help making the UI more polished for starters. My ambitions for the language is to keep it dead simple, so don't expect me to pull a full C# implementation.&lt;/p&gt;
                &lt;p&gt;For now it only does math on numeric field values. There's a few math functions included. I'll include more when they're needed. It's all documented in &lt;a href="https://github.com/lars-erik/our-umbraco-forms-expressions/wiki"&gt;the wiki&lt;/a&gt; on the &lt;a href="https://github.com/lars-erik/our-umbraco-forms-expressions"&gt;github site&lt;/a&gt;.&lt;/p&gt;
                &lt;p&gt;I'll leave the package in beta, hoping for some good feedback. Reach out to me on twitter, or add some feedback on the &lt;a href="https://github.com/lars-erik/our-umbraco-forms-expressions/issues"&gt;issue tracker&lt;/a&gt;. Looking forward to hearing from you! :)&lt;/p&gt;
                &lt;h2&gt;Next steps&lt;/h2&gt;
                &lt;p&gt;There's obvious next steps for this. Boolean values for one. Conditionals on numbers, bools or even strings can well be introduced. It's all fairly easy since Irony comes with a lot of basic language constructs to re-use. &lt;/p&gt;
                &lt;p&gt;A worflow setting letting you execute the workflow based on a program returning a boolean can also be spotted on the horizon if you squint.&lt;/p&gt;
                &lt;p&gt;Incidentally, I've also got another idea codenamed UQL I might pick up in the mean time. I'll let you guess what it'll do for now. It might surface within a few weeks.&lt;/p&gt;
                &lt;p&gt;Again, I'd like to take this slow, keep it simple and evolve based on real needs. Keep the feedback coming, and do pitch in if you find this kind of thing interesting.&lt;/p&gt;
                &lt;p&gt;&lt;a id="video"&gt;&lt;/a&gt;&lt;/p&gt;
                &lt;h2&gt;Video demonstration&lt;/h2&gt;
                &lt;p&gt;Here's one for the lazy ones:&lt;/p&gt;
                &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LxSLPbkMEoM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
            </description>
            <pubDate>Sun, 13 Nov 2016 20:27:17 Z</pubDate>
            <a10:updated>2016-11-13T20:27:17Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1097</guid>
            <link>http://blog.aabech.no/archive/marrying-ditto-with-modelsbuilder/</link>
            <title>Marrying Ditto with ModelsBuilder</title>
            <description>
                &lt;p&gt;I was happy to be allowed to speak at this years Umbraco UK Festival.&lt;br /&gt;
                The topic was based on my &lt;a href="//blog.aabech.no/archive/comparing-modelsbuilder-and-ditto/"&gt;previous post where I compare Ditto and ModelsBuilder&lt;/a&gt;.
                While preparing for that talk, I couldn't help but notice that the tools and techniques
                aren't mutually exclusive at all. On the contrary, they can compliment each other in a really nice way.&lt;br /&gt;
                &lt;em&gt;&lt;a href="#further-info"&gt;Slides and video from presentation linked further down&lt;/a&gt;.&lt;/em&gt;
                &lt;/p&gt;
                &lt;p&gt;I won't dive into too many details in this article, I recommend you &lt;a href="//blog.aabech.no/archive/comparing-modelsbuilder-and-ditto/"&gt;read the previous article&lt;/a&gt;,
                and take a swim through the code at &lt;a href="https://github.com/lars-erik/DittoDemoModelsBuilderified"&gt;the github repository&lt;/a&gt;.&lt;/p&gt;
                &lt;h3&gt;Cleaning up the processors&lt;/h3&gt;
                &lt;p&gt;In the Dittoified TXT site Matt Brailsford made, we saw a bunch of processors querying the hierarchy.
                In my Modelsbuilderified version, we do nice and clean domain oriented queries.&lt;/p&gt;
                &lt;p&gt;Take for instance the top navigation on the site, where we look up all the visible children of the home page.
                The Ditto processor looks as such:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class MainNavAttribute : DittoProcessorAttribute
                {
                public override object ProcessValue()
                {
                var content = Value as IPublishedContent;
                if (content == null) return Enumerable.Empty&amp;lt;NavLink&amp;gt;();

                var homePage = content.AncestorsOrSelf(1).First();
                return new[] { homePage }.Union(homePage.Children.Where(x =&amp;gt; x.IsVisible()));
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;With ModelsBuilder, we point to the homepage from the base document type,
                and implemented the navigation items query on the homepage:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public partial class UmbHomePage
                {
                IEnumerable&amp;lt;INavigationContent&amp;gt; INavigation.MenuItems
                {
                get
                {
                return new[] { this }
                .Union(
                Children
                .OfType&amp;lt;INavigationContent&amp;gt;()
                .Where(c =&amp;gt; c.IsVisible)
                );
                }
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;What we keep forgetting though, is that the ModelsBuilder models are created before the content leaves the cache.
                If we install Ditto in the ModelsBuilderified version, or vice versa, we can actually use that MB query in the processor.
                Whether we'd like to keep the query and interface segregation on our ModelsBuilder classes,
                or we'd like to put most logic in the Ditto processors is still a matter of taste.&lt;/p&gt;
                &lt;p&gt;However, by just letting MB generate its models in the Dittoified project, not writing one single interface,
                we can refactor the &lt;code&gt;MainNavAttribute&lt;/code&gt; as such:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class MainNavAttribute : DittoProcessorAttribute
                {
                public override object ProcessValue()
                {
                var content = Value as IPublishedContent;
                if (content == null) return Enumerable.Empty&amp;lt;NavLink&amp;gt;();

                var homePage = content.AncestorOrSelf&amp;lt;UmbHomePage&amp;gt;();
                return new[] { homePage }.Union(homePage.Children.Where(x =&amp;gt; x.IsVisible()));
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The same can be done to the &lt;code&gt;BaseNewsProcessorAttribute&lt;/code&gt; with even more &amp;quot;domain language&amp;quot;:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public abstract class BaseNewsAttribute : DittoProcessorAttribute
                {
                protected IEnumerable&amp;lt;UmbNewsItem&amp;gt; GetNews()
                {
                var content = Value as UmbMaster;
                if (content == null) return Enumerable.Empty&amp;lt;UmbNewsItem&amp;gt;();

                var newsArchive = content.Home.FirstChild&amp;lt;UmbNewsOverview&amp;gt;();
                if (newsArchive == null) return Enumerable.Empty&amp;lt;UmbNewsItem&amp;gt;();

                return newsArchive.Children&amp;lt;UmbNewsItem&amp;gt;()
                .OrderByDescending(x =&amp;gt; x.DisplayDate);
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;You'll notice I've added the &lt;code&gt;DisplayDate&lt;/code&gt; implementation to &lt;code&gt;UmbNewsItem&lt;/code&gt; so we don't need to
                think about the &lt;code&gt;PublishDate&lt;/code&gt; and &lt;code&gt;CreateDate&lt;/code&gt; properties every time we do ordering.&lt;/p&gt;
                &lt;h3&gt;Where to start&lt;/h3&gt;
                &lt;p&gt;I'd recommend that if you don't use either tool today, you should really just start using ModelsBuilder.
                It will improve your code immensly over using magic strings, level-based queries and all that comes
                with the basic IPublishedContent implementation. When you start to see that you want more
                separation of concerns and interfaces don't do that for you, look into adding Ditto on top.&lt;/p&gt;
                &lt;h3&gt;Serialization&lt;/h3&gt;
                &lt;p&gt;The main pain point of using ModelsBuilder today is that &lt;code&gt;IPublishedContent&lt;/code&gt; implementations
                lend themselves badly to serialization. Serializing it without care will lead to cyclic references
                and/or super big graphs of parents and children.&lt;/p&gt;
                &lt;p&gt;By mapping the content to POCOs with Ditto, you don't have to care about this.&lt;/p&gt;
                &lt;h3&gt;Strike a balance&lt;/h3&gt;
                &lt;p&gt;In my opinion, one can go way too far with the processors in Ditto.
                Separation of concerns is good, but not at the cost of having to wade through 10-20 classes for
                one coherent piece of functionality.&lt;/p&gt;
                &lt;p&gt;The same can be said about ModelsBuilder. Creating too many compositions, adding to many interfaces,
                creating too many extensions can be just as overwhelming.&lt;/p&gt;
                &lt;p&gt;It basically boils down to the &lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;good old YAGNI principle&lt;/a&gt;.&lt;/p&gt;
                &lt;h3&gt;Further exploration&lt;/h3&gt;
                &lt;p&gt;&lt;a id="further-info"&gt;&lt;/a&gt;
                The examples in this article is &lt;a href="https://github.com/lars-erik/DittoDemoModelsBuilderified/tree/can-i-haz-both"&gt;avaiable in a branch on GitHub&lt;/a&gt;.&lt;br /&gt;
                I also did a presentation comparing the two tools, and marrying them at last at this years Umbraco UK Festival.&lt;br /&gt;
                &lt;a href="https://www.youtube.com/watch?v=dNZG4DOk6Vk"&gt;The presentation can be seen on YouTube&lt;/a&gt;.&lt;br /&gt;
                &lt;a href="https://1drv.ms/p/s!AnYHs3nuLdwBjo1k2EJOTJ4IYrOwLA"&gt;The slides from the presentation are available here&lt;/a&gt;.&lt;/p&gt;
            </description>
            <pubDate>Sat, 05 Nov 2016 17:00:29 Z</pubDate>
            <a10:updated>2016-11-05T17:00:29Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1096</guid>
            <link>http://blog.aabech.no/archive/comparing-modelsbuilder-and-ditto/</link>
            <title>Comparing ModelsBuilder and Ditto</title>
            <description>
                &lt;p&gt;If you've been reading &lt;a href="http://blog.aabech.no/archive/getting-real-business-value-from-strongly-typed-models-in-umbraco/"&gt;my articles about typed models in Umbraco&lt;/a&gt;, you'll know I'm fairly biased towards ModelsBuilder. However, I never actually tried &lt;a href="https://our.umbraco.org/projects/developer-tools/ditto/"&gt;Ditto&lt;/a&gt;. I'll admit I didn't know exactly what I was telling you not to do in &amp;quot;&lt;a href="http://skrift.io/articles/archive/stop-mapping-start-adapting/"&gt;stop mapping, start adapting&lt;/a&gt;&amp;quot;. But I decided it was time to get dirty and do a comparison between the two. I'm still biased, but I'll do my best to stay objective.&lt;/p&gt;
                &lt;p&gt;This comparison is based on &lt;a href="https://our.umbraco.org/member/5518"&gt;Matt Brailsford&lt;/a&gt;'s Ditto demo. He's &amp;quot;Dittoified&amp;quot; the TXT starter kit in Umbraco, and I've tried my best to &amp;quot;ModelsBuilderify&amp;quot; the same.&lt;/p&gt;
                &lt;p&gt;There's only so much I could do in between my other projects, so it's fairly naïve. It misses some of the strong parts of what you can do with each approach in Umbraco. However, I hope I've been able to outline the main differences and their respective pros and cons.&lt;/p&gt;
                &lt;p&gt;All of the code for this post is &lt;a href="https://github.com/lars-erik/DittoDemoModelsBuilderified"&gt;available on github&lt;/a&gt;.&lt;/p&gt;
                &lt;h2&gt;The project setup&lt;/h2&gt;
                &lt;p&gt;The demo is built as a &amp;quot;website&amp;quot; in Visual Studio. This means we don't build, the binary files are included in source control, code lives in &lt;code&gt;App_Code&lt;/code&gt; and whatnot. I'm not comfortable with that setup, but I'll live with it for the purpose of this post.&lt;/p&gt;
                &lt;h2&gt;Handwritten code or not&lt;/h2&gt;
                &lt;p&gt;I could argue that you'd hand write everything for Ditto and get everything for free with ModelsBuilder. It has a big fallacy though. To get the most out of ModelsBuilder, you'll write a lot of property value types, converters and not least interfaces. However, you'll get a slight increase in efficiency by using the &amp;quot;extract interface&amp;quot; refactoring of any refactoring tool for the latter. Property value types and converters goes for Ditto too. There's no big win or loss here.&lt;/p&gt;
                &lt;h2&gt;Getting started&lt;/h2&gt;
                &lt;p&gt;ModelsBuilder is bundled with Umbraco. Ditto can be installed from nuget. Both tools depend on &lt;a href="https://our.umbraco.org/documentation/extending/property-editors/value-converters"&gt;property value converters&lt;/a&gt; in Umbraco. Which means they both also basically rely on &lt;a href="https://our.umbraco.org/projects/developer-tools/umbraco-core-property-value-converters"&gt;Jeavon Leopold's Umbraco Core Property Value Converters&lt;/a&gt;, which is also about to be bundled, but can be installed from nuget for now. &lt;/p&gt;
                &lt;p&gt;As far as I can gather, there's no configuration needed for Ditto.&lt;/p&gt;
                &lt;p&gt;For ModelsBuilder, you'll have to enable it in web.config. It's a matter of flipping &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in an app setting. But to make it truly useful, I set it to &lt;code&gt;AppData&lt;/code&gt; mode and point the models to a sensible location.&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;&amp;lt;add key=&amp;quot;Umbraco.ModelsBuilder.Enable&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;
                &amp;lt;add key=&amp;quot;Umbraco.ModelsBuilder.ModelsMode&amp;quot; value=&amp;quot;AppData&amp;quot; /&amp;gt;
                &amp;lt;add key=&amp;quot;Umbraco.ModelsBuilder.ModelsDirectory&amp;quot; value=&amp;quot;~/App_Code/Models&amp;quot; /&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;&lt;em&gt;If this wasn't a website project, I'd put the models in &lt;code&gt;~/Models&lt;/code&gt;. There's also options to put them in an entirely different assembly. I'd also set a better namespace for the models.&lt;/em&gt;&lt;/p&gt;
                &lt;p&gt;&lt;strong&gt;If you're getting content in a controller or such and wonder how you get it typed, don't worry. You just have to cast it. For some reason people fail to understand this. When ModelsBuilder is active, you can't not get typed models. The content is decorated (typed) before it leaves the content cache.&lt;/strong&gt;&lt;/p&gt;
                &lt;h2&gt;Views&lt;/h2&gt;
                &lt;p&gt;Both approaches uses generic view types instead of &lt;code&gt;UmbracoTemplatePage&lt;/code&gt; as the base class.
                For Ditto you'll use &lt;code&gt;DittoView&amp;lt;TModel&amp;gt;&lt;/code&gt; or a class derived from it.
                For ModelsBuilder, it's &lt;code&gt;UmbracoTemplatePage&amp;lt;TModel&amp;gt;&lt;/code&gt; or a derived class.
                The top of your views now require:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;@inherits OneOrTheOther&amp;lt;TypedModel&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The &lt;code&gt;Model&lt;/code&gt; property of our views will then look like this for each tool:&lt;/p&gt;
                &lt;table&gt;
                &lt;thead&gt;
                &lt;tr&gt;&lt;th&gt;Ditto&lt;/th&gt;&lt;th&gt;ModelsBuilder&lt;/th&gt;&lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                &lt;tr&gt;&lt;td&gt;Culture (&lt;code&gt;CultureInfo&lt;/code&gt;)&lt;/td&gt;&lt;td&gt;Culture (&lt;code&gt;CultureInfo&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;Content (&lt;code&gt;IPublishedContent&lt;/code&gt;)&lt;/td&gt;&lt;td&gt;Content (&lt;code&gt;TModel&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;View (&lt;code&gt;TModel&lt;/code&gt;)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
                &lt;/tbody&gt;
                &lt;/table&gt;
                &lt;p&gt;One important distinction is that the ModelsBuilder &lt;code&gt;TModel&lt;/code&gt; implements &lt;code&gt;IPublishedContent&lt;/code&gt;, while Ditto has the typed model in a separate POCO (plain old C# object). I guess it's a matter of taste whether you like one or the other.&lt;/p&gt;
                &lt;p&gt;I compared them using &lt;code&gt;UmbracoTemplatePage&amp;lt;TModel&amp;gt;&lt;/code&gt; here for similarity's sake. However, with ModelsBuilder you can actually make it simpler by inheriting &lt;code&gt;UmbracoViewPage&amp;lt;TModel&amp;gt;&lt;/code&gt;. This will make the model the actual &lt;code&gt;TModel&lt;/code&gt; instead of a &lt;code&gt;RenderModel&amp;lt;TModel&amp;gt;&lt;/code&gt;. For the rest of the comparison, that's what I'll do. (I don't really care about the &lt;code&gt;Culture&lt;/code&gt; since it's already in &lt;code&gt;this.Culture&lt;/code&gt;. No need to add it to a model and get an extra train cart when referencing properties.)&lt;/p&gt;
                &lt;p&gt;There's one obvious quirk with anything that goes into an &lt;code&gt;UmbracoViewPage&lt;/code&gt;: It has to be &lt;code&gt;IPublishedContent&lt;/code&gt;. By creating another Razor base class, that can easily be avoided.&lt;/p&gt;
                &lt;p&gt;The one less train cart is a slight win in my opinion.&lt;/p&gt;
                &lt;p&gt;You'll either go &lt;code&gt;Model.View.Property&lt;/code&gt; or &lt;code&gt;Model.Property&lt;/code&gt;.&lt;/p&gt;
                &lt;h2&gt;UmbTextPage&lt;/h2&gt;
                &lt;p&gt;Let's dive in and look at how the different document types in TXT looks with both. UmbTextPage is the bread and butter of the site. We'll look at the Master view and UmbHome type a bit later since there's more complex things going on there.&lt;/p&gt;
                &lt;p&gt;Ditto uses the slim hand-written model &lt;code&gt;TextPageViewModel&lt;/code&gt;. ModelsBuilder uses the more verbose generated &lt;code&gt;UmbTextPage&lt;/code&gt;. They look like this:&lt;/p&gt;
                &lt;h3&gt;Ditto&lt;/h3&gt;
                &lt;pre&gt;&lt;code&gt;public class TextPageViewModel
                {
                [Title]
                public string Title { get; set; }
                public string Image { get; set; }
                public HtmlString BodyText { get; set; }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h3&gt;ModelsBuilder&lt;/h3&gt;
                &lt;pre&gt;&lt;code&gt;//------------------------------------------------------------------------------
                // &amp;lt;auto-generated&amp;gt;
                //   This code was generated by a tool.
                //
                //    Umbraco.ModelsBuilder v3.0.4.0
                //
                //   Changes to this file will be lost if the code is regenerated.
                // &amp;lt;/auto-generated&amp;gt;
                //------------------------------------------------------------------------------
                [PublishedContentModel(&amp;quot;umbTextPage&amp;quot;)]
                public partial class UmbTextPage : UmbMaster
                {
                // omitted ctors

                ///&amp;lt;summary&amp;gt;
                /// Content
                ///&amp;lt;/summary&amp;gt;
                [ImplementPropertyType(&amp;quot;bodyText&amp;quot;)]
                public IHtmlString BodyText
                {
                get { return this.GetPropertyValue&amp;lt;IHtmlString&amp;gt;(&amp;quot;bodyText&amp;quot;); }
                }

                ///&amp;lt;summary&amp;gt;
                /// Featured Page?: Is this a page that should be featured on the home page?
                ///&amp;lt;/summary&amp;gt;
                [ImplementPropertyType(&amp;quot;featuredPage&amp;quot;)]
                public bool FeaturedPage
                {
                get { return this.GetPropertyValue&amp;lt;bool&amp;gt;(&amp;quot;featuredPage&amp;quot;); }
                }

                ///&amp;lt;summary&amp;gt;
                /// Image
                ///&amp;lt;/summary&amp;gt;
                [ImplementPropertyType(&amp;quot;image&amp;quot;)]
                public object Image
                {
                get { return this.GetPropertyValue(&amp;quot;image&amp;quot;); }
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;On first glance, the ModelsBuilder class has a lot of stuff in it compared to the Ditto class. Remember that the ModelsBuilder one is autogenerated. You'll never poke around within that file. Notice that it's partial, so you can add to it in your own clean file. One other nice feature in it is that it adds the description of each property as an XmlDoc comment. You'll get the description of each property as IntelliSense when you go &lt;code&gt;Model.[ctrl+space]&lt;/code&gt;.&lt;/p&gt;
                &lt;p&gt;You probably noticed that they differ in which properties they contain. The Ditto model leaves the &lt;code&gt;FeaturedPage&lt;/code&gt; property out, and the ModelsBuilder one leaves out the &lt;code&gt;Title&lt;/code&gt;.&lt;/p&gt;
                &lt;p&gt;The Ditto model is meant to be a clean view model for the UmbTextPage template, where &lt;code&gt;FeaturePage&lt;/code&gt; is completely irrelevant. So you've only got what you need to display the details of a text page in that model. &lt;/p&gt;
                &lt;p&gt;The ModelsBuilder model is an exact typed replica of the document type. It inherits &lt;code&gt;UmbMaster&lt;/code&gt;, so naturally it also inherits the &lt;code&gt;Title&lt;/code&gt; property from it. We can get a clean model based on this class too, but we'll get to that later.&lt;/p&gt;
                &lt;p&gt;Now what about that &lt;code&gt;[Title]&lt;/code&gt; attribute on the &lt;code&gt;Title&lt;/code&gt; property in the Ditto model? Seems a bit verbose doesn't it? It actually has a really useful purpose, which we'll look at when we get to &lt;code&gt;UmbMaster&lt;/code&gt;. &lt;/p&gt;
                &lt;p&gt;For now, let's do a quick comparison of the property references in the views. You'll notice I've called the ModelsBuilder Title &lt;code&gt;DisplayTitle&lt;/code&gt;. We'll get to that soon. There's also the issue of a missing value converter for the Upload property type. I'm lazy, so it's an &lt;code&gt;object&lt;/code&gt;, hence the extra clutter.&lt;/p&gt;
                &lt;table&gt;
                &lt;thead&gt;
                &lt;tr&gt;&lt;th&gt;Ditto&lt;/th&gt;&lt;th&gt;ModelsBuilder&lt;/th&gt;&lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                &lt;tr&gt;&lt;td&gt;Model.View.Title&lt;/td&gt;&lt;td&gt;Model.DisplayTitle&lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;
                if (!Model.View.Image.IsNullOrWhiteSpace())
                {
                &amp;lt;img src="@Model.View.Image"&amp;gt;
                }
                &lt;/td&gt;&lt;td&gt;
                if (!(Model.Image ?? "").ToString().IsNullOrWhiteSpace())
                {
                &amp;lt;img src="@Model.Image"&amp;gt;
                }
                &lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;@Model.View.BodyText&lt;/td&gt;&lt;td&gt;Model.BodyText&lt;/td&gt;&lt;/tr&gt;
                &lt;/tbody&gt;
                &lt;/table&gt;
                &lt;p&gt;Not much to complain about here. They both have their merits, although with a string for the Image property, I'd vote for one less train cart.&lt;/p&gt;
                &lt;h2&gt;[Title] Title or DisplayTitle&lt;/h2&gt;
                &lt;p&gt;Let's dive a bit deeper into the common parts of all pages. We'll start with the title. It's quirky with both due to the fact that we'd like it to fall back to the name of a document if title isn't filled out.&lt;/p&gt;
                &lt;h3&gt;Ditto&lt;/h3&gt;
                &lt;p&gt;Ditto uses something called &amp;quot;processors&amp;quot; which is hooked up using attributes. The attribute classes contains logic for how a value should be transformed when mapped to a POCO. The title attribute looks like this:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public class TitleAttribute : DittoMultiProcessorAttribute
                {
                public string TitleAttr { get; set; }

                public TitleAttribute()
                : base(Enumerable.Empty&amp;lt;DittoProcessorAttribute&amp;gt;())
                {
                base.Attributes.AddRange(new[] {
                new UmbracoPropertyAttribute(TitleAttr),
                new AltUmbracoPropertyAttribute(&amp;quot;Name&amp;quot;)
                });
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;It re-uses two more attributes that specify which properties to use in order. I find this class a bit hard to get at first glance, but I'm sure I'd get it immediately if I used Ditto daily. A cool thing about it is that it's re-usable across POCOs and will always set the property to Title, or Name if Title is empty. It's also there in the demo to show how one can add a chain of fallbacks. The same functionality could have been added to the DTO with this slightly less contextful attribute instead:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;[UmbracoProperty(&amp;quot;title&amp;quot;, &amp;quot;name&amp;quot;)]
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h3&gt;ModelsBuilder&lt;/h3&gt;
                &lt;p&gt;With ModelsBuilder I added a new property called &lt;code&gt;DisplayTitle&lt;/code&gt; to &lt;code&gt;UmbMaster&lt;/code&gt;, and thereby all document types inheriting it:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;public string DisplayTitle
                {
                get { return Title.IfNullOrWhiteSpace(Name); }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Thus far, I dub the latter a clear winner in obviousness, but maybe not in naming. That can be solved, but in the interest of time and length of this post, I'll leave it for now. They're also equally re-usable as such.&lt;/p&gt;
                &lt;h2&gt;The master: umbLayout&lt;/h2&gt;
                &lt;p&gt;Now that we've seen a few differences, let's have a look at the bigger picture. We'll start at the top of umbLayout. Ditto of course has an individual view model, &lt;code&gt;LayoutViewModel&lt;/code&gt; for the layout. With ModelsBuilder, I've extracted an interface from &lt;code&gt;UmbMaster&lt;/code&gt; and called it &lt;code&gt;ISiteContent&lt;/code&gt;. There's another processor for Ditto's model, and there's some more stuff in the ModelsBuilder partial:&lt;/p&gt;
                &lt;h3&gt;Ditto&lt;/h3&gt;
                &lt;pre&gt;&lt;code&gt;// LayoutViewModel.cs
                [UmbracoProperties(Recursive = true)]
                public class LayoutViewModel
                {
                public string SiteName { get; set; }
                public string Byline { get; set; }
                public string Copyright { get; set; }
                [HomeLink]
                public Link HomeLink { get; set; }
                }

                // HomeLinkAttribute.cs
                public class HomeLinkAttribute : DittoProcessorAttribute
                {
                public override object ProcessValue()
                {
                var content = Value as IPublishedContent;
                if (content == null) return null;

                return content.AncestorOrSelf(1);
                }
                }

                // Link.cs
                public class Link
                {
                [UmbracoProperty(&amp;quot;Name&amp;quot;, Order = 0)]
                public string Title { get; set; }
                public string Url { get; set; }
                [UrlTarget]
                public string UrlTarget { get; set; }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h3&gt;ModelsBuilder&lt;/h3&gt;
                &lt;pre&gt;&lt;code&gt;// ISiteContent.cs
                public interface ISiteContent : IPublishedContent
                {
                UmbHomePage Home { get; }
                string DisplayTitle { get; }
                }

                // UmbMaster.cs
                public partial class UmbMaster : ISiteContent, ...
                {
                private UmbHomePage home = null;
                public UmbHomePage Home
                {
                get
                {
                if (home == null)
                home = this.AncestorOrSelf&amp;lt;UmbHomePage&amp;gt;();
                return home;
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;The &lt;code&gt;LayoutViewModel&lt;/code&gt; uses a built-in attribute in Ditto that says it should recurse up the tree for all the properties on the view model. It also has a hand-written processor that locates the Home node and maps it to a Link POCO. The Link POCO goes on and does some more processing and mapping. I'll not follow it further, but it's pretty magic and cool. Whenever whatever document is shown, Ditto can create a layout model for it based on its Home ancestor.&lt;/p&gt;
                &lt;p&gt;With &lt;code&gt;UmbMaster&lt;/code&gt; I've cached up the Home ancestor whenever you access it. It'll be available as a train cart on all pages. &lt;code&gt;ISiteContent&lt;/code&gt; acts as a slimmer view model if you want, for all types. Hence it can be used in umbLayout. The difference from Ditto is that it also IS your actual content.&lt;/p&gt;
                &lt;p&gt;Let's look at how they're used in the view.&lt;/p&gt;
                &lt;table&gt;
                &lt;thead&gt;
                &lt;tr&gt;&lt;th&gt;Use case&lt;/th&gt;&lt;th&gt;Ditto&lt;/th&gt;&lt;th&gt;ModelsBuilder&lt;/th&gt;&lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                &lt;tr&gt;&lt;td&gt;Title tag&lt;/td&gt;&lt;td&gt;Model.CurrentPage.Name | Model.View.SiteName&lt;/td&gt;&lt;td&gt;Model.DisplayTitle | Model.Home.SiteName&lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;Home URL&lt;/td&gt;&lt;td&gt;Model.View.HomeLink.Url&lt;/td&gt;&lt;td&gt;Model.Home.Url&lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;Logo&lt;/td&gt;&lt;td&gt;Model.View.SiteName&lt;/td&gt;&lt;td&gt;Model.Home.SiteName&lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;Byline&lt;/td&gt;&lt;td&gt;Model.View.Byline&lt;/td&gt;&lt;td&gt;Model.Home.Byline&lt;/td&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td&gt;Copyright&lt;/td&gt;&lt;td&gt;Model.View.Copyright&lt;/td&gt;&lt;td&gt;Model.Home.Copyright&lt;/td&gt;&lt;/tr&gt;
                &lt;/tbody&gt;
                &lt;/table&gt;
                &lt;p&gt;It's a pretty darn close race. I think Matt just forgot to add the [Title]Title to the view model, 'cause he's missing out on the fallback there. Might be I'm too eager and the original TXT just showed the name though. In any case, it's just a matter of one more or one less train cart again.&lt;/p&gt;
                &lt;p&gt;I'm slightly biased towards the reference to Home. It makes it more obvious where the value comes from. We also just traverse the hierarchy once, instead of for all properties.&lt;/p&gt;
                &lt;p&gt;But we're also starting to see a growth in code amount on the Ditto side. There's more processors, more POCOs and more logic to follow if we want to figure out what happens. That's a slight win for ModelsBuilder in my opinion. Weight should be given the magic coolness of Ditto's processors though.&lt;/p&gt;
                &lt;h2&gt;The partials&lt;/h2&gt;
                &lt;p&gt;There's a lot more going on in umbLayout. For starters, there's the navigation. You can probably guess by now that Ditto's got a &lt;code&gt;TopNavigationViewModel&lt;/code&gt;. On the ModelsBuilder side, we've got an &lt;code&gt;INavigation&lt;/code&gt; interface. I've added &lt;code&gt;INavigation&lt;/code&gt; to &lt;code&gt;UmbMaster&lt;/code&gt; so all documents implements navigation. We could've stuck it on home only, but there's something to demonstrate here. We'll see the other option next.&lt;/p&gt;
                &lt;p&gt;Let's look at the implementations first:&lt;/p&gt;
                &lt;h3&gt;Ditto&lt;/h3&gt;
                &lt;pre&gt;&lt;code&gt;// TopNavigationViewModel.cs
                public class TopNavigationViewModel
                {
                [MainNav]
                public IEnumerable&amp;lt;NavLink&amp;gt; MenuItems { get; set; }
                }

                // MainNavAttribute.cs
                public class MainNavAttribute : DittoProcessorAttribute
                {
                public override object ProcessValue()
                {
                var content = Value as IPublishedContent;
                if (content == null) return Enumerable.Empty&amp;lt;NavLink&amp;gt;();

                var homePage = content.AncestorsOrSelf(1).First();
                return new[] { homePage }
                .Union(
                homePage.Children
                .Where(x =&amp;gt; x.IsVisible())
                );
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h3&gt;ModelsBuilder&lt;/h3&gt;
                &lt;pre&gt;&lt;code&gt;// INavigation.cs
                public interface INavigation : IPublishedContent
                {
                IEnumerable&amp;lt;ISiteContent&amp;gt; MenuItems { get; }
                }

                // UmbMaster.cs
                public partial class UmbMaster : ISiteContent, INavigation
                {
                // Home &amp;amp; DisplayTitle omitted...

                IEnumerable&amp;lt;ISiteContent&amp;gt; INavigation.MenuItems
                {
                get { return home.MenuItems; }
                }
                }

                // UmbHome.cs
                public class UmbHome : INavigation, ...
                {
                // Quite a lot omitted...

                public IEnumerable&amp;lt;ISiteContent&amp;gt; MenuItems
                {
                get
                {
                return new[] {this}
                .Union(
                Children
                .OfType&amp;lt;ISiteContent&amp;gt;()
                .Where(c =&amp;gt; c.IsVisible())
                );
                }
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;As you can see, Ditto keeps processing and separating concerns. That's a really good feature with Ditto - it really makes you adhere to the &lt;a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;Single Responsibility Principle&lt;/a&gt;. I like that as much as I like the &lt;a href="https://en.wikipedia.org/wiki/Interface_segregation_principle"&gt;Interface Segregation Principle&lt;/a&gt;. &lt;/p&gt;
                &lt;p&gt;On the ModelsBuilder side, I've done a little dispatch from &lt;code&gt;UmbMaster&lt;/code&gt; to &lt;code&gt;UmbHome&lt;/code&gt;. Since &lt;code&gt;UmbHome&lt;/code&gt; derives from &lt;code&gt;UmbMaster&lt;/code&gt;, it'll go through both properties, but end up the same. All others will get the menu items from Home.&lt;/p&gt;
                &lt;p&gt;The views are completely equal, except for the extra train cart with Ditto.&lt;/p&gt;
                &lt;p&gt;Further, we've got the featured and about parts near the bottom of the page. I've only added those to &lt;code&gt;UmbHome&lt;/code&gt; with ModelsBuilder. This means that we can't just call the partials from layout any more. We need to pass in &lt;code&gt;Model.Home&lt;/code&gt;. That's more or less the only difference. The implementation follows the same patterns as before. There's individual POCOs with Ditto, and segregated interfaces with ModelsBuilder. No big wins or losses there. I'll skip the code, &lt;a href="https://github.com/lars-erik/DittoDemoModelsBuilderified"&gt;you can see it on GitHub&lt;/a&gt;.&lt;/p&gt;
                &lt;p&gt;One thing to notice if you didn't already, is that when we create segregated interfaces as view models with other property names, we implement them explicitly. By doing that, we avoid cluttering up the main model with more properties. We can also use the same name for different actual properties. Here's the &lt;code&gt;IAbout&lt;/code&gt; implementation on &lt;code&gt;UmbHomePage&lt;/code&gt;:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;string IAbout.Title { get { return AboutTitle; } }
                IHtmlString IAbout.Text { get { return AboutText; } }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;See how it can be named &lt;code&gt;Title&lt;/code&gt; without messing with the actual &lt;code&gt;Title&lt;/code&gt; from &lt;code&gt;UmbMaster&lt;/code&gt;?&lt;/p&gt;
                &lt;p&gt;It's passed from layout to the view like so:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;@Html.RenderPartial(&amp;quot;umbAbout&amp;quot;, Model.Home);
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h2&gt;Functionality and behavior&lt;/h2&gt;
                &lt;p&gt;There's a lot of cool things you can do with Ditto processors. Matt's added paging to the news overview. I didn't get around to implement any paging for the news using a ModelsBuilder approach. That's mainly because there aren't any ModelsBuilder approach for it. I'd implement it using a controller for the paging and possibly a html helper for the pager. I might even be so lazy that I'd do it in the view. With Ditto it's done with an attribute, and it's also cached using another attribute. Thing is, it amounts to some 50 lines plus to make it nicely separated and modelified. I'm willing to bet it could be done with a lot less code using traditional techniques. We can argue for a while which method has the best separation of concerns.&lt;/p&gt;
                &lt;p&gt;As far as I could find, there's only the paging that is extra functionality in the Dittoified version.&lt;/p&gt;
                &lt;h2&gt;What about Nested Content?&lt;/h2&gt;
                &lt;p&gt;Of course Nested Content works OOTB with Ditto. Everything does. With ModelsBuilder, you'd have to decorate the IPublishedContent yourself since the current property value converters doesn't. I can't imagine that's far off into the future though. If we had a nested content type of some type implementing banners, we could go as such with ModelsBuilder:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;var banners = Model.Banners.Select(b =&amp;gt; new Banner(b));
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Where &lt;code&gt;Banner&lt;/code&gt; is generated due to the doctype. A converter could go through the factory like so:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;PublishedContentModelFactoryResolver.Current.Factory.CreateModel(content);
                &lt;/code&gt;&lt;/pre&gt;

                &lt;h2&gt;Architecture and re-use&lt;/h2&gt;
                &lt;p&gt;Both the POCOs and the interfaces can be put in separate assemblies and re-used across solutions. The interfaces can be pretty dependencyless, while the Ditto POCOs will depend on Ditto. By changing the implementation from properties on the partials to extensions for the interfaces, you can also re-use most of the logic with the ModelsBuilder approach. This will make them adhere better to the &lt;a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;single responsibility principle&lt;/a&gt;. All in all, there's no obvious big winner here either. It's up to the implementor to keep it clear and simple.&lt;/p&gt;
                &lt;p&gt;Ditto isn't limited to Umbraco types. It can be used for anything that can be reflected. This means you can use it for your third-party e-commerce package for instance.&lt;/p&gt;
                &lt;p&gt;Using well structured and SOLID object oriented programming you can achieve the same without depending on any tool.&lt;/p&gt;
                &lt;h2&gt;Amount of code&lt;/h2&gt;
                &lt;p&gt;Counting all classes in the Dittoified version, I get to 18 hand crafted view models. There's 14 processors and a news context of some sort. There's also 6 more classes including controllers and extensions. Totaling 38 different classes to know and build. I didn't count the lines, but there's several hundred.&lt;/p&gt;
                &lt;p&gt;On the ModelsBuilder side, I got 5 classes generated for free. I extracted 7 interfaces and modified them a little bit. I wrote 4 partial implementations for the generated models. Mostly the same queries as in the 14 processors for Ditto. Totaling ~10 semi hand crafted classes of ~200 lines.&lt;/p&gt;
                &lt;h2&gt;Conclusions&lt;/h2&gt;
                &lt;p&gt;I've only identified a few small wins for ModelsBuilder, and I'm sure that's because I'm biased. Ultimately it boils down to preference. My biggest issues are dependencies, attributes, learning curve and amount of code. There's also a risk of scattering logic too much, making it difficult to find out what's going on. Putting everything in processors seems like an unnecessary shift away from traditional MVC and OOP. Still, Ditto radiates an intriguing magic aura, and I look forward to following its progress.&lt;/p&gt;
                &lt;p&gt;I've only been able to scratch the surface of both tools and approaches without having to write an entire book. So I encourage you to &lt;a href="https://github.com/lars-erik/DittoDemoModelsBuilderified"&gt;compare the two projects yourself&lt;/a&gt; and see which fits your needs and style the best.&lt;/p&gt;
                &lt;p&gt;I think I managed to be quite objective, so I'd like to finish off with a really subjective opinion. Using attributes which depend on a library clutters up your dependency chain. They might give meaning in context, and might live within a bounded context where it's alright to have the dependency. They may also help you stay DRY and separate concerns. ModelsBuilder also adds attributes to its classes, so there's that. Generally though, I try to steer away from them. Agree or not, all of the non-generated ModelsBuilder code is dependencyless and impossible not to get at first glance (OK, they depend on Umbraco.Core). Incidentally, my discontinued competitor to ModelsBuilder, &lt;a href="https://github.com/lars-erik/Umbraco.CodeGen"&gt;Umbraco CodeGen&lt;/a&gt;, generates 100% attribute- and dependencyless models (OK, they depend on Umbraco.Core). I'm regularly pestering &lt;a href="https://our.umbraco.org/member/6724"&gt;Stephane Gay&lt;/a&gt; about opening up the ModelsBuilder writer so I can swap out the generated classes with clean, dependencyless beauty. When that happens, you'll be in full control over your generated models.&lt;/p&gt;
                &lt;p&gt;Happy modelling, and stay &lt;a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself"&gt;DRY&lt;/a&gt;!&lt;/p&gt;
            </description>
            <pubDate>Fri, 14 Oct 2016 22:13:52 Z</pubDate>
            <a10:updated>2016-10-14T22:13:52Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1094</guid>
            <link>http://blog.aabech.no/archive/kill-switch-weve-got-action/</link>
            <title>Kill switch, we've got Action!</title>
            <description>
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1013/killswitch.png" alt="Kill switch already" /&gt;&lt;/p&gt;
                &lt;p&gt;Have you ever struggled just a tiny bit following the conditional logic in a switch statement? Ever made a bug with them? How 'bout that neat extra break statement you need to put in to prevent it from falling through. In the old days, we found falling through useful. Nowadays, we aren't even allowed by the compiler. Yet we persist in adding case and break as block delimiters in those long long cascades of code.&lt;/p&gt;
                &lt;p&gt;I've been reading a few new blogs today, and I stumbled over a few fairly ugly switches. So I decided to tell y'all what I think about them. I'll also show you a couple of alternatives I personally find easier on the eyes. Incidentally, they'll also lend themselves to more maintainable code, including opening doors to some nice architectural patterns.&lt;/p&gt;
                &lt;p&gt;&lt;em&gt;These techniques are far from new, switch is a well recognized &amp;quot;code-smell&amp;quot;. &lt;a href="#bottom"&gt;There's references at the bottom of the article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
                &lt;p&gt;Let's just dive into an example. Say we have some input and we want to vary the output based on what it is. It can be based on the state of any object or value we have, not just strings. However, I'll make it simple for the sake of the example.&lt;/p&gt;
                &lt;p&gt;We have some input, and we'll decide whether to kill switch:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;void KillOrNot(string input)
                {
                var output = &amp;quot;&amp;quot;;
                var i = 0;

                switch(input)
                {
                case &amp;quot;kill-switch-now&amp;quot;:
                output = &amp;quot;aaargh&amp;quot;;
                break;
                case &amp;quot;long-live-switch&amp;quot;:
                output = &amp;quot;noooooo&amp;quot;;
                i = -1;
                break;
                }

                // do something with this information
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Notice the individual logic with &lt;code&gt;i&lt;/code&gt; in there. I don't quite get what &lt;code&gt;i&lt;/code&gt; does, but I'm sure it's in there for a purpose. With &lt;code&gt;i&lt;/code&gt; in there however, this code is as bad as it gets. Imagine it with yet another variable and 15 more cases. If you really, really like such switches and want to stop reading, I recommend you at least put those blocks of logic into each of their own functions. That way each block will tell you it's purpose. We'd put the kill part in a &lt;code&gt;Kill()&lt;/code&gt; method, and the live part in a &lt;code&gt;LiveAndDecrease()&lt;/code&gt; method. At least it would cut down the size, somewhat, and we'd know what it does. We'd have one line of code per case. (Variables would be promoted to members.)&lt;/p&gt;
                &lt;p&gt;But let's put the &lt;code&gt;i&lt;/code&gt; away for a moment. It probably violates the &lt;a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"&gt;single responsibility principle&lt;/a&gt; anyway. I'll get to the really good part later. Now, to swap one string for another, there's a neat class we can use for pairs of strings instead. It'll be shorter and more concise. It's called a &lt;code&gt;Dictionary&lt;/code&gt;. (Or it's sometimes faster siblings.) Here's the string lookup refactored to use a dictionary:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;void Now(string input)
                {
                var outputs = new Dictionary&amp;lt;string, string&amp;gt;
                {
                { &amp;quot;kill-switch-now&amp;quot;, &amp;quot;aaargh&amp;quot; }
                { &amp;quot;long-live-switch&amp;quot;, &amp;quot;nooooo&amp;quot; }
                };

                var output = outputs[input];

                // do something with this information
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Notice how the actual result gets as close to the predicate as possible. It's a lot easier to follow. Imagine this with 20 cases instead of 2. &lt;/p&gt;
                &lt;p&gt;With simple strings out of the way, how how about that &lt;code&gt;i&lt;/code&gt;. I'll cross my fingers and hope you agree it's easier to work with if each case has it's own method. So we've promoted &lt;code&gt;output&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt;, and we've created these two &lt;code&gt;Kill&lt;/code&gt; and &lt;code&gt;LiveAndDecrease&lt;/code&gt;  methods:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;string output;
                int i;

                void Kill()
                {
                output = &amp;quot;aaaargh&amp;quot;;
                }

                void LiveAndDecrease()
                {
                output = &amp;quot;nooooo&amp;quot;;
                i = -1;
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;Did you guess what's next? It's another dictionary. But we'll swap out the of-type part. We'll use &lt;code&gt;Action&lt;/code&gt;:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;Dictionary&amp;lt;string, string&amp;gt; handlers = new Dictionary&amp;lt;string, Action&amp;gt;
                {
                { &amp;quot;kill-switch-now&amp;quot;, Kill }
                { &amp;quot;long-live-switch&amp;quot;, LiveAndDecrease }
                };
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;And to invoke it, we just call the dictionary item:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;void Now(string input)
                {
                handlers[input]();
                }
                &lt;/code&gt;&lt;/pre&gt;

                &lt;p&gt;How's that for readability? The only thing I have an issue with here is the invocation itself. However, it's one line, and we should probably name &lt;code&gt;Now&lt;/code&gt; something meaningful for our context. Once you know this trick it stops being so arcane too.&lt;/p&gt;
                &lt;p&gt;If you have ReSharper installed, maintenance becomes a breeze. Whenever you write a new item in the dictionary, you'll get a small lamp on the nonexistent method name. Press &lt;code&gt;Alt+Enter&lt;/code&gt;, and hey presto - there's a new method with the right signature!&lt;/p&gt;
                &lt;p&gt;If we need parameters for each block, we could either set some members, or we could add them as parameters to the action. A string parameter would be &lt;code&gt;Action&amp;lt;string&amp;gt;&lt;/code&gt;, and the signature would be &lt;code&gt;void Name(string parameter)&lt;/code&gt;. We can of course also return stuff. So we'd go &lt;code&gt;Func&amp;lt;string, string&amp;gt;&lt;/code&gt; and &lt;code&gt;handlers[input](parameter)&lt;/code&gt;.&lt;/p&gt;
                &lt;p&gt;All this is actually just poor man's &lt;a href="https://en.wikipedia.org/wiki/Strategy_pattern"&gt;strategy pattern&lt;/a&gt;. The bigger your blocks in the switch statement, the bigger the chance you actually have polymorphic behavior that belongs in several subclasses of a common type. For simple logic, there's nothing wrong with the poor man's edition. The fact that we've got methods for each block means we can easily extract each method to it's own class when the time comes to go big.&lt;/p&gt;
                &lt;p&gt;&lt;a id="bottom"&gt;&lt;/a&gt;
                If you got this far and find these ideas interesting, I highly recommend you check out these links:&lt;/p&gt;
                &lt;ul&gt;
                &lt;li&gt;Martin Fowler's page on replacing &lt;a href="http://www.refactoring.com/catalog/replaceConditionalWithPolymorphism.html"&gt;conditionals with polymorphism&lt;/a&gt;&lt;br /&gt;
                Basically, just buy the Refactoring book linked on the same page. ;)&lt;/li&gt;
                &lt;li&gt;&lt;a href="https://sourcemaking.com/refactoring/smells/switch-statements"&gt;The &amp;quot;pirate&amp;quot; version&lt;/a&gt; of the same refactorings&lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;There's a lot more out there. Just &lt;a href="https://www.google.com/search?q=clean+code"&gt;google Clean Code&lt;/a&gt;.&lt;br /&gt;
                Happy refactoring! :)&lt;/p&gt;
            </description>
            <pubDate>Wed, 05 Oct 2016 20:07:57 Z</pubDate>
            <a10:updated>2016-10-05T20:07:57Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1092</guid>
            <link>http://blog.aabech.no/archive/sliced-bread-ux-from-a-parents-perspective/</link>
            <title>Sliced bread, UX from a parent's perspective</title>
            <description>
                &lt;p&gt;&lt;img src="http://blog.aabech.no/media/1012/sliced-bread.png" alt="whole slice of bread vs pieces of sliced bread" /&gt;&lt;/p&gt;
                &lt;p&gt;My wife works week-end shifts once a month. This morning was a sunday morning of one such week. The girls had ate when I got up at 7am, but the youngest had barely touched her slice of bread with brown cheese (her favorite). My better half left and I sat down with the 2yo. I lovingly, although a bit grumpy, told her to eat up.&lt;/p&gt;
                &lt;p&gt;She just looked at me dumbfounded. &amp;quot;Come on&amp;quot;, I said, and she started whining a bit. Now, I didn't start to yell, but I tried most of the different dominant and didactic ways of parenting. &amp;quot;You need to eat your food so you get big and healthy.&amp;quot; It ended up with her telling me to go away. She turned her back on me, and thus we sat there in silence for a while.&lt;/p&gt;
                &lt;p&gt;She's almost three now, so we kind of expect her to be more like her 6yo sister and take bites off a slice of bread. But I thought maybe, just maybe she needs to be pampered a bit more before she gets big. So I pulled off a few soft bits still having cheese on them. (She eats some of the cheese of course.) &amp;quot;You want smaller pieces, maybe&amp;quot;? She turns around, grins, and pops a piece into her mouth. She ate everything but the crust. Of course this trick isn't new to me, but as I said, we've got expectations. We're past those early steps.&lt;/p&gt;
                &lt;p&gt;I tried again at lunch. I split the slice into eight small- but still a wee bit more than bite-sized pieces. This time around, I asked whether the pieces were the right size. She were asking questions like &amp;quot;why do you eat a big one?&amp;quot; and &amp;quot;why no cheese?&amp;quot;. We were having a constructive, learning discussion and exploration of the process of eating sliced bread. I'm sure she'll soon be moving into whole-sliced-bread territory, but she doesn't quite yet fit that persona perfectly. This all made me think about how software might or might not be used at all. &lt;/p&gt;
                &lt;p&gt;Countless times big fancy systems have been introduced in organizations as silver bullets designed to solve all problems. They're mandatory for everyone (even the janitor). But the UX simply sucks! It's close to, if not impossible to do the right thing. Trying to do anything is as unwieldy as holding, and taking bites off a sliced bread is for my daughter. (Sticky fingers is the worst!) Management might get a few grunts and moans from their closest, but the majority of employees might just not use it. They'll just like management less than they might have before. Management will hopefully know, though, and might - if they're good management - fix it. (AKA. throw the @#¤%&amp;amp; out)&lt;/p&gt;
                &lt;p&gt;How about on the web? If you find an unwieldy webpage, how long do you stay to &amp;quot;learn&amp;quot; it? How's your impression of the company who owns the site? Will you tell your friends? Can we detect that people aren't using a site because of things like these? Do we know what they're saying about the company? Can we get to know, and use it for constructive and educational exploration of better UX And software?&lt;/p&gt;
                &lt;p&gt;I'm sure y'all do all the smart suff already, but I liked the metaphor.&lt;/p&gt;
                &lt;p&gt;&lt;em&gt;This article was meant as a tongue-in-cheek look at parenting and software, but I'm sure there's something of value buried in there.&lt;/em&gt;&lt;/p&gt;
            </description>
            <pubDate>Sun, 02 Oct 2016 19:19:18 Z</pubDate>
            <a10:updated>2016-10-02T19:19:18Z</a10:updated>
        </item>
        <item>
            <guid isPermaLink="false">1091</guid>
            <link>http://blog.aabech.no/archive/templatable-grid-for-umbraco/</link>
            <title>Templatable grid for Umbraco</title>
            <description>
                &lt;p&gt;Have you ever created several documents in a row and set up more or less the same grid layout for each page? Becomes a hassle after a few pages, doesn't it? Distress no more! &lt;a href="https://www.nuget.org/packages/Our.Umbraco.TemplatableGrid"&gt;Here's a package&lt;/a&gt; that let's you create default layouts for your grids to get a flying start. &lt;/p&gt;
                &lt;p&gt;TL;DR: &lt;a href="#video"&gt;There's a video at the bottom&lt;/a&gt;.&lt;/p&gt;
                &lt;h3&gt;Word to the wise&lt;/h3&gt;
                &lt;p&gt;This is an alpha, and it's probably still got some quirks. We use it in production for all our newer sites, so it should be quite safe. However, if you're going to modify your existing grids:&lt;br /&gt;
                &lt;strong&gt;MAKE SURE YOU NOTE DOWN THE CONFIGURATION&lt;/strong&gt;! &lt;br /&gt;
                The data type will reset back to the default grid settings when you change the property editor.&lt;br /&gt;
                You could probably just change the property editor alias in the database, but I'll leave that for the savvy ones.&lt;br /&gt;
                There's one other drawback, namely that it cannot be set up properly when using the document type editor to edit the datatype.&lt;/p&gt;
                &lt;h3&gt;Usage&lt;/h3&gt;
                &lt;p&gt;In addition to the built-in prevalues for layout and RTE configuration, there is an additional prevalue for the default layout. Add rows and editors like in a regular document, until you've got a nice starting point for all pages.&lt;br /&gt;
                &lt;strong&gt;NB!&lt;/strong&gt; When changing the layout configuration, especially renaming things, you may have to use the &amp;quot;Reset layout&amp;quot; button to be able to create a new layout.&lt;/p&gt;
                &lt;h3&gt;Core potential&lt;/h3&gt;
                &lt;p&gt;I've made a PR for this to be part of the core since I believe it's a pretty useful feature for many sites. Feel free to &lt;a href="http://issues.umbraco.org/issue/U4-8444"&gt;give the issue a vote&lt;/a&gt; if you'd like to see it built-in too. By &amp;quot;popular&amp;quot; demand, I decided to release it as a package for better community support. Thanks, &lt;a href="https://twitter.com/leekelleher"&gt;Lee&lt;/a&gt;! :)&lt;/p&gt;
                &lt;p&gt;&lt;a id="video"&gt;&lt;/a&gt;&lt;/p&gt;
                &lt;h3&gt;Oh shut up, just show me how it works&lt;/h3&gt;
                &lt;p&gt;Aww, OK. At least I hope I got some proper SEO out of the babble above. :)&lt;/p&gt;
                &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/2Ie7elvBsRw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
            </description>
            <pubDate>Wed, 28 Sep 2016 20:33:56 Z</pubDate>
            <a10:updated>2016-09-28T20:33:56Z</a10:updated>
        </item>
    </channel>
</rss>