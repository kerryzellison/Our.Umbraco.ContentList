[
    {
        "title": "Our.Umbraco.WysiwygGrid 1.0.0 beta released",
        "link": "http://blog.aabech.no/archive/ourumbracowysiwyggrid-100-beta-released/",
        "description": "\n                <p>A while ago I <a href=\"/archive/the-state-of-wysiwyg-grid-editing-in-umbraco-a-prototype/\">blogged about the state of WYSIWYG in the Umbraco grid editor</a>. We're now about to add this script to a second and likely third Umbraco 8 site, so I had to generalize and package up the code.</p>\n                <p>There's nothing much to hide or earn from here, so I decided to put it up on github and nuget instead of our internal scm and feeds.</p>\n                <p>Hope to see some more community members fiddling with it, if nothing else that it inspires the block editor team to make the backoffice experience more similar to the frontend look and feel.</p>\n                <p>A definite change from the previous blogpost is that we favor grid settings over inline styling. By slightly modifying the bootstrap view (we use v4 anyway), we can add multiple classes instead of attributes as is done the original views. As such we can have settings like these:</p>\n                <p><img src=\"http://blog.aabech.no/media/1035/wysiwyg-grid-settings.png\" alt=\"Example grid settings dialog\" /></p>\n                <p>Those will generate extra classes named <code>padding-lots</code> and <code>theme-inverse</code>.<br />\n                Those classes are added to rows or cells in both the backoffice and the front-end.<br />\n                By doing some fancy sass include ninjaing, we can hopefully limit the amount of duplication, while still mimicing the front-end as much as possible in the backoffice.</p>\n                <p>There are some samples in the github repo if you're unsure how to get started. The SQLCE database is included with a fairly common test username/password. 😇</p>\n                <p>Without further ado, here's the nuget and github links:</p>\n                <p><a href=\"https://github.com/lars-erik/Our.Umbraco.WysiwygGrid\">https://github.com/lars-erik/Our.Umbraco.WysiwygGrid</a><br />\n                <a href=\"https://www.nuget.org/packages/Our.Umbraco.WysiwygGrid/1.0.0-beta01\">https://www.nuget.org/packages/Our.Umbraco.WysiwygGrid/1.0.0-beta01</a></p>\n                <p>Hope you enjoy it, and as usual, hope for a good discussion or feedback from the community!</p>\n            ",
        "category": [
            {
                "Value": "umbraco"
            }
        ],
        "guid": {
            "isPermaLink": false,
            "isPermaLinkSpecified": true,
            "Value": "1165"
        },
        "pubDate": "Thu, 23 Apr 2020 12:09:36 Z",
        "ListHeading": "Our.Umbraco.WysiwygGrid 1.0.0 beta released",
        "ListSummary": {},
        "ContentTypeName": "Rss",
        "Url": "http://blog.aabech.no/archive/ourumbracowysiwyggrid-100-beta-released/",
        "SortOrder": 0,
        "SortDate": "2020-04-23T14:09:36+02:00",
        "Date": "2020-04-23T14:09:36+02:00"
    },
    {
        "title": "The state of WYSIWYG grid editing in Umbraco - a prototype",
        "link": "http://blog.aabech.no/archive/the-state-of-wysiwyg-grid-editing-in-umbraco-a-prototype/",
        "description": "\n                <h2>The state of the grid</h2>\n                <p>Since the grid was launched at the CG talk &quot;The sky is the limit&quot; back in 2015 (i think),\n                it has been a joy to use for editors, designers and developers alike.\n                Granted, there's been the other feature that could've gotten more love (configuration and settings), but generally it does the job swell.<br />\n                However, it's still just a white canvas with &quot;settings applied&quot;.<br />\n                <a href=\"https://twitter.com/aaantoinee\">Antoine</a> made <a href=\"https://our.umbraco.com/packages/backoffice-extensions/lepainter/\">LePainter</a> back in 2015, but likely didn't get much traction.<br />\n                I was just told about it today by <a href=\"https://twitter.com/callumbwhyte\">Callum</a>. Shame on me for not watching the package space enough, how embarrasing. 😳</p>\n                <p>Anyway...</p>\n                <h2>Why should we care</h2>\n                <p>Recently, I've been in lots of discussions; near battles IMO; about which CMS to sell to our customers.<br />\n                The feedback is that editors wonder why what they see while editing does not match what they see in the front-end.\n                We do work with another CMS where the backoffice experience has a near 1:1 layout and design with the front-end.\n                As developers, we tend to think structured data is the better solution. Think nested- and stacked content.\n                I tend to agree. But in a sales meeting, those arguments are total losing arguments. A competing agency will bury you when they oversell the fancy editing experience. Even though the not-so-apparent technical features of the competing CMS are totally useless.<br />\n                And I do agree - the editing experience is what Umbraco likes to sell as well!</p>\n                <h2>What can we do?</h2>\n                <p>The current HQ efforts are working on the &quot;block based&quot; editor. It's been going on for the better part of a year, but the publicly available information is mostly <a href=\"https://github.com/umbraco/rfcs/blob/master/cms/0012-rfc-block%20editor.md\">just an RFC with screenshots</a> looking like stacked / nested content, and that's it. The technical aspects seem super, but there's nothing much (but text) about the general editing experience. Also, and I know this is a hot take, editors DO want to see three columns in the editor when it ends up three columns in the front-end.</p>\n                <p>Hopefully, as mentioned in the RFC, it can act as a stepping stone towards the &quot;Grid 2.0&quot; (which we started work on at the retreat <em>two</em> years ago).</p>\n                <p>But as far as I'm concerned, this could just as well end up never happening. The effort is not very visible, Project UniCore 🦄 has (rightly) high priority, and in the mean time we're stuck with Grid 1.0, or maybe, hopefully, a rumored <em>commercial</em> package called Bento by the eminent <a href=\"https://twitter.com/pgregorynz\">Peter Gregory</a> and his colleagues at KØBEN Digital.</p>\n                <h2>A prototype</h2>\n                <p>So back using Grid 1.0 for projects to be delivered imminently, I've started doing some prototypes for something similar to what LePainter did for early v7 projects.</p>\n                <p>I asked the community if it was madness or worth pursuing, and the general feedback is that it's both. Hence this blog post to explore it some more, and hopefully gather some more feedback or at least provide feedback to the block editor team. (Hope they receive it. 😁)</p>\n                <p>Here's a quick little preview of what I've been doing so far:</p>\n                <iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/B6LLiO116jc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n                <h2>The issues</h2>\n                <p>Actually getting the styling into the grid is &quot;just&quot; a matter of including a few pagefuls of JavaScript and a limited and scoped CSS file in a package.manifest file for the site. Both classes and styles are applied as expected, and with some due dilligence it doesn't look half bad.</p>\n                <p>The biggest issue I have is that the cells and controls are styled white, and while styling one have to mind not messing up the GUI text like &quot;Settings applied&quot;.</p>\n                <p>I attempted to lessen the opacity of the cells and controls, and it works to a degree. The minute one adds a background image however, the entire thing starts to crumble. How to keep the WYSIWYG experience while still seeing the GUI? One could fantasize about doing an average color sample of the image and toggling between white and black text, maybe? Could be done in a short hacking sprint...<br />\n                Could just keep it fairly white like I've done in the prototype.\n                Could keep just the active rows white. This is where I start struggling. 😳</p>\n                <p>To be frank, the biggest problem lies in the fact that the &quot;Add content&quot; button is <em>in</em> the grid. Other CMSes have drag drop functionality from a menu over to the side. It could possibly still just be white or slightly transparent. The last problem then is all those &quot;settings applied&quot; and empty cells with the other type of &quot;Add content&quot; button.</p>\n                <p>I can't help but think this is all within grasp, albeit just out of my limited back-ender reach. 😆</p>\n                <h2>The settings dialog issues</h2>\n                <p>The settings dialog is a chapter of itself. It's a mystery to me why we still have a concept of individual &quot;prevalue editors&quot; in Umbraco. Property editors have the same model, and can be sneaked in there by just providing a full path.</p>\n                <p>However, as experienced when working on <a href=\"http://blog.aabech.no/archive/our-umbraco-community-contentlist-10-beta-released/\">our ContentList package</a>, nesting property editors using built-in directives wreaks total havok on the styling. There's some grey background and drop shadows - that I haven't seen being actively used anywhere. It's generally just a mystery, and a huge candidate for backoffice re-work.</p>\n                <p>Also, for instance the slider property editor does look a bit weird when used as a setting editor. I do hope that those things will get an overhaul and are made more uniform sooner or later.</p>\n                <p>I'll just leave that hanging, since I know (and appreciate) there are several HQ and community efforts going on to clean things up.</p>\n                <h2>The code</h2>\n                <p>Since I managed to <a href=\"https://github.com/umbraco/Umbraco-CMS/pull/2639/commits/76c924fbaa3da89d9865d9ec405e6dbb123852e3\">sneak in a few new events in the grid</a>, making it work was a matter of hooking into the &quot;grid.initialized&quot; event and start watching the model. There might be some performance issues with large grids since it's a deep watch, but with todays computers that might be irrational over engineering to think as well.</p>\n                <p>It adds the configured styles as expected.<br />\n                For the configuration, it just adds the value of the configuration setting called &quot;class&quot;. If there's more it concats the setting key with the setting value, delimited by a dash.</p>\n                <p>You can scrutinize the JavaScript here, or in <a href=\"https://gist.github.com/lars-erik/9dbf8f4004121c8eb109423b814af34c\">this gist</a>.</p>\n                <pre><code>angular.module(&quot;umbraco&quot;).run([&quot;eventsService&quot;, function(eventsService) {\n                function findModelScope(scope) {\n                if (!scope) {\n                return null;\n                }\n                if (scope.model) {\n                return scope;\n                }\n                return findModelScope(scope.$parent);\n                }\n\n                function isProtectedClass(className) {\n                return className === &quot;umb-row-inner&quot; ||\n                className === &quot;umb-cell-inner&quot; ||\n                className.substr(0, 2) === &quot;ng-&quot; ||\n                className.substr(0, 2) === &quot;ui-&quot;;\n                }\n\n                function addClasses(element, gridItem) {\n                function classNameFromConfig(e) {\n                if (e === &quot;class&quot;) {\n                return gridItem.config[e];\n                } else {\n                return e + &quot;-&quot; + gridItem.config[e];\n                }\n                }\n\n                var classes = (element.className || &quot;&quot;).split(/\\s+/);\n                var newClasses = classes.filter(isProtectedClass);\n                var nameClass = (gridItem.name || &quot;&quot;).toLowerCase().replace(&quot; &quot;, &quot;-&quot;);\n                var configClasses = Object.keys(gridItem.config || {}).map(classNameFromConfig);\n                newClasses.push(nameClass);\n                newClasses = newClasses.concat(configClasses);\n                element.className = newClasses.join(&quot; &quot;);\n                }\n\n                function addStyles(element, gridItem) {\n                function styleFromKeyPair(e) {\n                return e + &quot;:&quot; + gridItem.styles[e];\n                }\n\n                var stylesValues = Object.keys(gridItem.styles || {}).map(styleFromKeyPair);\n                element.style = stylesValues.join(&quot;;&quot;);\n                }\n\n                eventsService.on(&quot;grid.initialized&quot;,\n                function(evt, data) {\n                var modelScope = findModelScope(data.scope);\n                var model = modelScope.model;\n                var jqEl = data.element;\n                var el = data.element.get(0);\n                jqEl.addClass(&quot;stylized-grid&quot;);\n\n                modelScope.$watch(\n                &quot;model&quot;,\n                function () {\n                var areaElements = el.getElementsByClassName(&quot;umb-column&quot;);\n                if (areaElements.length === 0) {\n                return;\n                }\n                model.value.sections.forEach(function (area, ai) {\n                var rowElements = areaElements[ai].getElementsByClassName(&quot;umb-row-inner&quot;);\n                area.rows.forEach(function (row, ri) {\n                var rowElement = rowElements[ri];\n                addClasses(rowElement, row);\n                addStyles(rowElement, row);\n\n                var cellElements = rowElement.getElementsByClassName(&quot;umb-cell-inner&quot;);\n                row.areas.forEach(function(cell, ci) {\n                addClasses(cellElements[ci], cell);\n                addStyles(cellElements[ci], cell);\n                });\n                });\n                });\n                },\n                true\n                );\n                });\n\n                }]);\n                </code></pre>\n\n                <h2>The CSS</h2>\n                <p>To not interfere with any other backoffice styling, the script adds the class &quot;stylized-grid&quot; to the grid container. Here's the (S)CSS I used to make things more transparent:</p>\n                <pre><code>.umb-grid.stylized-grid {\n\n                .umb-cell-content {\n                background-color: rgba(255, 255, 255, .8);\n                }\n\n                .umb-cell-content:hover {\n                background-color: rgba(255, 255, 255, 1);\n                }\n\n                .umb-cell-content.-has-editors {\n                background-color: rgba(255, 255, 255, .8);\n                }\n\n                .umb-cell-content.-has-editors:hover {\n                background-color: rgba(255, 255, 255, 1);\n                }\n\n                .umb-grid-add-more-content {\n                background-color: rgba(255, 255, 255, 1);\n                }\n\n                .umb-control-bar, .umb-grid-has-config {\n                font-family: Lato, Helvetica Neue, Helvetica, Arial, sans-serif !important;\n                }\n\n                iframe {\n                background-color: transparent;\n                }\n\n                @import &quot;../../../Assets/grid&quot;;\n                }\n                </code></pre>\n\n                <p>The import at the bottom is the sass that styles our individual components in the front-end, and that should be reflected in the backoffice. </p>\n                <h2>Conclusion</h2>\n                <p>We'll be diving into deep water and testing this out on a real customer. I'm a bit weary, but we need to get the experience.</p>\n                <p>I do hope I've been able to provide some inspiration, and that WYSIWYG editing in Umbraco might get the renaissance (I believe) it deserves.</p>\n                <p>Feel free to drop your comments below or ping me on Twitter or Slack!<br />\n                Also happy to continue the discussion on our or github, but not sure the best way forward, if any.</p>\n            ",
        "category": [
            {
                "Value": "umbraco"
            }
        ],
        "guid": {
            "isPermaLink": false,
            "isPermaLinkSpecified": true,
            "Value": "1164"
        },
        "pubDate": "Fri, 03 Apr 2020 13:26:14 Z",
        "ListHeading": "The state of WYSIWYG grid editing in Umbraco - a prototype",
        "ListSummary": {},
        "ContentTypeName": "Rss",
        "Url": "http://blog.aabech.no/archive/the-state-of-wysiwyg-grid-editing-in-umbraco-a-prototype/",
        "SortOrder": 0,
        "SortDate": "2020-04-03T15:26:14+02:00",
        "Date": "2020-04-03T15:26:14+02:00"
    },
    {
        "title": "Our Umbraco Community ContentList 1.0 (beta) released",
        "link": "http://blog.aabech.no/archive/our-umbraco-community-contentlist-10-beta-released/",
        "description": "\n                <p>ContentList is a grid editor we've used internally at MarkedsPartner since 2016. It helps editors and designers insert lists of content in the grid without having to worry about queries, paging or building new templates.<br />\n                I've finally been able to upgrade it to Umbraco 8 and polished it a bit. It's still slightly in beta, but there's nothing special but a bit of CSS polish lacking, so it should be fairly safe to use in production. 👼</p>\n                <p>There's a whole documentation piece in the readme <a href=\"https://github.com/lars-erik/Our.Umbraco.ContentList\">over on github</a>, so I won't bother with a whole lot of prose in this blogpost, but I recorded a half an hour demo (below) showing all the aspects of implementing its use in an Umbraco site.</p>\n                <p>There's really not much to do once you get the hang of it, and our editors and staff have been enjoying using it for five years, so I hope you will too.</p>\n                <p>Here's the demo, and I really hope to get your feedback here, on github or on youtube.\n                The first 3-4 minutes show the gist of it, so no need to sit through the full half hour if you're just curious. 👍</p>\n                <iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/7O6Es1SNf9s\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n            ",
        "category": [
            {
                "Value": "Umbraco"
            }
        ],
        "guid": {
            "isPermaLink": false,
            "isPermaLinkSpecified": true,
            "Value": "1163"
        },
        "pubDate": "Wed, 01 Apr 2020 21:57:27 Z",
        "ListHeading": "Our Umbraco Community ContentList 1.0 (beta) released",
        "ListSummary": {},
        "ContentTypeName": "Rss",
        "Url": "http://blog.aabech.no/archive/our-umbraco-community-contentlist-10-beta-released/",
        "SortOrder": 0,
        "SortDate": "2020-04-01T23:57:27+02:00",
        "Date": "2020-04-01T23:57:27+02:00"
    },
    {
        "title": "ARMLinker 1.0.0 released",
        "link": "http://blog.aabech.no/archive/armlinker-100-released/",
        "description": "\n                <h2>ARM What?</h2>\n                <p>I've been having fun with ARM Templates the last couple of months.\n                It's a wonderful way to keep your Azure Resource definitions in source control.\n                Not to mention being able to parameterize deployment to different environments,\n                and not least keeping your secrets neatly tucked away in a vault.</p>\n                <p>However, compiling a set of resources from multiple files currently requires\n                you to put your templates online. I want to keep most of our customer products'\n                templates private, and to do that one have to <a href=\"https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/linked-templates#linked-template\">jump through hoops</a> to copy the\n                files over to a storage account and link to the given URLs.\n                It kind of defeats the whole purpose for me.</p>\n                <p>So I went and created a small tool to be able to link templates locally.</p>\n                <h2>How to use it</h2>\n                <p>There's an installable project type for Visual Studio called <a href=\"https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/create-visual-studio-deployment-project\">&quot;Azure Resource Group&quot;</a>.\n                When you create one you get a few files:</p>\n                <ul>\n                <li>Deploy-AzureResourceGroup.ps1</li>\n                <li>azuredeploy.json</li>\n                <li>azuredeploy.parameters.json</li>\n                </ul>\n                <p>You can stuff all of the resources you require in the azuredeploy.json file, and finally deploy them using a wizard, or run the PowerShell script in a CD pipeline.</p>\n                <p>By installing ARMLinker you can start running the tool to link other JSON files\n                into the main azuredeploy.json file.</p>\n                <pre><code>install-module ARMLinker\n                </code></pre>\n\n                <p>Let's say we have a Logic App (what I've been doing).<br />\n                To deploy it and its connections and other needed resources, we often want\n                a bounch of secret keys for different APIs and such.</p>\n                <p>Here's a trimmed down sample of a Logic App that runs a SQL command:</p>\n                <pre><code>{\n                &quot;$schema&quot;: &quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&quot;,\n                &quot;contentVersion&quot;: &quot;1.0.0.0&quot;,\n                &quot;parameters&quot;: {\n                &quot;Tags&quot;: {\n                &quot;type&quot;: &quot;object&quot;,\n                &quot;defaultValue&quot;: {\n                &quot;Customer&quot;: &quot;My customer&quot;,\n                &quot;Product&quot;: &quot;Their Logic App&quot;,\n                &quot;Environment&quot;: &quot;Beta&quot;\n                }\n                },\n                &quot;SQL-Server&quot;: {\n                &quot;defaultValue&quot;: &quot;some.database.windows.net&quot;,\n                &quot;type&quot;: &quot;string&quot;\n                },\n                &quot;SQL-User&quot;: {\n                &quot;defaultValue&quot;: &quot;appuser&quot;,\n                &quot;type&quot;: &quot;string&quot;\n                },\n                &quot;SQL-Password&quot;: {\n                &quot;defaultValue&quot;: &quot;&quot;,\n                &quot;type&quot;: &quot;securestring&quot;\n                },\n                &quot;SQL-Database-Name&quot;: {\n                &quot;defaultValue&quot;: &quot;beta-database&quot;,\n                &quot;type&quot;: &quot;string&quot;\n                }\n                },\n                &quot;variables&quot;: {\n                &quot;ConnectionName&quot;: &quot;[replace(concat(parameters('Tags').Customer, '-', parameters('Tags').Product, '-SQLConnection-', parameters('Tags').Environment), ' ', '')]&quot;,\n                &quot;LogicAppName&quot;: &quot;[replace(concat(parameters('Tags').Customer, '-', parameters('Tags').Product, '-', parameters('Tags').Environment), ' ', '')]&quot;\n                },\n                &quot;resources&quot;: [\n                {\n                &quot;type&quot;: &quot;Microsoft.Web/connections&quot;,\n                &quot;apiVersion&quot;: &quot;2016-06-01&quot;,\n                &quot;location&quot;: &quot;westeurope&quot;,\n                &quot;name&quot;: &quot;[variables('ConnectionName')]&quot;,\n                &quot;properties&quot;: {\n                &quot;api&quot;: {\n                &quot;id&quot;: &quot;[concat(subscription().id,'/providers/Microsoft.Web/locations/westeurope/managedApis/sql')]&quot;\n                },\n                &quot;displayName&quot;: &quot;sql_connection&quot;,\n                &quot;parameterValues&quot;: {\n                &quot;server&quot;: &quot;[parameters('SQL-Server')]&quot;,\n                &quot;database&quot;: &quot;[parameters('SQL-Database-Name')]&quot;,\n                &quot;authType&quot;: &quot;windows&quot;,\n                &quot;username&quot;: &quot;[parameters('SQL-User')]&quot;,\n                &quot;password&quot;: &quot;[parameters('SQL-Password')]&quot;\n                }\n                }\n                },\n                {\n                &quot;type&quot;: &quot;Microsoft.Logic/workflows&quot;,\n                &quot;apiVersion&quot;: &quot;2017-07-01&quot;,\n                &quot;name&quot;: &quot;[variables('LogicAppName')]&quot;,\n                &quot;dependsOn&quot;: [ &quot;[resourceId('Microsoft.Web/connections', variables('ConnectionName'))]&quot; ],\n                &quot;location&quot;: &quot;westeurope&quot;,\n                &quot;properties&quot;: {\n                &quot;state&quot;: &quot;Enabled&quot;,\n                &quot;definition&quot;: {\n                &quot;$schema&quot;: &quot;https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#&quot;,\n                &quot;contentVersion&quot;: &quot;1.0.0.0&quot;,\n                &quot;parameters&quot;: {\n                &quot;$connections&quot;: {\n                &quot;defaultValue&quot;: {},\n                &quot;type&quot;: &quot;Object&quot;\n                },\n                &quot;SQL-Server&quot;: {\n                &quot;defaultValue&quot;: &quot;&quot;,\n                &quot;type&quot;: &quot;string&quot;\n                },\n                &quot;SQL-Database-Name&quot;: {\n                &quot;defaultValue&quot;: &quot;&quot;,\n                &quot;type&quot;: &quot;string&quot;\n                }\n                },\n                &quot;triggers&quot;: {\n                &quot;Recurrence&quot;: {\n                &quot;recurrence&quot;: {\n                &quot;frequency&quot;: &quot;Day&quot;,\n                &quot;interval&quot;: 1\n                },\n                &quot;type&quot;: &quot;Recurrence&quot;\n                }\n                },\n                &quot;actions&quot;: {\n                &quot;Execute_a_SQL_query_(V2)&quot;: {\n                &quot;runAfter&quot;: {},\n                &quot;type&quot;: &quot;ApiConnection&quot;,\n                &quot;inputs&quot;: {\n                &quot;body&quot;: {\n                &quot;query&quot;: &quot;select 'do something really useful' as task&quot;\n                },\n                &quot;host&quot;: {\n                &quot;connection&quot;: {\n                &quot;name&quot;: &quot;@parameters('$connections')['sql']['connectionId']&quot;\n                }\n                },\n                &quot;method&quot;: &quot;post&quot;,\n                &quot;path&quot;: &quot;/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('SQL-Server')))},@{encodeURIComponent(encodeURIComponent(parameters('SQL-Database-Name')))}/query/sql&quot;\n                }\n                }\n                },\n                &quot;outputs&quot;: {}\n                },\n                &quot;parameters&quot;: {\n                &quot;$connections&quot;: {\n                &quot;value&quot;: {\n                &quot;sql&quot;: {\n                &quot;connectionId&quot;: &quot;[resourceId('Microsoft.Web/connections', variables('ConnectionName'))]&quot;,\n                &quot;connectionName&quot;: &quot;variables('ConnectionName')&quot;,\n                &quot;id&quot;: &quot;/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Web/locations/westeurope/managedApis/sql&quot;\n                }\n                }\n                },\n                &quot;SQL-Server&quot;: {\n                &quot;value&quot;: &quot;[parameters('SQL-Server')]&quot;\n                },\n                &quot;SQL-Database-Name&quot;: {\n                &quot;value&quot;: &quot;[parameters('SQL-Database-Name')]&quot;\n                }\n                }\n                }\n                }\n                ]\n                }\n                </code></pre>\n\n                <p>The parameters here are ARM template parameters. The most interesting one is the secret password for the database server. It's secret, so it's not supposed to live in our parameter file or source control. We've also got the ID of the connection, which will be the <em>real</em> ID in the actual deployed Logic App.</p>\n                <p>There's a fancy way to go about keeping the password in a key vault on Azure, and the Visual Studio Wizard is really helpful with putting it into a vault.</p>\n                <p>When we're done and ready for production, a parameter file may look like this:</p>\n                <pre><code>{\n                &quot;$schema&quot;: &quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#&quot;,\n                &quot;contentVersion&quot;: &quot;1.0.0.0&quot;,\n                &quot;parameters&quot;: {\n                &quot;Tags&quot;: {\n                &quot;value&quot;: {\n                &quot;Customer&quot;: &quot;My customer&quot;,\n                &quot;Product&quot;: &quot;Their Logic App&quot;,\n                &quot;Environment&quot;: &quot;Production&quot;\n                }\n                },\n                &quot;SQL-Database-Name&quot;: {\n                &quot;value&quot;: &quot;production-database&quot;\n                },\n                &quot;SQL-Password&quot;: {\n                &quot;reference&quot;: {\n                &quot;keyVault&quot;: {\n                &quot;id&quot;: &quot;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Vault-Group/providers/Microsoft.KeyVault/vaults/OurKeyVault&quot;\n                },\n                &quot;secretName&quot;: &quot;CustomerSQLPassword&quot;\n                }\n                }\n                }\n                }\n                </code></pre>\n\n                <p>One of the beauties of using Logic Apps is that it have this nice GUI to work with in the portal. There's also an extension for Visual Studio to be able to edit them within Visual Studio.</p>\n                <p>However, the definition will look like this when viewed with the code editor. (I removed the bulk of it, but notice the parameters) </p>\n                <pre><code>{\n                &quot;definition&quot;: {\n                &quot;$schema&quot;: &quot;https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#&quot;,\n                &quot;actions&quot;: {\n                &quot;Execute_a_SQL_query_(V2)&quot;: {\n                &quot;inputs&quot;: {\n                &quot;body&quot;: {\n                &quot;query&quot;: &quot;select 'do something really useful' as task&quot;\n                },\n                &quot;host&quot;: {\n                &quot;...&quot;\n                },\n                &quot;...&quot;\n                },\n                &quot;runAfter&quot;: {},\n                &quot;type&quot;: &quot;ApiConnection&quot;\n                }\n                },\n                &quot;...&quot;,\n                &quot;parameters&quot;: {\n                &quot;$connections&quot;: {\n                &quot;defaultValue&quot;: {},\n                &quot;type&quot;: &quot;Object&quot;\n                },\n                &quot;...&quot;\n                },\n                &quot;triggers&quot;: {\n                &quot;...&quot;\n                }\n                },\n                &quot;parameters&quot;: {\n                &quot;$connections&quot;: {\n                &quot;value&quot;: {\n                &quot;sql&quot;: {\n                &quot;connectionId&quot;: &quot;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/CustomerResourceGroup/providers/Microsoft.Web/connections/MyCustomer-TheirProduct-SQLConnection-Prod&quot;,\n                &quot;connectionName&quot;: &quot;MyCustomer-TheirProduct-SQLConnection-Prod&quot;,\n                &quot;id&quot;: &quot;/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Web/locations/westeurope/managedApis/sql&quot;\n                }\n                }\n                },\n                &quot;SQL-Database-Name&quot;: {\n                &quot;value&quot;: &quot;production-database&quot;\n                },\n                &quot;SQL-Server&quot;: {\n                &quot;value&quot;: &quot;some.database.windows.net&quot;\n                }\n                }\n                }\n                </code></pre>\n\n                <p>Notice that the parameters are all filled out. We can't copy this into our ARM template since it's all real Resource ID references.</p>\n                <p>There's another way to get only the definition. We can use the <a href=\"https://docs.microsoft.com/en-us/powershell/module/az.logicapp\">Az.LogicApp</a> powershell module:</p>\n                <pre><code>(get-azlogicapp -resourcegroupname CustomerResourceGroup -name mycustomer-theirproduct-prod).definition.ToString()\n                </code></pre>\n\n                <p>It will give us only the <code>definition</code> part of the template.</p>\n                <p>Both gives us a means to put <em>only</em> the <em>definition</em> of the logic app into a file in our local project.</p>\n                <p>Now we can go back to the ARM template and replace the definition with a simple link to the file.\n                Say we <code>Set-Content</code> the result of the statement above into a file called &quot;logicapp.json&quot;. We can modify the ARM template as such:</p>\n                <pre><code>{\n                &quot;$schema&quot;: &quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&quot;,\n                &quot;contentVersion&quot;: &quot;1.0.0.0&quot;,\n                &quot;parameters&quot;: {\n                &quot;...&quot;\n                },\n                &quot;variables&quot;: {\n                &quot;...&quot;\n                },\n                &quot;resources&quot;: [\n                {\n                &quot;type&quot;: &quot;Microsoft.Web/connections&quot;,\n                &quot;...&quot;\n                },\n                {\n                &quot;type&quot;: &quot;Microsoft.Logic/workflows&quot;,\n                &quot;apiVersion&quot;: &quot;2017-07-01&quot;,\n                &quot;name&quot;: &quot;[variables('LogicAppName')]&quot;,\n                &quot;dependsOn&quot;: [ &quot;[resourceId('Microsoft.Web/connections', variables('ConnectionName'))]&quot; ],\n                &quot;location&quot;: &quot;westeurope&quot;,\n                &quot;properties&quot;: {\n                &quot;state&quot;: &quot;Enabled&quot;,\n                &quot;definition&quot;: {\n                &quot;templateLink&quot; {\n                &quot;uri&quot;: &quot;.\\logicapp.json&quot;\n                }\n                },\n                &quot;parameters&quot;: {\n                &quot;$connections&quot;: {\n                &quot;value&quot;: {\n                &quot;sql&quot;: {\n                &quot;connectionId&quot;: &quot;[resourceId('Microsoft.Web/connections', variables('ConnectionName'))]&quot;,\n                &quot;connectionName&quot;: &quot;variables('ConnectionName')&quot;,\n                &quot;id&quot;: &quot;/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Web/locations/westeurope/managedApis/sql&quot;\n                }\n                }\n                },\n                &quot;...&quot;\n                }\n                }\n                }\n                ]\n                }\n                </code></pre>\n\n                <p>By running <code>ARMLinker</code> we will have the same generated file as we started with,\n                but we can use the GUI for the logic app and easily fetch the new JSON for it.</p>\n                <pre><code>Convert-TemplateLinks azuredeploy.json azuredeploy.linked.json\n                </code></pre>\n\n                <p>For now, I've actually turned those around and put the &quot;linked&quot; template in a file called azuredeploy.linked.json in order to generate the &quot;conventional&quot; azuredeploy.json file.</p>\n                <h2>More options</h2>\n                <p>When using the &quot;copy content from the editor&quot; method mentioned above, we have to make sure to copy <em>only</em> the definition object. Otherwise we'll bring the concrete parameters into the local file.</p>\n                <p>Do not despair!</p>\n                <p>There's another option that doesn't match the official schema for &quot;templateLink&quot;.\n                By adding a property called &quot;jsonPath&quot; we can point to an object deeper in the linked file.\n                Say we copy the content from the online editor.</p>\n                <p>We can modify the linked template as such:</p>\n                <pre><code>&quot;definition&quot;: {\n                &quot;templateLink&quot; {\n                &quot;uri&quot;: &quot;.\\logicapp.json&quot;,\n                &quot;jsonPath&quot;: &quot;definition&quot;\n                }\n                },\n                </code></pre>\n\n                <p>It will now only merge the definition part from the logicapp.json file.</p>\n                <p>I only implemented dot separated paths for now, so exotic paths to arrays or paths with special characters won't work.</p>\n                <p>IE. <code>resources[0]['very fancy'].thing</code> won't work, but <code>things.with.dots</code> will work.</p>\n                <h2>Plans and dreams</h2>\n                <p>This is pretty much only a workaround while waiting for Microsoft to realise this is totally useful and obvious.</p>\n                <p>I originally intended it to be a Custom Tool for Visual Studio, but I could not for the life of me figure out how to enable Custom Tools in projects not of the C# or Visual Basic archetypes.</p>\n                <p>If anyone picks up on it, I'll happily discuss new features and even happierly receive meaningful pull requests.</p>\n                <p>Other than that, I believe it does the job properly. It can be used in CD pipelines. It should even work for any JSON, not necessarily ARM templates. </p>\n                <p>I would really appreciate your feedback, and hope you like it!</p>\n                <p>Now go commit and deploy something automagically while fetching coffee! 🤘😁🦄</p>\n                <h2>Code and gallery links</h2>\n                <p><a href=\"https://github.com/lars-erik/ARMLinker\">Github repository</a><br />\n                <a href=\"https://www.powershellgallery.com/packages/ARMLinker/1.0.1\">PowerShell gallery</a></p>\n            ",
        "category": [
            {
                "Value": "automation"
            },
            {
                "Value": "azure"
            }
        ],
        "guid": {
            "isPermaLink": false,
            "isPermaLinkSpecified": true,
            "Value": "1162"
        },
        "pubDate": "Wed, 22 Jan 2020 23:22:41 Z",
        "ListHeading": "ARMLinker 1.0.0 released",
        "ListSummary": {},
        "ContentTypeName": "Rss",
        "Url": "http://blog.aabech.no/archive/armlinker-100-released/",
        "SortOrder": 0,
        "SortDate": "2020-01-23T00:22:41+01:00",
        "Date": "2020-01-23T00:22:41+01:00"
    },
    {
        "title": "Environmental ApprovalTests",
        "link": "http://blog.aabech.no/archive/environmental-approvaltests/",
        "description": "\n                <h2>Background</h2>\n                <p>A while ago I wrote a <a href=\"//blog.aabech.no/archive/exploiting-approvaltests-for-clearer-tests/\">post about a tool called ApprovalTests</a>. I've included it in my workshop on unit testing Umbraco, and people are amazed at its usefulness. Having Visual Studio pop a diff in your face when stuff breaks is a real timesaver. However, when I ran the workshop at CodeGarden 18, I realized people were concerned that their tests would be impossible to run in CI environments and the like. Not to worry - ApprovalTests have you covered. (Pun intended)</p>\n                <h2>Environmentalism</h2>\n                <p>When declaring reporters with ApprovalTests, you can specify multiple reporters. That's not all. The reporters have an extensive API on them, which caters for us tailoring everything. There is one particularly interesting interface on all &quot;diff-reporters&quot; named <code>IEnvironmentAwareReporter</code>.<br />\n                The <code>VisualStudioReporter</code> one has a nice little one-liner implementation:</p>\n                <pre><code>public override bool IsWorkingInThisEnvironment(string forFile)\n                {\n                return OsUtils.IsWindowsOs() &amp;&amp; base.IsWorkingInThisEnvironment(forFile) &amp;&amp; LaunchedFromVisualStudio();\n                }\n                </code></pre>\n\n                <p>The last function call there checks if the current process is a descendent of <code>devenv.exe</code>. If it isn't, execution will just be passed to the next reporter in the chain. So there! It won't break your CI build.</p>\n                <p>But what do we want in our CI build, then? Probably a regular WhateverUnit assertion. I use NUnit, so that'll be our example.</p>\n                <h2>Falling back</h2>\n                <p>Take this little test. I approved the result for seed 1, and we'll examine the output for an invalid result by swapping to 2:</p>\n                <pre><code>[TestFixture]\n                [UseReporter(typeof(VisualStudioReporter))]\n                public class When_Running_In_Different_Environments\n                {\n                [Test]\n                public void Delegates_To_Most_Appropriate_Reporter()\n                {\n                var rnd = new Random(1);\n                var items = Enumerable\n                .Range(0, 10)\n                .Select(x =&gt; rnd.Next());\n                Approvals.VerifyAll(items, &quot;&quot;);\n                }\n                }\n                </code></pre>\n\n                <p>Let's change the seed to 2 to fail the test:</p>\n                <pre><code>var rnd = new Random(2);\n                </code></pre>\n\n                <p>Now if we run the test with NUnit3-Console.exe, we'll get an exception saying that ApprovalTests can't find Visual Studio:</p>\n                <pre><code>nunit3-console.exe .\\bin\\debug\\environmentaltests.dll\n\n                ...\n                1) Error : EnvironmentalTests.When_Running_In_Different_Environments.Delegates_To_Most_Appropriate_Reporter\n                System.Exception : Couldn't find Visual Studio at\n                at ApprovalTests.Reporters.GenericDiffReporter.Report(String approved, String received) in C:\\code\\ApprovalTests.Net\\ApprovalTests\\Reporters\\GenericDiffReporter.cs:line 142\n                ...\n                </code></pre>\n\n                <p>It sounds worse than it is. ApprovalTests insists that it has <em>something</em> to do. We can add a reporter to the fixture to fix it:</p>\n                <pre><code>[TestFixture]\n                [UseReporter(typeof(VisualStudioReporter), typeof(NUnitReporter))]\n                public class When_Running_In_Different_Environments\n                </code></pre>\n\n                <p>Now when we run the test, we get a pure assertion failure:</p>\n                <pre><code>1) Failed : EnvironmentalTests.When_Running_In_Different_Environments.Delegates_To_Most_Appropriate_Reporter\n                Expected string length 165 but was 162. Strings differ at index 6.\n                Expected: &quot;[0] = 534011718\\n[1] = 237820880\\n[2] = 1002897798\\n[3] = 165700...&quot;\n                But was:  &quot;[0] = 1655911537\\n[1] = 867932563\\n[2] = 356479430\\n[3] = 211537...&quot;\n                -----------------^\n                </code></pre>\n\n                <p>Notice it didn't even mention Visual Studio. Going back into our favorite IDE will start popping diffs again, and the NUnit one will govern the output.</p>\n                <h2>Cleaning up</h2>\n                <p>So should we go around declaring at least two reporters on all our fixtures, then? Luckily not. There are two more tricks that are nice to know.</p>\n                <p>First, the reporter attribute is found by iterating up the inheritance hierarchy. It can be defined as high up as all your <code>[assembly:XAttribute]</code> metadata. You can create a file in your test project root called <code>ApprovalsConfig.cs</code> for instance. Within it, you declare your reporters on the assembly level:</p>\n                <pre><code>using ApprovalTests.Reporters;\n\n                [assembly:UseReporter(typeof(VisualStudioReporter), typeof(NUnitReporter))]\n                </code></pre>\n\n                <p>The second is that you might not want the NUnit assertion when you run in VS (for some reason), or maybe some other tool might be in your way. You might even want composite reporters. In any case, it also makes for a bit nicer setup if you implement the <code>FirstWorkingReporter</code> class:</p>\n                <pre><code>public class EnvironmentReporter : FirstWorkingReporter\n                {\n                public static readonly EnvironmentReporter INSTANCE = new EnvironmentReporter();\n\n                public EnvironmentReporter()\n                : base(\n                VisualStudioReporter.INSTANCE,\n                NUnitReporter.INSTANCE\n                )\n                {\n                }\n                }\n                </code></pre>\n\n                <p>With it, we can change our <code>UseReporter</code> to be:</p>\n                <pre><code>[assembly:UseReporter(typeof(EnvironmentReporter))]\n                </code></pre>\n\n                <p>Now the first reporter to confirm its environment is executed, and the rest are ignored. You might want to keep the NUnit one around, though. In that case, you can implement <code>MultiReporter</code> in the same way - which coincidentally is the same that <code>UseReporterAttribute</code> does.</p>\n                <p>I encourage you to go have a look at <a href=\"https://github.com/approvals/ApprovalTests.Net/tree/master/ApprovalTests/Reporters\">all the built-in reporters</a> and get some inspiration for even more helpful reporting.</p>\n                <p>I'd rejoice for any cool usages in the discussion thread. :)</p>\n            ",
        "category": [
            {
                "Value": "unit testing"
            }
        ],
        "guid": {
            "isPermaLink": false,
            "isPermaLinkSpecified": true,
            "Value": "1139"
        },
        "pubDate": "Sun, 03 Jun 2018 21:24:46 Z",
        "ListHeading": "Environmental ApprovalTests",
        "ListSummary": {},
        "ContentTypeName": "Rss",
        "Url": "http://blog.aabech.no/archive/environmental-approvaltests/",
        "SortOrder": 0,
        "SortDate": "2018-06-03T23:24:46+02:00",
        "Date": "2018-06-03T23:24:46+02:00"
    },
    {
        "title": "Morphing UCommerce Products",
        "link": "http://blog.aabech.no/archive/morphing-ucommerce-products/",
        "description": "\n                <h2>The problem</h2>\n                <p>Today I had a new but fun challenge with UCommerce. Turns out, as usual, it's a great fit for my whims with architecture.\n                I was stuck between a rock and a hard place when I was looking at adding a custom pricing algoritm.\n                I can't go into details, but there's custom client pricing involved of course.\n                To add to the fun, we're mapping UCommerce products to DTOs for wire transfer. We could aslo have been mapping to view models or something else. To map we're using AutoMapper with quite a few configurations and jumps-through-hoops.</p>\n                <p>I had this code (ish):</p>\n                <pre><code>var products = productRepository.Select().Where(SomePredicate);\n                var mapped = products.Select(Mapper.Map&lt;ProductDto&gt;);\n                return mapped;\n                </code></pre>\n\n                <p>I immediately thought of a few options:</p>\n                <ul>\n                <li>Iterate over the products and change prices here</li>\n                <li>Create a Product adapter with additional logic and map from that</li>\n                <li>Execute the pricing logic from AutoMapper configuration</li>\n                </ul>\n                <p>They all seemed weird and out of place though. None seemed like they would be easy to find for the next developer. Not even with unit tests. It just didn't seem right.\n                Changing data on the entities would mean I'd have to go out of my way to ensure nobody went and saved those products later in the request. Creating an adapter would mean loads of new instances, bloated wrapper classes and weird names.\n                And finally executing business logic from AutoMapper configuration means I'd been mixing responsibilities en mass.</p>\n                <h2>UCommerce &amp; NHibernate to the rescue</h2>\n                <p>Luckily I've been using EntityFramework a lot and tried to force it into my Domain Driven Design patterns since it's infancy. I've been through the lot (and I enjoy it). So I kind of know what to expect from an ORM. When using UCommerce I'm stuck with NHibernate, but I haven't really been doing it justice by just leaving it in the background. (And fiddling with Entity Framework - which is just as good!)\n                Together the two systems are extremely powerful. UCommerce have even documented the possibilities,\n                though the documentation fails to point out the really juicy benefits.</p>\n                <p>We have <code>ProductDefintion</code>, right? It allows us to set up product types with different properties and variant options. It even supports inheritance. But we're still stuck with the <code>Product</code> class and its <code>GetProperty()</code> overrides. In my case, I'd like to have <code>ProductWithFancyPricing</code> so I could override that <code>GetPrice()</code> method. If I could have <code>ProductWithFancyPricing</code> and <code>ProductWithEvenFancierPricing</code> that would be totally awesome.</p>\n                <p>Turns out you can have your cake and eat it too. When properly using an ORM you can exploit OOP like it's supposed to and use polymorphism for varying behavior. It's possible to set up an inheritance tree so the mapper automatically handles creation of different types for you. You've basically got three options:</p>\n                <ul>\n                <li>\n                Table per concrete class (type)\n                <ul>\n                <li>All classes have a table of their own</li>\n                <li>Useful when base classes don't have (much) data</li>\n                </ul>\n                </li>\n                <li>\n                Table per hierarchy\n                <ul>\n                <li>One table per base class</li>\n                <li>Useful when <em>all</em> data is on the base class</li>\n                </ul>\n                </li>\n                <li>\n                Table per subclass\n                <ul>\n                <li>One common table for base data</li>\n                <li>Individual tables per derived class with only additional data</li>\n                <li>Useful when there are some data in both classes. (Think umbracoNode)</li>\n                </ul>\n                </li>\n                </ul>\n                <p>In my case, I don't need any new data on the derived classes. It's all there in <code>GetProperty()</code> anyway.\n                <em>(I will add some getters though. ModelsBuilder, anyone? )</em><br />\n                So for me it's going to be Table per hierarchy. The rest of the options are all viable for this technique if you have other requirements.\n                You can <a href=\"https://docs.ucommerce.net/ucommerce/v7.12/extending-ucommerce/extending-ucommerce-entities.html\">read a bit about it in the UCommerce docs</a>.</p>\n                <h2>Mapping some product types</h2>\n                <p><em>(I inadvertently wrote document types there. ModelsBuilder, anyone?)</em></p>\n                <p>In order to have NHibernate treat products as subclasses with the Table per hierarchy strategy it needs a way to pick the right class for each record. That way is known as discriminator columns. I first thought I could just discriminate by the ProductDefinitionId, but it turns out NHibernate doesn't support discriminating on a column already in use for associations (foreign keys) or other means.<br />\n                We have to add a column. I just call it &quot;Discriminator&quot; and make it a varchar.</p>\n                <pre><code>alter table uCommerce_Product add Discriminator nvarchar(max)\n                </code></pre>\n\n                <p>Then we need some entities. I added a couple of docu... product types:</p>\n                <pre><code>public class ProductWithFancyPricing : UCommerce.EntitiesV2.Product\n                {\n                public override Money GetPrice(PriceGroup priceGroup)\n                {\n                var price = base.GetPrice(priceGroup);\n                if (IsChristmas())\n                {\n                price = new Money(price.Value * 2, price.Culture, price.Currency);\n                }\n                return base.GetPrice(priceGroup);\n                }\n                }\n\n                public class ProductWithEvenFancierPricing : UCommerce.EntitiesV2.Product\n                {\n                public override Money GetPrice(PriceGroup priceGroup)\n                {\n                var blackMarket = ObjectFactory.Instance.Resolve&lt;IBlackMarketService&gt;();\n                var priceValue = blackMarket.GetPrice(Sku);\n                return new Money(priceValue, priceGroup.Currency);\n                }\n                }\n                </code></pre>\n\n                <p>The next thing you need is to tell NHibernate that these are our new product classes:</p>\n                <pre><code>public class ProductWithFancyPricingMapping : FluentNHibernate.Mapping.SubclassMap&lt;ProductWithFancyPricing&gt;\n                {\n                public ProductWithFancyPricingMapping()\n                {\n                DiscriminatorValue(&quot;Product with fancy pricing&quot;);\n                }\n                }\n\n                public class ProductWithEvenFancierPricingMapping : FluentNHibernate.Mapping.SubclassMap&lt;ProductWithEvenFancierPricing&gt;\n                {\n                public ProductWithEvenFancierPricingMapping()\n                {\n                DiscriminatorValue(&quot;Product with naughty pricing&quot;);\n                }\n                }\n                </code></pre>\n\n                <p>We also need to subclass UCommerce's mapping for Product in order to tell UCommerce which column to use as the discriminator:</p>\n                <pre><code>public class ProductMap : global::UCommerce.EntitiesV2.Maps.ProductMap\n                {\n                public ProductMap()\n                {\n                DiscriminateSubClassesOnColumn(&quot;Discriminator&quot;);\n                }\n                }\n                </code></pre>\n\n                <p>Finally we need a class in the same assembly with a tag on it. <a href=\"https://docs.ucommerce.net/ucommerce/v7.12/extending-ucommerce/save-custom-data-in-the-database.html\">More on that in the UCommerce docs</a>.</p>\n                <pre><code>public class MappingMarker : IContainsNHibernateMappingsTag\n                {\n                }\n                </code></pre>\n\n                <p>To have NHibernate pick the right classes now, we just need to fix the existing products if we have any.\n                I have called my discriminator values the same as my document types, so I can easily construct a query as such:</p>\n                <pre><code>update\n                ucommerce_product\n                set\n                discriminator = case productdefinitionid\n                when 10 then 'Product with fancy pricing'\n                when 11 then 'Product with naughty pricing'\n                else null\n                end\n                </code></pre>\n\n                <p>Now if we go...</p>\n                <pre><code>var products = productRepository.Select();\n                </code></pre>\n\n                <p>...we'll get a bounch of <code>ProductWithFancyPricings</code> and <code>ProductWithEvenFancierPricing</code>.\n                If you have more types, you might get into trouble though. You need to have a discriminator on them all.</p>\n                <h2>The final hurdle</h2>\n                <p>So that's cool. That's really cool. But there's one hurdle we have to jump over before we can cross the goal line. From very nasty experiences I knew I had to test <em>everything</em> manually and integrated. So I went and tried to see what happened if I added a product through the UCommerce Admin UI.</p>\n                <p><em>boom</em> :)</p>\n                <p>'Course it didn't work. It actually did, and didn't. Several weird things happened ranging from strange NHibernate mapping exceptions to products getting the discriminator &quot;UCommerce.EntitiesV2.Product&quot;. (Which makes a lot of sense if you think about it)</p>\n                <p>The @#¤%&amp; <code>CreateCategoryOrProduct.as[p|c]x</code> WebForms control is in our way. It instantiates a <code>Product</code> and saves it. It's completely sealed and unconfigurable. We could overwrite it with a custom one, but that would open another can of worms with regards to upgrading, source control and what-not. Luckily it's going away very very soon in UCommerce V8. (2018?)</p>\n                <p>After hacking at it a bit my final resolve was to add a step right after save in the product saving pipeline. Again, UCommerce is so versatile that even when it sucks, it's got a golden workaround right up its arm.\n                If you're not familiar with UCommerce Pipelines, <a href=\"https://docs.ucommerce.net/ucommerce/v7.12/extending-ucommerce/create-pipeline-task.html\">go read about it here</a>.</p>\n                <p>Here's the extra configuration. (In a .config file included from UCommerce's custom.config)</p>\n                <pre><code>&lt;!-- PRODUCT CLASS FIX --&gt;\n                &lt;component id=&quot;SaveProduct&quot;\n                service=&quot;UCommerce.Pipelines.IPipeline`1[[UCommerce.EntitiesV2.Product, UCommerce]], UCommerce&quot;\n                type=&quot;UCommerce.Pipelines.Catalog.ProductPipeline, UCommerce.Pipelines&quot;&gt;\n                &lt;parameters&gt;\n                &lt;tasks&gt;\n                &lt;array&gt;\n                &lt;value&gt;${Product.UpdateRevision}&lt;/value&gt;\n                &lt;value&gt;${Product.Save}&lt;/value&gt;\n                &lt;value&gt;${FixProductClass}&lt;/value&gt;\n                &lt;value&gt;${Product.IndexAsync}&lt;/value&gt;\n                &lt;/array&gt;\n                &lt;/tasks&gt;\n                &lt;/parameters&gt;\n                &lt;/component&gt;\n\n                &lt;component id=&quot;FixProductClass&quot;\n                service=&quot;UCommerce.Pipelines.IPipelineTask`1[[UCommerce.EntitiesV2.Product, UCommerce]], UCommerce&quot;\n                type=&quot;My.Awesome.Site.Persistence.FixProductClassTask, My.Awesome.Site.UCommerce&quot;/&gt;\n                </code></pre>\n\n                <p>A pipeline task gets a reference to the entity being handled, so we can't just go and replace the entire product with an instance of the right type. But we can fake it and force the database value to be correct after saving.\n                UCommerce uses NHibernate level 2 cache, so we need to flush that as well, but we'll get to that.</p>\n                <p>Forcing the database is fairly easy. We have to resort to good old ADO code, which was actually a joyful little deja-vu experience (although I'm glad it was brief):</p>\n                <pre><code>public class FixProductClassTask : IPipelineTask&lt;Product&gt;\n                {\n                private readonly IStatelessSessionProvider sessionProvider;\n\n                public FixProductClassTask(IStatelessSessionProvider sessionProvider)\n                {\n                this.sessionProvider = sessionProvider;\n                }\n\n                public PipelineExecutionResult Execute(Product subject)\n                {\n                var command = sessionProvider.GetStatelessSession().Connection.CreateCommand();\n                command.CommandText = &quot;UPDATE uCommerce_Product SET Discriminator = @discriminator WHERE ProductId = @productId&quot;;\n                command.CommandType = CommandType.Text;\n                var discriminatorParam = command.CreateParameter();\n                discriminatorParam.ParameterName = &quot;discriminator&quot;;\n                discriminatorParam.Value = subject.ProductDefinition.Name;\n                var idParam = command.CreateParameter();\n                idParam.ParameterName = &quot;productId&quot;;\n                idParam.Value = subject.Id;\n                command.Parameters.Add(discriminatorParam);\n                command.Parameters.Add(idParam);\n                command.ExecuteNonQuery();\n\n                // TODO: Clear cache\n\n                return PipelineExecutionResult.Success;\n                }\n                }\n                </code></pre>\n\n                <p>I'm sure a lot of sazzy devs out there could prettify this a bit, but it does the job. Insert a <a href=\"/archive/kill-switch-weve-got-action/\">switch/case (please don't)</a> or whatever you fancy if the product definition name isn't what you discriminate by. I'll leave it up to you to choose between strings, ints or even enums for performance vs. readability.</p>\n                <p>If you've turned off the level 2 cache, you might be fine with this. Otherwise we'd better &quot;evict&quot; the entity from the cache. We need to do that in order for the cached instance to change type from <code>Product</code> to <code>ProductWithFancyPricing</code>. Sadly the NHibernate <code>SessionFactory</code> in charge of doing this is hidden in an internal static field in UCommerce, so we need to resort to some nasty reflection to do it:</p>\n                <pre><code>// ...\n                command.ExecuteNonQuery();\n\n                var fieldInfo = typeof(SessionProvider).GetField(&quot;_factory&quot;, BindingFlags.Static | BindingFlags.NonPublic);\n                if (fieldInfo == null) throw new Exception(&quot;SessionFactory instance has moved in this UCommerce version. %(&quot;);\n                var sessionFactory = (ISessionFactory)fieldInfo.GetValue(null);\n                sessionFactory.Evict(typeof(Product), subject.Id);\n\n                return PipelineExecutionResult.Success;\n                // ...\n                </code></pre>\n\n                <p>Et voilá! We can now save new products, and they immediately morph into the correct derived type.\n                (Except for when being saved to RavenDB for the first time, ref. the config).</p>\n                <p>I'm now free to go back into the instances and implement however naughty pricing I fancy. \\o/</p>\n                <h2>Added bonuses</h2>\n                <p>I already <a href=\"https://docs.ucommerce.net/ucommerce/v7.12/extending-ucommerce/save-custom-data-in-the-database.html\">have a custom entity in the database and NHibernate model</a>. It has two associations to <code>Product</code>. Had I realized what I had under my fingertips it would already have been collections on my new shiny subclasses.</p>\n                <p>I recon you noticed I referenced ModelsBuilder a couple of times. How 'bout having all your properties statically typed on your product instances. How about some interfaces?</p>\n                <p>I'm sure you're getting the drift.</p>\n                <p>I for one am quite embarrased I didn't think of this before. I've had the knowledge and tools for years. But there you go. We learn something every day. And I love doing it with Umbraco, UCommerce, EntityFramework and apparently now also... NHibernate. :)</p>\n            ",
        "category": [
            {
                "Value": "umbraco"
            },
            {
                "Value": "ucommerce"
            }
        ],
        "guid": {
            "isPermaLink": false,
            "isPermaLinkSpecified": true,
            "Value": "1138"
        },
        "pubDate": "Tue, 30 Jan 2018 23:48:27 Z",
        "ListHeading": "Morphing UCommerce Products",
        "ListSummary": {},
        "ContentTypeName": "Rss",
        "Url": "http://blog.aabech.no/archive/morphing-ucommerce-products/",
        "SortOrder": 0,
        "SortDate": "2018-01-31T00:48:27+01:00",
        "Date": "2018-01-31T00:48:27+01:00"
    },
    {
        "title": "Umbraco Unit Testing Workshop Material",
        "link": "http://blog.aabech.no/archive/umbraco-unit-testing-workshop-material/",
        "description": "\n                <p>For this years Umbraco UK Festival I was honored to be invited to run a unit testing workshop. It's a culmination of my talks and workshops until now, and covers everything you need to get going with testing the Umbraco backoffice, controller logic, external calls and finally front-end UI.</p>\n                <p>I know there's demand for this kind of training, and it might be difficult to get to the conferences where it's happening. For those of you, and those who feel bold and confident, I've released the material under the MIT license.</p>\n                <p>I can't promise I'll be able to help out if you go at it, but keep an eye out for a conference near you and encourage the organizers to host a workshop. ;)</p>\n                <p>You can clone the &quot;workshop-start&quot; branch from Bitbucket. The slides and workbook are included at the root of the repo.</p>\n                <p>https://bitbucket.org/bleedo/umbraco-testing-workshop-h2-2017/src/?at=workshop-start</p>\n                <p>You'll need</p>\n                <ul>\n                <li>node</li>\n                <li>npm task runner (visual studio extension)</li>\n                <li>razorgenerator (visual studio extension)</li>\n                </ul>\n                <p>Happy testing!</p>\n            ",
        "category": [
            {
                "Value": "umbraco"
            },
            {
                "Value": "unit testing"
            }
        ],
        "guid": {
            "isPermaLink": false,
            "isPermaLinkSpecified": true,
            "Value": "1137"
        },
        "pubDate": "Thu, 09 Nov 2017 10:09:16 Z",
        "ListHeading": "Umbraco Unit Testing Workshop Material",
        "ListSummary": {},
        "ContentTypeName": "Rss",
        "Url": "http://blog.aabech.no/archive/umbraco-unit-testing-workshop-material/",
        "SortOrder": 0,
        "SortDate": "2017-11-09T11:09:16+01:00",
        "Date": "2017-11-09T11:09:16+01:00"
    },
    {
        "title": "Automating Umbraco with PowerShell",
        "link": "http://blog.aabech.no/archive/automating-umbraco-with-powershell/",
        "description": "\n                <h2>Background</h2>\n                <p>This particular example is for warming up a UCommerce site in staging, but the technique can be used for anything you can do in the Umbraco backoffice. Especially with the new REST APIs coming out.</p>\n                <p>In this particular case, I've sinned and not created a good test environment for the last few integration bits of a project. It was hard to tune the production behavior of some code without actually running it in production. However, it's running Umbraco 7.5.13 and UCommerce 7.7. It's probably missing the other performance fix too, but the result is that it takes quite a while to warm up everything. So we warm it up in staging and then swap slots to get it fresh, awake and blazing fast into production. </p>\n                <h2>Resolve</h2>\n                <p>After having done this a few times, I figured I wanted something to do while waiting. What better activity than automating the whole routine so I could do something else instead? (Like automating automation...) Here's a powershell script I ended up with to warm up everything in the backoffice. I'll go through the pieces below.</p>\n                <pre><code>Param(\n                [string]$password\n                )\n\n                $ws = New-Object Microsoft.PowerShell.Commands.WebRequestSession\n\n                $body = @{\n                &quot;username&quot;=&quot;admin@admin.com&quot;\n                &quot;password&quot;=$password\n                }\n\n                $json = $body | ConvertTo-Json\n\n                Invoke-RestMethod `\n                -Method Post `\n                -ContentType &quot;application/json&quot; `\n                -Uri &quot;https://customer-staging.azurewebsites.net/umbraco/backoffice/UmbracoApi/Authentication/PostLogin&quot; `\n                -WebSession $ws `\n                -Body $json\n\n                Write-Host &quot;20%&quot;\n\n                Invoke-RestMethod -Method Get -Uri &quot;https://customer-staging.azurewebsites.net/umbraco/ucommerce/catalog/editcategory.aspx?id=718&quot; -WebSession $ws\n\n                Write-Host &quot;40%&quot;\n\n                Invoke-RestMethod -Method Get -Uri &quot;https://customer-staging.azurewebsites.net/umbraco/ucommerce/catalog/editproduct.aspx?id=465&amp;parentcategoryId=718&quot; -WebSession $ws\n\n                Write-Host &quot;60%&quot;\n                Invoke-RestMethod -Method Get -Uri &quot;https://customer-staging.azurewebsites.net/umbraco/ucommerce/settings/orders/editpaymentmethod.aspx?id=8&quot; -WebSession $ws\n\n                Write-Host &quot;80%&quot;\n\n                Invoke-RestMethod -Method Get -Uri &quot;https://customer-staging.azurewebsites.net/umbraco/ucommerce/settings/orders/editshippingmethod.aspx?id=10&quot; -WebSession $ws\n                Write-Host &quot;100%&quot;\n                </code></pre>\n\n                <p>The effect is that we log into Umbraco using a provided password, and instead of navigating and clicking everything, we fire a request triggering all the caching and JIT compilation for us. Even though I'm using the <code>Invoke-RestMethod</code> cmdlet, I can do regular web calls. The cmdlet has a sibling called <code>Invoke-WebRequest</code>, but the rest version is better for posting commands. It's mostly a matter of mental context, but they have a few differences.</p>\n                <h2>Log into Umbraco</h2>\n                <p>To set up an authorized session with Umbraco, we can call the PostLogin action. It's the same endpoint that is used from the login screen. An authorized session means that we need to get a cookie and pass it with all our requests. In order for each <code>Invoke-RestMethod</code> to pass this cookie, we can create a <code>WebRequestSession</code> we pass to each call:</p>\n                <pre><code>$ws = New-Object Microsoft.PowerShell.Commands.WebRequestSession\n\n                Invoke-RestMethod -WebSession $ws -Uri &quot;...&quot;\n                </code></pre>\n\n                <p>If the response brings a cookie, it's kept in the <code>WebRequestSession</code>, and subsequently passed back with each new request. Just like a browser.</p>\n                <p>Then we need some JSON to pass our username and password. You can declare dictionaries of sorts in PowerShell like so:</p>\n                <pre><code>$body = @{\n                &quot;username&quot;=&quot;admin@admin.com&quot;\n                &quot;password&quot;=$password\n                }\n                </code></pre>\n\n                <p>And then convert it to JSON by piping it to the <code>ConvertTo-Json</code> cmdlet:</p>\n                <pre><code>$json = $body | ConvertTo-Json\n                </code></pre>\n\n                <p>Finally we're ready to fire the request off to Umbraco, adding config for HTTP method, ContentType etc.:</p>\n                <pre><code>Invoke-RestMethod `\n                -Method Post `\n                -ContentType &quot;application/json&quot; `\n                -Uri &quot;https://customer-staging.azurewebsites.net/umbraco/backoffice/UmbracoApi/Authentication/PostLogin&quot; `\n                -WebSession $ws `\n                -Body $json\n                </code></pre>\n\n                <h2>Automate Umbraco</h2>\n                <p>For this I just needed to kick off a request to some pages, but posting messages around like rebuilding a grumpy index, running an ad hoc task, even publishing should be just as simple.</p>\n                <p>It takes a while, so I added a little status message. I'm sure PowerShell wizards would pack this stuff into better reusable parts.</p>\n                <pre><code>Write-Host &quot;20%&quot;\n                </code></pre>\n\n                <p>Now reuse that <code>WebRequestSession</code> object to fire off new <em>authenticated</em> requests:</p>\n                <pre><code>Invoke-RestMethod -WebSession $ws -Method Get -Uri &quot;https://customer-staging.azurewebsites.net/umbraco/ucommerce/catalog/editcategory.aspx?id=718&quot;\n                </code></pre>\n\n                <h2>Do it everywhere</h2>\n                <p>With all the love I can give to UCommerce, I ended up naming the script <code>kick-ucommerce.ps1</code>. It's like kicking your old belowed car to get it started, after you've polished it. Really!<br />\n                Adding my source folder to the path environment variable makes the script available from any shell. Even the Package Manager console in Visual Studio. </p>\n                <p><img src=\"http://blog.aabech.no/media/1034/warmup-ucommerce.png\" alt=\"Warm up UCommerce\" /></p>\n                <p>Make a note that the password is a parameter. You do change it more often than you'd like to update the code right? How 'bout automating the process? ;)</p>\n                <h2>Smoke test and swap the Azure slot</h2>\n                <p>I'll leave the swap-slot script I run after warming up the site here too. The cool thing about warming up with the script is that it'll fail almost immediately on the Umbraco login if anything isn't like it should. So it doubles as a smoke test.</p>\n                <p>When everything looks good, I can just go:</p>\n                <pre><code>swap-slot -from staging -to production -site customer-x\n                </code></pre>\n\n                <p>And here's the &quot;simpleness&quot; of that one. There are fairly good docs on all the Azure cmdlets over on Microsoft's sites. (Ask Google. ;) )</p>\n                <pre><code>Param(\n                [string]$site,\n                [string]$from,\n                [string]$to\n                )\n\n                $subscriptionId = &quot;333112F4-4483-449C-A2DA-727E8D2E428D&quot;\n                $resourcegroupname = &quot;Common-Group&quot;     # Might need to be param\n\n                Login-AzureRmAccount -SubscriptionId $subscriptionId\n\n                Swap-AzureRmWebAppSlot `\n                -SourceSlotName $from `\n                -DestinationSlotName $to `\n                -Name $site `\n                -ResourceGroupName $resourcegroupname\n                </code></pre>\n\n                <p>That's it! Now go automate something so you get more time to do fun stuff! :)</p>\n            ",
        "category": [
            {
                "Value": "umbraco"
            },
            {
                "Value": "automation"
            }
        ],
        "guid": {
            "isPermaLink": false,
            "isPermaLinkSpecified": true,
            "Value": "1136"
        },
        "pubDate": "Tue, 07 Nov 2017 19:46:14 Z",
        "ListHeading": "Automating Umbraco with PowerShell",
        "ListSummary": {},
        "ContentTypeName": "Rss",
        "Url": "http://blog.aabech.no/archive/automating-umbraco-with-powershell/",
        "SortOrder": 0,
        "SortDate": "2017-11-07T20:46:14+01:00",
        "Date": "2017-11-07T20:46:14+01:00"
    },
    {
        "title": "Exploiting ApprovalTests for clearer tests",
        "link": "http://blog.aabech.no/archive/exploiting-approvaltests-for-clearer-tests/",
        "description": "\n                <h2>What's this for?</h2>\n                <p>Ever written several asserts in one test because you have a big graph you want to verify? How 'bout files or maybe <a href=\"/archive/testing-views-with-razorgenerator\">razor views</a>? Several asserts often clutter up the tests. Big strings also make the actuall calls hard to see for all that content. Putting big strings in files is a good idea to avoid that, but few people do. It adds another &quot;menial&quot; task when you're in the zone. But what if it was dead easy?</p>\n                <p>I once maintained a Resharper extension, and their example tests had so called &quot;gold&quot; files that they compared to output. The squigglies was represented by special characters around terms. So they just compared the output of a text renderer to the text in a file. Great idea. One limitation though: with a regular Assert.Equals you just see the segment around the first mismatch. Guess what, there's a tool that's been around for at least 10 years that solves all those issues, and more.</p>\n                <h2>Approval tests, eh?</h2>\n                <p>Sounds a bit like acceptance tests, right? Don't be fooled, it's purpose is to serve all the way down to the &quot;unit test layer&quot; of your tests. I've found it to be a huge timesaver, as well as making my tests so much more clear.</p>\n                <p>I know you're thinking &quot;Shut up and give me an example, then!&quot;, so let's have a look. I've got this unit test from my post about <a href=\"/archive/testing-views-with-razorgenerator\">testing razor views</a> that I never really asserted anything in. I just output the result to console and assert inconclusive. Here it is for reference:</p>\n                <pre><code>[TestFixture]\n                public class When_Displaying_An_Event\n                {\n                [Test]\n                public void It_Is_Rendered_With_A_Name_Date_And_A_Link()\n                {\n                var view = new _Views_Partials_Event_cshtml();\n                var actionResult = GetConcertEvent();\n\n                Assert.AreEqual(&quot;Event&quot;, actionResult.ViewName);\n\n                var renderedResult = view.Render((Event) actionResult.Model);\n\n                Console.WriteLine(renderedResult);\n                Assert.Inconclusive(&quot;Way too big to assert here.&quot;);\n                }\n                }\n                </code></pre>\n\n                <p>It outputs the following HTML:</p>\n                <pre><code>&lt;div&gt;\n                &lt;a href=&quot;https://eventsite/123&quot;&gt;\n                &lt;label&gt;\n                Concert of your life\n                &lt;/label&gt;\n                &lt;span&gt;\n                fredag 31. desember 2049 23.59\n                &lt;/span&gt;\n                &lt;/a&gt;\n                &lt;/div&gt;\n                </code></pre>\n\n                <h2>Let's see it</h2>\n                <p>Now let's assert this with ApprovalTests. To use it, you just <code>install-package ApprovalTests</code> with your trusty package manager console. Make sure to install it in your test project. ;)</p>\n                <p>Now instead of <code>Assert</code>, we ask ApprovalTests to <code>Verify</code> our data instead. It even has a special overload for this concrete case: <code>Approvals.VerifyHtml</code>. So we rewrite the test as such:</p>\n                <pre><code>[Test]\n                public void It_Is_Rendered_With_A_Name_Date_And_A_Link()\n                {\n                var view = new _Views_Partials_Event_cshtml();\n                var actionResult = GetConcertEvent();\n\n                Assert.AreEqual(&quot;Event&quot;, actionResult.ViewName);\n\n                var renderedResult = view.Render((Event) actionResult.Model);\n\n                Approvals.VerifyHtml(renderedResult);\n                }\n                </code></pre>\n\n                <p>Now when we run our test, we get this nice little welcoming message from ApprovalTests:</p>\n                <p><img src=\"http://blog.aabech.no/media/1033/welcome-to-approvaltests.png\" alt=\"Exception: Welcome to ApprovalTests\" /></p>\n                <p>It tells us we're missing a vital part: A reporter. It's possible to use <code>DiffReporter</code> to launch your favorite configured difftool. But if you're in Visual Studio, there's a special treat: <code>VisualStudioReporter</code>. Let's add that to our fixture and see what happens:</p>\n                <pre><code>[UseReporter(typeof(VisualStudioReporter))]\n                [TestFixture]\n                public class When_Displaying_An_Event\n                {\n                [Test]\n                public void It_Is_Rendered_With_A_Name_Date_And_A_Link()\n                {\n                // ...\n                }\n                }\n                </code></pre>\n\n                <p>And we run it:</p>\n                <p><img src=\"http://blog.aabech.no/media/1032/first-result.png\" alt=\"ApprovalTests first result have empty approved\" /></p>\n                <p>What hits you is probably the big failure statement there, but look again - up at the top there.\n                We've got a diff opened, the result on the left hand and a big green field on the right side.<br />\n                What just happened is that ApprovalTests took our result, stored it in a received file, and at the same time wrote an empty &quot;approved&quot; file. It then proceeded to compare, and finally pop a diff of those two files.<br />\n                Isn't that just beautiful? Everything that makes your test fail in one clear diagram.</p>\n                <p>The &quot;procedure to follow&quot; here, is to &quot;approve&quot; results when you're happy. To do that, you just copy and paste. Let's do that now:</p>\n                <p><img src=\"http://blog.aabech.no/media/1030/first-approved.png\" alt=\"First approved with invalid indenting\" /></p>\n                <p><em>If you've got ReSharper, it's probably gonna try to format everything nicely when you paste. To have it in the original, ugly indentation state, press Ctrl+Z (undo) once after pasting.</em></p>\n                <p><em>Regarding the indentation that's off. It seems to be a bug with HTML in the current version of ApprovalTests, so stupid me for choosing this example. I'll update the post if it gets fixed.</em></p>\n                <p>We can now run our test again, and it's gonna pass. When it passes, it doesn't bother to open the diff.</p>\n                <p><img src=\"http://blog.aabech.no/media/1031/first-passing.png\" alt=\"It passes with an approved file\" /></p>\n                <p>This means we're just gonna get diffs for whatever is currently failing. Even if we run our entire suite of tests. Now there's a couple of housekeeping things to keep in mind:</p>\n                <h2>Commit approvals only</h2>\n                <p>If you were paying attention, you noticed we got two files adjacent to our test source file. One is named [TestFixtureName].[TestMethodName].received.html and one is named [TestFixtureName].[TestMethodName].approved.html. If you ran a test that passed, you'll actually just have your approved file. <strong>You want those approved files in source control!</strong></p>\n                <p>The received files though, might end up not being cleaned up for one or the other reason. Hopefully just that you didn't bother to commit a fully passing build. I'm sure you didn't do that to the master branch, though. In any case, make sure to <em>ignore</em> your received files. This pattern in .gitignore generally does the trick:</p>\n                <p><code>*.received.*</code> </p>\n                <h2>That's just the tip of the iceberg</h2>\n                <p>We've seen the <code>VerifyHtml</code> bit. One of my personal favorites is it's sibling <code>VerifyJson</code>. I keep an extension on <code>object</code> in my tests, called <code>.ToJson()</code>. With it, I can just go:</p>\n                <pre><code>Approvals.VerifyJson(myBigGraph.ToJson());\n                </code></pre>\n\n                <p>The diff is done with prettified JSON, so it's super simple to find the property / area that has changed or doesn't work. Knowing the area of the graph should also make it easier to find the usage that is wrong.</p>\n                <p>There's a vanilla <code>Verify</code> method too, and it saves plain text files. It's useful in cases where you have nice <code>ToString()</code> implementations. Let's try with a &quot;person&quot;:</p>\n                <pre><code>public class Person\n                {\n                public string FirstName { get; set; }\n                public string LastName { get; set; }\n                public int Age { get; set; }\n\n                public override string ToString()\n                {\n                return $&quot;{FirstName} {LastName} ({Age})&quot;;\n                }\n                }\n\n                [Test]\n                public void Comparing_Objects()\n                {\n                var person = new Person\n                {\n                FirstName = &quot;Lars-Erik&quot;,\n                LastName = &quot;Aabech&quot;,\n                Age = 19\n                };\n\n                Approvals.Verify(person);\n                }\n                </code></pre>\n\n                <p>It produces the following .received file:</p>\n                <pre><code>Lars-Erik Aabech (19)\n                </code></pre>\n\n                <p>It can be approved like that.<br />\n                We can also do lists with &quot;big brother&quot; <code>VerifyAll</code>:</p>\n                <pre><code>[Test]\n                public void Comparing_Lists()\n                {\n                var list = new List&lt;Person&gt;\n                {\n                new Person {FirstName = &quot;Lars-Erik&quot;, LastName = &quot;Aabech&quot;},\n                new Person {FirstName = &quot;Dear&quot;, LastName = &quot;Reader&quot;}\n                };\n\n                Approvals.VerifyAll(list, &quot;&quot;);\n                }\n                </code></pre>\n\n                <p>Which, unsurprisingly outputs:</p>\n                <pre><code>[0] = Lars-Erik Aabech\n                [1] = Dear Reader\n                </code></pre>\n\n                <p>Now how bout that?<br />\n                I don't know how quickly you got hooked, but I certainly find it sneaking into more and more of my tests.</p>\n                <p>It can even do images, but I'll let <a href=\"http://jamessouth.me/\">James</a> blog about that one.</p>\n                <p>So what are you lingering around here for? Run over to nuget and get your copy, or lurk around some more at the <a href=\"http://approvaltests.sourceforge.net/\">ApprovalTests</a> project site. There's great examples, even though they might not be in your favorite language.</p>\n                <p>Happy approving! :)</p>\n            ",
        "category": [
            {
                "Value": "unit testing"
            }
        ],
        "guid": {
            "isPermaLink": false,
            "isPermaLinkSpecified": true,
            "Value": "1133"
        },
        "pubDate": "Mon, 23 Oct 2017 20:14:08 Z",
        "ListHeading": "Exploiting ApprovalTests for clearer tests",
        "ListSummary": {},
        "ContentTypeName": "Rss",
        "Url": "http://blog.aabech.no/archive/exploiting-approvaltests-for-clearer-tests/",
        "SortOrder": 0,
        "SortDate": "2017-10-23T22:14:08+02:00",
        "Date": "2017-10-23T22:14:08+02:00"
    },
    {
        "title": "UmbracoSupport got typed content",
        "link": "http://blog.aabech.no/archive/umbracosupport-got-typed-content/",
        "description": "\n                <h2>What's UmbracoSupport?</h2>\n                <p><code>UmbracoSupport</code> is a class I've been introducing to my unit tests over the last year or so.\n                It allows me to have my own hierarchy for tests, as well as re-using all of Umbraco's own\n                stubbing code. I've written about it in a post called <a href=\"/archive/the-basics-of-unit-testing-umbraco-just-got-simpler\">Unit testing Umbraco just got simpler</a>,\n                and its gut's code is described in details in <a href=\"/archive/the-basics-of-unit-testing-umbraco\">The basics of unit testing Umbraco</a>.</p>\n                <h2>A quick primer on what's already available</h2>\n                <p>The <code>BaseDatabaseFactoryTest</code> in <code>Umbraco.Tests</code> has a method called <code>GetXmlContent</code>.\n                It replaces the <code>umbraco.config</code> file that acts as the cache at runtime.\n                It makes <code>UmbracoContext.Current.ContentCache</code> tick in unit tests.\n                The base tests out of the box has a small flaw though. They can't &quot;popuplate&quot; properties.\n                All you get is the hierarchy.</p>\n                <p>Usually I've injected an <code>IPublishedContentCache</code> to my controllers. When testing them,\n                I've created a mock instance of the <code>IPublishedContentCache</code>. However, all my code has to use\n                the non-context aware overloads. For instance <code>cache.GetById(umbracoContext, false, id)</code>.\n                There's also a whole lot of ugly mocking code going on to set up queries and stubbed content.\n                How to stub properties on stubbed content is described in <a href=\"/archive/slides-from-cg16-and-testing-ipublishedcontent-properties/\">Slides from CG 2016 and testing IPublishedContent properties</a>.</p>\n                <h2>So what's new?</h2>\n                <p>As mentioned, I've been throwing around all kinds of ugly stubbing code for content and I've also been tampering with <code>Umbraco.Tests</code>'s <code>GetXmlContent()</code> to use the &quot;built-in&quot; content stubs.\n                It's all been done before in misc. tests in Umbraco. I finally got my s**t together and refactored all my setup spaghetti into a few small helpers on the <code>UmbracoSupport</code> class.</p>\n                <p>Let's go over them in increasing &quot;integrationness&quot;.</p>\n                <h2>Pure hierarchy</h2>\n                <p>Your basic hierarchy structure can be set up by simply returning a string from an overload of <code>BaseDatabaseFactoryTest.GetXmlContent</code>. <code>UmbracoSupport</code> overloads this method and returns whatever you've set on the <code>UmbracoSupport.ContentCacheXml</code> property. I recommend using the technique described in <a href=\"/archive/automating-creation-of-source-data-for-tests\">Automating creating of source data for tests</a> with this. You can even extend that code to have fixture specific content caches.</p>\n                <p>In any case, to make this work, you just need to set the XML in the setup method.</p>\n                <p><em>Note: I've got some probs with the markdown parsing here, imagine the CDATA parts of the XML is correctly written.</em></p>\n                <pre><code>[SetUp]\n                public void Setup()\n                {\n                umbracoSupport = new UmbracoSupport();\n                umbracoSupport.SetupUmbraco();\n\n                // This XML is what the ContentCache will represent\n                umbracoSupport.ContentCacheXml = @&quot;\n                &lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;utf-8&quot;&quot;?&gt;\n                &lt;!DOCTYPE root [\n                &lt;!ELEMENT contentBase ANY&gt;\n                &lt;!ELEMENT home ANY&gt;\n                &lt;!ATTLIST home id ID #REQUIRED&gt;\n                &lt;!ELEMENT page ANY&gt;\n                &lt;!ATTLIST page id ID #REQUIRED&gt;\n                ]&gt;\n                &lt;root id=&quot;&quot;-1=&quot;&quot;&quot;&quot;&gt;\n                &lt;home id=&quot;&quot;1103=&quot;&quot;&quot;&quot; key=&quot;&quot;156f1933-e327-4dce-b665-110d62720d03=&quot;&quot;&quot;&quot; parentID=&quot;&quot;-1=&quot;&quot;&quot;&quot; level=&quot;&quot;1=&quot;&quot;&quot;&quot; creatorID=&quot;&quot;0=&quot;&quot;&quot;&quot; sortOrder=&quot;&quot;0=&quot;&quot;&quot;&quot; createDate=&quot;&quot;2017-10-17T20:25:12=&quot;&quot;&quot;&quot; updateDate=&quot;&quot;2017-10-17T20:25:17=&quot;&quot;&quot;&quot; nodeName=&quot;&quot;Home=&quot;&quot;&quot;&quot; urlName=&quot;&quot;home=&quot;&quot;&quot;&quot; path=&quot;&quot;-1,1103=&quot;&quot;&quot;&quot; isDoc=&quot;&quot;&quot;&quot; nodeType=&quot;&quot;1093=&quot;&quot;&quot;&quot; creatorName=&quot;&quot;Admin=&quot;&quot;&quot;&quot; writerName=&quot;&quot;Admin=&quot;&quot;&quot;&quot; writerID=&quot;&quot;0=&quot;&quot;&quot;&quot; template=&quot;&quot;1064=&quot;&quot;&quot;&quot; nodeTypeAlias=&quot;&quot;home=&quot;&quot;&quot;&quot;&gt;\n                &lt;title&gt;Welcome!&lt;/title&gt;\n                &lt;excerptCount&gt;4&lt;/excerptCount&gt;\n                &lt;page id=&quot;&quot;1122=&quot;&quot;&quot;&quot; key=&quot;&quot;1cb33e0a-400a-4938-9547-b05a35739b8b=&quot;&quot;&quot;&quot; parentID=&quot;&quot;1103=&quot;&quot;&quot;&quot; level=&quot;&quot;2=&quot;&quot;&quot;&quot; creatorID=&quot;&quot;0=&quot;&quot;&quot;&quot; sortOrder=&quot;&quot;0=&quot;&quot;&quot;&quot; createDate=&quot;&quot;2017-10-17T20:25:12=&quot;&quot;&quot;&quot; updateDate=&quot;&quot;2017-10-17T20:25:17=&quot;&quot;&quot;&quot; nodeName=&quot;&quot;Page=&quot;&quot; 1=&quot;&quot;&quot;&quot; urlName=&quot;&quot;page1=&quot;&quot;&quot;&quot; path=&quot;&quot;-1,1103,1122=&quot;&quot;&quot;&quot; isDoc=&quot;&quot;&quot;&quot; nodeType=&quot;&quot;1095=&quot;&quot;&quot;&quot; creatorName=&quot;&quot;Admin=&quot;&quot;&quot;&quot; writerName=&quot;&quot;Admin=&quot;&quot;&quot;&quot; writerID=&quot;&quot;0=&quot;&quot;&quot;&quot; template=&quot;&quot;1060=&quot;&quot;&quot;&quot; nodeTypeAlias=&quot;&quot;page=&quot;&quot;&quot;&quot;&gt;\n                &lt;title&gt;Welcome!&lt;/title&gt;\n                &lt;excerpt&gt;[CDATA[Lorem ipsum dolor...]]&lt;/excerpt&gt;\n                &lt;body&gt;\n                [CDATA[&lt;p&gt;Lorem ipsum dolor...&lt;/p&gt;]]\n                &lt;/body&gt;\n                &lt;image&gt;123&lt;/image&gt;\n                &lt;/page&gt;\n                &lt;page id=&quot;&quot;1123=&quot;&quot;&quot;&quot; key=&quot;&quot;242928f6-a1cf-4cd3-ac34-f3ddf3526b2e=&quot;&quot;&quot;&quot; parentID=&quot;&quot;1103=&quot;&quot;&quot;&quot; level=&quot;&quot;2=&quot;&quot;&quot;&quot; creatorID=&quot;&quot;0=&quot;&quot;&quot;&quot; sortOrder=&quot;&quot;1=&quot;&quot;&quot;&quot; createDate=&quot;&quot;2017-10-17T20:25:12=&quot;&quot;&quot;&quot; updateDate=&quot;&quot;2017-10-17T20:25:17=&quot;&quot;&quot;&quot; nodeName=&quot;&quot;Page=&quot;&quot; 2=&quot;&quot;&quot;&quot; urlName=&quot;&quot;page2=&quot;&quot;&quot;&quot; path=&quot;&quot;-1,1103,1123=&quot;&quot;&quot;&quot; isDoc=&quot;&quot;&quot;&quot; nodeType=&quot;&quot;1095=&quot;&quot;&quot;&quot; creatorName=&quot;&quot;Admin=&quot;&quot;&quot;&quot; writerName=&quot;&quot;Admin=&quot;&quot;&quot;&quot; writerID=&quot;&quot;0=&quot;&quot;&quot;&quot; template=&quot;&quot;1060=&quot;&quot;&quot;&quot; nodeTypeAlias=&quot;&quot;page=&quot;&quot;&quot;&quot;&gt;\n                &lt;title&gt;More welcome!&lt;/title&gt;\n                &lt;excerpt&gt;[CDATA[More lorem ipsum dolor...]]&lt;/excerpt&gt;\n                &lt;body&gt;[CDATA[Even more lorem ipsum dolor...]]&lt;/body&gt;\n                &lt;image&gt;234&lt;/image&gt;\n                &lt;/page&gt;\n                &lt;/home&gt;\n                &lt;/root&gt;\n                &quot;.Trim();\n                }\n                </code></pre>\n\n                <p>In our tests, we can now query by anything. The returned content has the hierarchy and everything, so we can traverse it with <code>Children()</code>, <code>Parent()</code> and whatnot.\n                The only missing piece is the properties. Here's a test showing that we have everything but the title property of Page 1:</p>\n                <pre><code>const int Page1Id = 1122;\n\n                [Test]\n                public void Returns_Empty_Documents()\n                {\n                var contentCache = umbracoSupport.UmbracoContext.ContentCache;\n                var page1 = contentCache.GetById(Page1Id);\n\n                Assert.That(page1, Is\n                .Not.Null\n                .And\n                .InstanceOf&lt;PublishedContentWithKeyBase&gt;()\n                .And\n                .Property(&quot;Name&quot;).EqualTo(&quot;Page 1&quot;)\n                .And\n                .Matches&lt;IPublishedContent&gt;(c =&gt; c[&quot;title&quot;] == null)\n                .And\n                .Property(&quot;Parent&quot;)\n                .Property(&quot;Children&quot;)\n                .With.Count.EqualTo(2)\n                );\n                }\n                </code></pre>\n\n                <p>Don't be discouraged though. This method is excellent for testing URL providers, ContentFinders, Menus, Sitemaps. You name it. I know I've written my fair share of hierarchy traversing code or fancy XPath queries. Unless of course, you need property values.</p>\n                <p>Instead of pulling your leg about it, here's how we fix that.</p>\n                <h2>Put some meat on the content</h2>\n                <p>The reason the properties are not there isn't because they weren't read. It's because the <code>XmlPublishedContent</code> that we get out ultimately relies on the <code>PublishedContentType</code> for it's respective document type. Luckily, all Umbraco's services are already stubbed up for us, so we can give it what it needs.</p>\n                <p>The gory guts of it is that it needs an <code>IContentType</code> from the <code>ContentTypeService</code>. We can easily stub one up with Moq: <code>var contentType = Mock.Of&lt;IContentType&gt;()</code>. Further, it uses the <code>IContentType.CompositionPropertyTypes</code> collection to iterate the properties. These <code>PropertyType</code> instances are actually completely dependency-less, so we can just create some:</p>\n                <pre><code>Mock.Get(contentType)\n                .Setup(t =&gt; t.CompositionPropertyTypes)\n                .Returns(new[] {\n                new PropertyType(&quot;Umbraco.TinyMCEv3&quot;, DataTypeDatabaseType.Nvarchar, &quot;body&quot;)\n                });\n                </code></pre>\n\n                <p>Finally, we set it up on the <code>ContentTypeService</code> stub:</p>\n                <pre><code>Mock.Get(umbracoSupport.ServiceContext.ContentTypeService)\n                .Setup(s =&gt; s.GetContentType(alias))\n                .Returns(contentType);\n                </code></pre>\n\n                <p>If only it were so easy. We depend on the <code>BaseWebTest</code> class from <code>Umbraco.Tests</code>. It sets up a content type factory that's being used somewhere in the hierarchy. It feeds <code>AutoPublishedContent</code> instances instead of what we've stubbed up. We need to turn that off. There's a trick here. <code>UmbracoSupport</code> should now live in an assembly called <code>Umbraco.UnitTests.Adapter</code>. If you're pre 7.6.4 you need to go with <code>Umbraco.VisualStudio</code>. This is because the factory we need to reset is internal to Umbraco. By having <code>UmbracoSupport</code> in an assembly with one of these two names, we're able to do it. (Otherwise, you use reflection.) <em>By no means do this with production code. Just... forget it!</em><br />\n                This paragraph should also get it's own blog post. :)</p>\n                <p>But I digress. Here's the line you need to have the content use the <code>ContentTypeService</code> to fetch its type:</p>\n                <pre><code>PublishedContentType.GetPublishedContentTypeCallback = null;\n                </code></pre>\n\n                <p>It's tempting to leave setup code like this lying around in all our <code>SetUp</code> methods or even in our &quot;Arrange&quot; sections. I've sinned too much, so those few lines are now part of <code>UmbracoSupport</code> and can be used to set up multiple types for your fixture or test.</p>\n                <p>Here's a test that fetches the same document as before, but can now read properties:</p>\n                <pre><code>[Test]\n                public void With_DocumentTypes_Setup_Returns_Full_Blown_Documents()\n                {\n                umbracoSupport.SetupContentType(&quot;page&quot;, new[]\n                {\n                new PropertyType(&quot;textstring&quot;, DataTypeDatabaseType.Nvarchar, &quot;title&quot;),\n                new PropertyType(&quot;textarea&quot;, DataTypeDatabaseType.Nvarchar, &quot;excerpt&quot;),\n                new PropertyType(&quot;Umbraco.TinyMCEv3&quot;, DataTypeDatabaseType.Nvarchar, &quot;body&quot;),\n                new PropertyType(&quot;media&quot;, DataTypeDatabaseType.Integer, &quot;image&quot;)\n                });\n\n                var page1 = contentCache.GetById(Page1Id);\n\n                Assert.Multiple(() =&gt;\n                {\n                Assert.That(page1[&quot;title&quot;], Is.EqualTo(&quot;Welcome!&quot;));\n                Assert.That(page1[&quot;excerpt&quot;], Is.EqualTo(&quot;Lorem ipsum dolor...&quot;));\n                Assert.That(page1[&quot;body&quot;].ToString(), Is.EqualTo(&quot;&lt;p&gt;Lorem ipsum dolor...&lt;/p&gt;&quot;));\n                Assert.That(page1[&quot;image&quot;], Is.EqualTo(123));\n                });\n                }\n                </code></pre>\n\n                <p>Notice the .ToString() on the body. It's actually not a string, but some weird dynamic Umbraco thingy. I never saw that type before, but I didn't pursue it in time for this post. I don't want anything to do with it though, so let's storm on to the grand finale.</p>\n                <h2>Let's make them strong already!</h2>\n                <p>We're finally there. The last piece of the puzzle. Strongly typed content!</p>\n                <p>It's managed by two resolvers: <code>PublishedContentModelFactoryResolver</code> and <code>PropertyValueConvertersResolver</code>. I won't go into details about those now, but suffice to say all resolvers have to be initialized before <code>BaseWebTest.Initialize</code> and its ancestors.\n                I've added an <code>InitializeResolvers</code> method to the <code>UmbracoSupport</code> class where these two are initialized. The <code>PublishedContentModelFactoryResolver</code> is set to a <code>FakeModelFactoryResolver</code> that lets you register constructors for document type aliases. <a href=\"https://github.com/lars-erik/umbraco-unit-testing-samples/blob/master/Umbraco.UnitTesting.Adapter/Support/FakeTypedModelFactory.cs\">The code for this is available in my &quot;Umbraco unit testing samples&quot; repo on github</a>. </p>\n                <p>To set up property value converters, we also need to do that before registering the resolver. The resolver takes all the converters as constructor arguments. I've added a list of those types as a property on <code>UmbracoSupport</code>, so we can add <code>IPropertyValueConverter</code> implementing types before calling <code>UmbracoSupport.SetupUmbraco</code>:</p>\n                <pre><code>[SetUp]\n                public void Setup()\n                {\n                umbracoSupport = new UmbracoSupport();\n\n                // Converter types need to be added before setup\n                umbracoSupport.ConverterTypes.Add(typeof(TinyMceValueConverter));\n\n                umbracoSupport.SetupUmbraco();\n\n                //...\n                }\n                </code></pre>\n\n                <p>To register the typed model, there's just one line you can do in your setup, or even in your tests. Here I've refactored out the setup for the content type from earlier, and I register a model type for the document type alias:</p>\n                <pre><code>private void SetupContentType()\n                {\n                umbracoSupport.SetupContentType(&quot;page&quot;, new[]\n                {\n                new PropertyType(&quot;textstring&quot;, DataTypeDatabaseType.Nvarchar, &quot;title&quot;),\n                new PropertyType(&quot;textarea&quot;, DataTypeDatabaseType.Nvarchar, &quot;excerpt&quot;),\n                new PropertyType(&quot;Umbraco.TinyMCEv3&quot;, DataTypeDatabaseType.Nvarchar, &quot;body&quot;),\n                new PropertyType(&quot;media&quot;, DataTypeDatabaseType.Integer, &quot;image&quot;)\n                });\n                }\n\n                [Test]\n                public void With_DocumentTypes_And_Models_Setup_Returns_Fully_Functional_Typed_Content()\n                {\n                SetupContentType();\n\n                // Register strongly typed models with the ModelFactory\n                umbracoSupport.ModelFactory.Register(&quot;page&quot;, c =&gt; new Page(c));\n\n                var page1 = contentCache.GetById(Page1Id);\n\n                Assert.That(page1, Is\n                .InstanceOf&lt;Page&gt;()\n                .And.Property(&quot;Body&quot;)\n                .Matches&lt;IHtmlString&gt;(s =&gt;\n                s.ToString() == &quot;&lt;p&gt;Lorem ipsum dolor...&lt;/p&gt;&quot;\n                )\n                );\n                }\n\n                public class Page : PublishedContentModel\n                {\n                public Page(IPublishedContent content) : base((IPublishedContentWithKey)content)\n                {\n                }\n\n                public string Title =&gt; Content.GetPropertyValue&lt;string&gt;(&quot;title&quot;);\n                public string Excerpt =&gt; Content.GetPropertyValue&lt;string&gt;(&quot;excerpt&quot;);\n                public IHtmlString Body =&gt; Content.GetPropertyValue&lt;IHtmlString&gt;(&quot;body&quot;);\n                public int Image =&gt; Content.GetPropertyValue&lt;int&gt;(&quot;image&quot;);\n                }\n                </code></pre>\n\n                <p>There you go! There's nothing more to it. Well, there is...</p>\n                <p>The <code>Page</code> class here is bundled with the test. If we use a common interface both for our runtime model and our test model, we're safe. But we should really use the runtime models. This means you shouldn't use <em>runtime generated</em> models. <a href=\"https://github.com/zpqrtbnk/Zbu.ModelsBuilder/wiki/Install-And-Configure\">Go through the instructions for ModelsBuilder</a> to have your models compiled and accessible from the tests.</p>\n                <h2>Conclusion</h2>\n                <p>And although the XML is pretty ugly, you can flush it out into files bundled with your tests. You can also exploit the umbraco.config file and just copy segments from there into your test source files. That way, you spend no time writing the stubs, and the content is cleanly separated from your tests.</p>\n                <p>That's <em>really</em> all there is to it! It is. Now go test a bit, or a byte, or a string, or even a <a href=\"/archive/testing-views-with-razorgenerator/\">view</a>.</p>\n                <p><a href=\"https://github.com/lars-erik/umbraco-unit-testing-samples/tree/master/Umbraco.UnitTesting.Adapter/Support\">The new version of UmbracoSupport including the fake model factory is available here.</a></p>\n            ",
        "category": [
            {
                "Value": "unit testing"
            },
            {
                "Value": "umbraco"
            }
        ],
        "guid": {
            "isPermaLink": false,
            "isPermaLinkSpecified": true,
            "Value": "1127"
        },
        "pubDate": "Tue, 17 Oct 2017 21:18:06 Z",
        "ListHeading": "UmbracoSupport got typed content",
        "ListSummary": {},
        "ContentTypeName": "Rss",
        "Url": "http://blog.aabech.no/archive/umbracosupport-got-typed-content/",
        "SortOrder": 0,
        "SortDate": "2017-10-17T23:18:06+02:00",
        "Date": "2017-10-17T23:18:06+02:00"
    }
]